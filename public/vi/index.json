[
{
	"uri": "/vi/3-creating-lambda-functions/3.1-create-the-getstudentdata-function/",
	"title": "Cấu hình Lambda Function getStudentData",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo và cấu hình hàm Lambda getStudentData để truy xuất toàn bộ dữ liệu sinh viên từ bảng DynamoDB studentData, bao gồm các trường Mã sinh viên (studentid), Họ tên (name), Lớp (class), Ngày sinh (birthdate), và Email (email). Hàm này sử dụng thao tác Scan để lấy dữ liệu và trả về kết quả dưới dạng JSON, hỗ trợ tích hợp với giao diện web thông qua API Gateway.\nHàm sử dụng Python 3.13, kiến trúc x86_64, gán vai trò IAM LambdaGetStudentRole (tạo ở mục 2.1), và tích hợp với DynamoDB.\nYêu Cầu Ban Đầu Bạn cần hoàn thành các bước chuẩn bị ở mục 2 (IAM Role LambdaGetStudentRole, bảng DynamoDB studentData) trước khi tạo hàm. Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nTổng Quan về Hàm getStudentData Hàm getStudentData thực hiện các chức năng sau:\nKết nối tới bảng DynamoDB studentData trong vùng AWS (mặc định us-east-1). Thực hiện thao tác Scan để lấy toàn bộ dữ liệu sinh viên, xử lý phân trang nếu bảng lớn. Trả về dữ liệu dưới dạng JSON với header CORS (Access-Control-Allow-Origin: '*') để giao diện web (chạy trên CloudFront) có thể truy cập thông qua API Gateway. Ghi log vào CloudWatch để giám sát và gỡ lỗi (hỗ trợ bởi chính sách AWSLambdaBasicExecutionRole). Hành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS.\nTrong thanh tìm kiếm ở đầu trang, nhập Lambda và chọn AWS Lambda để vào giao diện quản lý.\nĐảm bảo vùng AWS là us-east-1 (khớp với bảng studentData), kiểm tra ở góc trên bên phải AWS Console.\nHình 1: Giao diện AWS Console với thanh tìm kiếm Lambda.\nĐiều Hướng Đến Mục Functions\nTrong giao diện chính của AWS Lambda, nhìn vào menu điều hướng bên trái.\nChọn Functions (Hàm) để xem danh sách các hàm Lambda hiện có. Nếu chưa tạo hàm nào, danh sách sẽ trống.\nHình 2: Menu điều hướng với tùy chọn Functions.\nKhởi Tạo Quá Trình Tạo Hàm\nTrong giao diện Functions, nhấn nút Create function (Tạo hàm) ở góc trên bên phải để bắt đầu cấu hình hàm mới.\nHình 3: Nút Create function trong giao diện Functions.\nCấu Hình Thông Tin Cơ Bản của Hàm\nTrong mục Function type, chọn Author from scratch (Tạo từ đầu).\nTrong mục Function name, nhập chính xác getStudentData.\nTrong mục Runtime, chọn Python 3.13. Nếu không có Python 3.13, chọn phiên bản mới nhất (ví dụ: Python 3.12 hoặc 3.11).\nTrong mục Architecture, chọn x86_64.\nHình 4: Giao diện cấu hình thông tin cơ bản của hàm.\nTrong mục Permissions, chọn Use an existing role (Sử dụng vai trò hiện có), chọn LambdaGetStudentRole (tạo ở mục 2.1, bao gồm AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonS3FullAccess, CloudFrontFullAccess).\nLưu ý: AmazonS3FullAccess và CloudFrontFullAccess không được sử dụng trong mã hiện tại, nhưng được giữ lại theo yêu cầu trước đó.\nGiữ các thiết lập khác mặc định và nhấn Create function.\nHình 5: Chọn vai trò LambdaGetStudentRole và nhấn Create function.\nKiểm Tra Trạng Thái Tạo Hàm\nSau khi nhấn Create function, bạn sẽ được chuyển đến trang chi tiết của hàm getStudentData.\nGiao diện hiển thị thông báo tương tự: \u0026ldquo;Successfully created the function getStudentData. You can now change its code and configuration. To invoke your function with a test event, choose Test.\u0026rdquo;\nNếu không thấy thông báo hoặc gặp lỗi, kiểm tra LambdaGetStudentRole có tồn tại và tài khoản AWS có quyền lambda:CreateFunction.\nHình 6: Trang chi tiết của hàm getStudentData sau khi tạo.\nCấu Hình Mã Nguồn\nTrong tab Code, cuộn xuống phần Code source. Trong tệp lambda_function.py, xóa mã mặc định và dán mã sau: import json import boto3 def lambda_handler(event, context): # Kết nối tới DynamoDB trong vùng us-east-1 dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;, region_name=\u0026#39;us-east-1\u0026#39;) table = dynamodb.Table(\u0026#39;studentData\u0026#39;) # Lấy toàn bộ dữ liệu từ bảng studentData response = table.scan() data = response[\u0026#39;Items\u0026#39;] # Tiếp tục quét nếu còn dữ liệu (phân trang) while \u0026#39;LastEvaluatedKey\u0026#39; in response: response = table.scan(ExclusiveStartKey=response[\u0026#39;LastEvaluatedKey\u0026#39;]) data.extend(response[\u0026#39;Items\u0026#39;]) # Trả về dữ liệu ở dạng JSON return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(data), \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39; } } Giải thích mã:\nKết nối DynamoDB: Sử dụng boto3.resource('dynamodb', region_name='us-east-1') để kết nối đến DynamoDB trong vùng us-east-1. Thay us-east-1 nếu bảng ở vùng khác (ví dụ: us-west-2). Truy xuất dữ liệu: Thao tác table.scan() lấy toàn bộ dữ liệu từ bảng studentData. Vòng lặp while xử lý phân trang (DynamoDB giới hạn 1MB mỗi lần Scan). Phản hồi: Trả về dữ liệu JSON với mã trạng thái 200, kèm header Content-Type: application/json và Access-Control-Allow-Origin: '*' để hỗ trợ CORS cho giao diện web (CloudFront) qua API Gateway. Kiểm tra region_name='us-east-1' khớp với vùng AWS.\nNhấn Deploy để lưu và triển khai mã.\nHình 7: Giao diện chỉnh sửa mã nguồn getStudentData.\nSau khi triển khai, giao diện hiển thị thông báo: \u0026ldquo;Successfully updated the function getStudentData.\u0026rdquo;\nHình 8: Thông báo triển khai thành công.\nCấu Hình Timeout và Bộ Nhớ\nTrong tab Configuration \u0026gt; General configuration, nhấn Edit. Đặt Timeout: 30 giây (đủ cho thao tác Scan trên bảng lớn). Đặt Memory: 128 MB (mặc định, đủ cho hàm này). Nhấn Save. Kiểm Tra Hàm\nTrong tab Test, nhấn Create new test event. Đặt tên sự kiện (ví dụ: testGetStudentData). Sử dụng JSON mẫu (có thể để trống): {} Nhấn Create để lưu sự kiện, sau đó nhấn Test để chạy hàm. Kiểm tra kết quả: Nếu bảng studentData có dữ liệu (tạo ở mục 2.4), hàm trả về danh sách JSON, ví dụ: [ {\u0026#34;studentid\u0026#34;: \u0026#34;SV001\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Nguyen Van A\u0026#34;, \u0026#34;class\u0026#34;: \u0026#34;CNTT01\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;2000-01-01\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;student1@example.com\u0026#34;}, {\u0026#34;studentid\u0026#34;: \u0026#34;SV002\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Tran Thi B\u0026#34;, \u0026#34;class\u0026#34;: \u0026#34;CNTT02\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;2001-02-02\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;student2@example.com\u0026#34;} ] Nếu bảng trống, hàm trả về []. Nếu lỗi, kiểm tra log trong CloudWatch (Monitor \u0026gt; Logs). Các lỗi phổ biến: \u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra LambdaGetStudentRole có chính sách AmazonDynamoDBReadOnlyAccess. \u0026ldquo;ResourceNotFoundException\u0026rdquo;: Đảm bảo bảng studentData đã tạo (mục 2.4). \u0026ldquo;Invalid region\u0026rdquo;: Kiểm tra region_name khớp với vùng AWS. Lưu Ý Quan Trọng Yếu Tố Chi Tiết IAM Role Sử dụng LambdaGetStudentRole (mục 2.1) với AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonS3FullAccess, CloudFrontFullAccess. Loại bỏ AmazonS3FullAccess, CloudFrontFullAccess nếu không dùng để tuân thủ least privilege. Bảng DynamoDB Bảng studentData phải tồn tại với studentid (Partition Key, String), name, class, birthdate, email. Hoàn thành mục 2.4 trước. CORS Header Access-Control-Allow-Origin: '*' cần cho giao diện web (CloudFront) gọi qua API Gateway. Cấu hình CORS trong API Gateway sau. Vùng AWS Đảm bảo region_name='us-east-1' trong mã khớp với vùng của bảng studentData. Cập nhật nếu dùng vùng khác (ví dụ: us-west-2). Xử lý lỗi Kiểm tra log trong CloudWatch (/aws/lambda/getStudentData) nếu lỗi. Dùng CloudTrail hoặc IAM Access Advisor để xác định vấn đề quyền. Tối ưu hóa Thao tác Scan tốn kém với bảng lớn. Cân nhắc dùng Query với chỉ mục nếu cần lọc dữ liệu (ví dụ: theo class). Thêm dữ liệu mẫu vào studentData để thử nghiệm. Kiểm tra sớm Chạy kiểm tra để xác minh dữ liệu trả về đúng trước khi tích hợp với API Gateway. Mẹo thực tiễn: Thêm dữ liệu mẫu vào bảng studentData và kiểm tra log CloudWatch để gỡ lỗi trước khi tích hợp.\nKết Luận Hàm Lambda getStudentData đã được tạo để truy xuất dữ liệu sinh viên từ bảng studentData. Hàm sẵn sàng tích hợp với API Gateway.\nBước tiếp theo: Chuyển đến Tạo hàm insertStudentData để tiếp tục!\n"
},
{
	"uri": "/vi/8-setting-up-system-backup/8.1-modifying-backup-lambda-configuration/",
	"title": "Chỉnh Sửa Cấu Hình trong Lambda Backup",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Cập nhật cấu hình cho Lambda function BackupDynamoDBAndSendEmail (tạo ở mục 3.3, tích hợp với endpoint POST /backup, mục 4.6) để đảm bảo hoạt động hiệu quả khi backup dữ liệu từ bảng DynamoDB studentData vào S3 Bucket student-backup-20250706 (mục 6.5) và gửi email thông báo qua Amazon SES. Cấu hình bao gồm Memory, Ephemeral Storage, Execution Role, và Environment Variables để tối ưu hiệu suất và tích hợp với hệ thống serverless.\nTổng Quan về Lambda Backup Vai trò của Lambda BackupDynamoDBAndSendEmail: Xử lý endpoint POST /backup trong API student (stage prod, mục 4.8), đọc dữ liệu từ DynamoDB studentData, lưu tệp JSON vào S3 student-backup-20250706, và gửi email thông báo qua SES. Cập nhật để hỗ trợ kích hoạt từ API Gateway và Amazon EventBridge (mục 8.2) cho backup thủ công (qua giao diện web) và tự động (qua lịch trình). Tích hợp với hệ thống: Giao diện web (phân phối qua CloudFront StudentWebsiteDistribution, mục 7.1–7.3) từ S3 Bucket student-management-website-2025 (mục 6.1–6.4) gọi API student với Invoke URL (VD: https://abc123.execute-api.us-east-1.amazonaws.com/prod) và StudentApiKey (mục 4.2). Các chức năng: POST /students: Lưu bản ghi vào DynamoDB studentData và gửi email qua SES. GET /students: Hiển thị dữ liệu trong bảng. POST /backup: Tạo tệp JSON trong student-backup-20250706 và gửi email thông báo. CORS được cấu hình (mục 4.7) để hỗ trợ yêu cầu từ domain CloudFront (VD: https://d12345678.cloudfront.net). Vai trò IAM DynamoDBBackupRole (mục 6.5) cấp quyền truy cập DynamoDB, S3, và SES. Yêu Cầu Ban Đầu Bạn cần hoàn thành các mục sau:\nMục 2.4: Tạo S3 Bucket student-backup-20250706. Mục 3.3: Tạo Lambda function BackupDynamoDBAndSendEmail với vai trò DynamoDBBackupRole. Mục 4.1–4.9: Tạo và cấu hình API student, bao gồm StudentApiKey, StudentUsagePlan, các phương thức GET /students, POST /students, POST /backup, kích hoạt CORS, và triển khai stage prod. Mục 5: Xây dựng giao diện web với index.html, styles.css, scripts.js. Mục 6.1–6.5: Tạo và cấu hình S3 Bucket student-management-website-2025 và student-backup-20250706. Mục 7.1–7.3: Tạo và cấu hình CloudFront StudentWebsiteDistribution.\nĐảm bảo tài khoản AWS có quyền lambda:UpdateFunctionConfiguration, lambda:GetFunction, s3:PutObject, dynamodb:Scan, ses:SendEmail, và vùng AWS là us-east-1. Hành Động Chi Tiết Truy Cập AWS Management Console và Lambda\nĐăng nhập AWS Management Console. Trong thanh tìm kiếm, nhập Lambda và chọn AWS Lambda. Xác minh vùng AWS: us-east-1 để đồng bộ với DynamoDB studentData, S3 (student-management-website-2025, student-backup-20250706), API Gateway, SES, và CloudFront.\nHình 1: Giao diện AWS Console với thanh tìm kiếm Lambda. Chọn Danh Sách Functions\nTrong Lambda \u0026gt; Functions, xem danh sách các Lambda function. Kiểm tra: Đảm bảo hàm BackupDynamoDBAndSendEmail (mục 3.3) xuất hiện. Xử lý lỗi: Nếu không thấy, xác minh tên hàm và quyền lambda:GetFunction: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;lambda:GetFunction\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:\u0026lt;AWS_ACCOUNT_ID\u0026gt;:function:BackupDynamoDBAndSendEmail\u0026#34; } ] } Thay \u0026lt;AWS_ACCOUNT_ID\u0026gt; bằng ID tài khoản AWS.\nHình 2: Danh sách Lambda Functions. Chọn Lambda Function Backup\nNhấp vào BackupDynamoDBAndSendEmail để vào giao diện chi tiết. Nhận diện: Hàm gắn với endpoint POST /backup (mục 4.6) và vai trò DynamoDBBackupRole (mục 6.5).\nHình 3: Giao diện chi tiết của Lambda function. Truy Cập Tab Configuration\nTrong giao diện chi tiết, chọn tab Configuration (bên cạnh Code, Test). Cập Nhật General Configuration\nTrong Configuration \u0026gt; General configuration, nhấn Edit. Cấu hình: Memory: 128 MB (đủ cho đọc DynamoDB, ghi S3, gửi email SES; tăng nếu cần nhưng cân nhắc chi phí). Ephemeral Storage: 512 MB (mặc định, đủ cho dữ liệu tạm). Execution Role: Chọn Use an existing role, chọn DynamoDBBackupRole. Xác minh quyền: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:Scan\u0026#34;, \u0026#34;s3:PutObject\u0026#34;, \u0026#34;ses:SendEmail\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:dynamodb:us-east-1:\u0026lt;AWS_ACCOUNT_ID\u0026gt;:table/studentData\u0026#34;, \u0026#34;arn:aws:s3:::student-backup-20250706/*\u0026#34;, \u0026#34;arn:aws:ses:us-east-1:\u0026lt;AWS_ACCOUNT_ID\u0026gt;:identity/*\u0026#34; ] } ] } Thay \u0026lt;AWS_ACCOUNT_ID\u0026gt; bằng ID tài khoản AWS. Nhấn Save. Xử lý lỗi: Vai trò không xuất hiện: Kiểm tra DynamoDBBackupRole (mục 6.5) và quyền iam:PassRole. Lỗi quyền: Đảm bảo ARN của studentData, student-backup-20250706, SES identity đúng.\nHình 4: Cập nhật General configuration. Lưu Cấu Hình\nNhấn Save. Kết quả: Thông báo \u0026ldquo;Successfully updated function configuration\u0026rdquo;. Memory (128 MB), Ephemeral Storage (512 MB), và Execution Role (DynamoDBBackupRole) được cập nhật. Xử lý lỗi: AccessDenied: Kiểm tra quyền lambda:UpdateFunctionConfiguration: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;lambda:UpdateFunctionConfiguration\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:\u0026lt;AWS_ACCOUNT_ID\u0026gt;:function:BackupDynamoDBAndSendEmail\u0026#34; } ] } Cấu hình không lưu: Kiểm tra giá trị nhập và vai trò DynamoDBBackupRole.\nHình 5: Thông báo lưu cấu hình thành công. Tạo Environment Variables\nTrong Configuration \u0026gt; Environment variables, nhấn Edit. Thêm biến: Key: S3_BUCKET_NAME, Value: student-backup-20250706 (bucket đích cho backup JSON). Key: SENDER_EMAIL, Value: no-reply@studentapp.com (SES verified email). Key: RECIPIENT_EMAIL, Value: admin@studentapp.com (SES verified email). Nhấn Save. Lý do: Các biến môi trường giúp mã nguồn Lambda tham chiếu bucket và email động, tránh hardcode. Xử lý lỗi: Lỗi lưu: Kiểm tra quyền lambda:UpdateFunctionConfiguration. Bucket không tồn tại: Xác minh student-backup-20250706 (mục 2.4). Email không hợp lệ: Xác minh no-reply@studentapp.com và admin@studentapp.com trong SES (mục 3).\nHình 6: Thêm Environment variables. Kiểm Tra Cấu Hình Lambda\nTrong Test, tạo sự kiện test với nội dung {} (mô phỏng EventBridge). Nhấn Test. Kết quả mong đợi: Tệp JSON (VD: students-backup-20250708T1236.json) xuất hiện trong S3 student-backup-20250706. Email gửi đến admin@studentapp.com với subject Backup Completed: students-backup-20250708T1236.json và body Backup saved to s3://student-backup-20250706/students-backup-20250708T1236.json. Xử lý lỗi: AccessDenied: Kiểm tra quyền s3:PutObject, dynamodb:Scan, ses:SendEmail trong DynamoDBBackupRole. No items in DynamoDB: Gọi POST /students (mục 4.5) để thêm dữ liệu vào studentData. SES error: Xác minh email no-reply@studentapp.com, admin@studentapp.com trong SES (mục 3). Environment variable not found: Kiểm tra S3_BUCKET_NAME, SENDER_EMAIL, RECIPIENT_EMAIL trong Environment variables.\nHình 7: Kết quả test Lambda. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Bảo mật - Tránh nhúng StudentApiKey trong scripts.js. Sử dụng CloudFront Functions để thêm header x-api-key: javascript \u0026lt;br\u0026gt; function handler(event) { \u0026lt;br\u0026gt; var request = event.request; \u0026lt;br\u0026gt; request.headers['x-api-key'] = { value: 'xxxxxxxxxxxxxxxxxxxx' }; \u0026lt;br\u0026gt; return request; \u0026lt;br\u0026gt; } \u0026lt;br\u0026gt; - Xác minh email SES (no-reply@studentapp.com, admin@studentapp.com) trước khi gửi. Tối ưu hóa - Bật CloudWatch Logs cho Lambda: Trong Configuration \u0026gt; Monitoring and operations tools, chọn Enable CloudWatch Logs. - Sử dụng AWS CLI để kiểm tra cấu hình: bash \u0026lt;br\u0026gt; aws lambda get-function-configuration --function-name BackupDynamoDBAndSendEmail \u0026lt;br\u0026gt; Tích hợp - CORS: Đảm bảo Access-Control-Allow-Origin: https://d12345678.cloudfront.net trong API Gateway (mục 4.7). - Xác minh endpoint POST /students, GET /students, POST /backup hoạt động với StudentApiKey. Kiểm tra tích hợp - Truy cập CloudFront URL (https://d12345678.cloudfront.net) và kiểm tra: - POST /students: Lưu bản ghi, gửi email SES. - GET /students: Hiển thị bảng. - POST /backup: Tạo tệp trong student-backup-20250706, gửi email. - Sử dụng Developer Tools \u0026gt; Network để kiểm tra yêu cầu API. Xử lý lỗi - AccessDenied: Kiểm tra quyền trong DynamoDBBackupRole và bucket policy của student-backup-20250706. - SES error: Xác minh email SES. - No data: Thêm dữ liệu vào studentData qua POST /students. - Environment variable error: Kiểm tra biến môi trường trong Configuration. Mẹo thực tiễn: Test Lambda sau mỗi cập nhật bằng sự kiện {}. Kiểm tra CloudWatch Logs để gỡ lỗi. Chuẩn bị cho mục 8.2 bằng cách xác minh hàm hoạt động đúng với endpoint POST /backup.\nKết Luận Lambda function BackupDynamoDBAndSendEmail đã được cấu hình với Memory (128 MB), Ephemeral Storage (512 MB), vai trò DynamoDBBackupRole, và biến môi trường (S3_BUCKET_NAME, SENDER_EMAIL, RECIPIENT_EMAIL). Hàm sẵn sàng backup dữ liệu từ DynamoDB studentData vào S3 student-backup-20250706 và gửi email qua SES, tích hợp với API student và giao diện web.\nBước tiếp theo: Chuyển đến Tạo EventBridge Rule để tự động hóa Backup để kích hoạt backup định kỳ!\n"
},
{
	"uri": "/vi/1-introduction/",
	"title": "Giới Thiệu",
	"tags": [],
	"description": "",
	"content": " Khám phá tương lai của phát triển web!\nWorkshop này sẽ dẫn bạn qua hành trình xây dựng một ứng dụng web serverless tiên tiến, tận dụng sức mạnh của AWS để quản lý thông tin sinh viên một cách an toàn, hiệu quả, và tiết kiệm chi phí.\nTrong bối cảnh công nghệ hiện đại, việc xây dựng các ứng dụng web hiệu quả, linh hoạt và tiết kiệm chi phí là mục tiêu hàng đầu của các nhà phát triển. Workshop \u0026ldquo;Triển khai Website Serverless Quản Lý Thông Tin Sinh Viên với Dịch Vụ AWS\u0026rdquo; hướng dẫn bạn từng bước phát triển một website serverless, tận dụng các dịch vụ mạnh mẽ của AWS để quản lý thông tin sinh viên một cách an toàn và tối ưu.\nỨng dụng hỗ trợ:\nNhập và truy xuất dữ liệu sinh viên với các trường thông tin: Mã sinh viên, Họ tên, Lớp, Ngày sinh, và Email. Giao diện trực quan được thiết kế bằng Tailwind CSS, mang lại trải nghiệm người dùng mượt mà. Kiến trúc serverless, loại bỏ nhu cầu quản lý máy chủ. Tính năng nâng cao: Bảo mật, thông báo qua email, và sao lưu tự động để đáp ứng nhu cầu thực tiễn. Lợi Ích của Ứng Dụng Serverless Kiến trúc serverless của AWS mang lại những ưu điểm vượt trội, giúp bạn xây dựng một hệ thống quản lý thông tin sinh viên không chỉ hiệu quả mà còn dễ dàng mở rộng và duy trì. Dưới đây là các lợi ích chính:\n1. Tự Động Mở Rộng AWS Lambda tự động điều chỉnh tài nguyên theo lưu lượng truy cập, đảm bảo ứng dụng hoạt động mượt mà dù số lượng người dùng tăng đột biến.\nVí dụ thực tiễn: Khi hàng trăm sinh viên truy cập cùng lúc để xem hoặc cập nhật thông tin, Lambda tự động phân bổ tài nguyên mà không cần bạn can thiệp, giúp:\nTối ưu hóa chi phí vận hành. Tránh lãng phí tài nguyên khi hệ thống ít sử dụng. 2. Bảo Mật Tối Ưu API Gateway sử dụng API Key để xác thực các yêu cầu, đảm bảo chỉ những người dùng được phép mới có thể truy cập dữ liệu. Hệ thống tích hợp IAM (Identity and Access Management) với các vai trò riêng biệt như:\nLambdaGetStudentRole LambdaInsertStudentRole DynamoDBBackupRole Ví dụ thực tiễn: Hàm Lambda truy xuất dữ liệu chỉ được phép đọc từ DynamoDB, trong khi hàm sao lưu chỉ ghi vào S3, tuân thủ nguyên tắc quyền tối thiểu (least privilege).\nLợi ích:\nBảo vệ dữ liệu nhạy cảm. Giảm nguy cơ tấn công hoặc rò rỉ thông tin. 3. Thông Báo Qua Email AWS SES (Simple Email Service) cung cấp thông báo tự động:\nXác nhận lưu dữ liệu: Gửi email chứa chi tiết về Mã sinh viên, Họ tên, Lớp, và Ngày sinh khi dữ liệu được lưu vào DynamoDB. Sao lưu dữ liệu: Gửi email với pre-signed URL (hết hạn sau 1 giờ) khi dữ liệu được sao lưu vào S3. Lợi ích: Cập nhật trạng thái hệ thống tức thời, đảm bảo thông báo đáng tin cậy và chuyên nghiệp.\n4. Tiết Kiệm Chi Phí Mô hình serverless chỉ tính phí dựa trên tài nguyên thực tế sử dụng:\nLambda: Tính phí theo số lần thực thi và thời gian chạy. S3: Tính phí theo dung lượng lưu trữ. CloudFront: Tính phí dựa trên dữ liệu truyền tải. Ví dụ thực tiễn: Phù hợp cho các ứng dụng có lưu lượng truy cập không ổn định, giúp giảm chi phí vận hành đáng kể so với mô hình máy chủ truyền thống.\n5. Hiệu Suất Cao AWS CloudFront, một dịch vụ CDN (Content Delivery Network), phân phối nội dung tĩnh (HTML, JavaScript) từ S3 đến người dùng trên toàn cầu với độ trễ thấp.\nCách hoạt động: Lưu trữ nội dung tại các Edge Locations gần người dùng.\nVí dụ thực tiễn: Sinh viên truy cập từ Việt Nam, Mỹ, hay châu Âu đều có trải nghiệm mượt mà, nhanh chóng.\nLợi ích: Tăng tốc độ tải trang, cải thiện trải nghiệm người dùng.\n6. Sao Lưu Tự Động Hệ thống tự động sao lưu dữ liệu từ DynamoDB vào S3 theo lịch trình được thiết lập qua EventBridge (mặc định: 7:00 AM +07 hàng ngày).\nQuy trình: Hàm Lambda BackupDynamoDBAndSendEmail tạo tệp JSON chứa toàn bộ dữ liệu sinh viên, lưu vào bucket S3 và gửi pre-signed URL (hết hạn sau 1 giờ).\nVí dụ thực tiễn: Dễ dàng khôi phục dữ liệu sau sự cố, đảm bảo an toàn dữ liệu.\nLợi ích:\nBảo vệ dữ liệu lâu dài. Tự động hóa quy trình sao lưu, tiết kiệm thời gian. Mục Tiêu của Workshop Workshop này không chỉ giúp bạn triển khai một website quản lý thông tin sinh viên mà còn cung cấp kiến thức thực tiễn về cách tích hợp các dịch vụ AWS trong một kiến trúc serverless. Bạn sẽ học cách:\nMục Tiêu Công Nghệ Kết Quả Thiết kế giao diện web hiện đại Tailwind CSS Giao diện trực quan, thân thiện với người dùng Tạo và bảo mật API API Gateway, API Key API an toàn, dễ tích hợp và mở rộng Xử lý và lưu trữ dữ liệu Lambda, DynamoDB Quản lý dữ liệu hiệu quả, đáng tin cậy Gửi thông báo qua email SES Thông báo tức thời, chuyên nghiệp Phân phối nội dung toàn cầu CloudFront Truy cập nhanh, độ trễ thấp từ mọi khu vực Tự động hóa sao lưu dữ liệu S3, EventBridge Dữ liệu an toàn, dễ khôi phục Giám sát hoạt động hệ thống CloudWatch Theo dõi và tối ưu hiệu suất hệ thống Bắt Đầu Hành Trình Của Bạn! Bằng cách hoàn thành workshop, bạn sẽ sở hữu:\nMột ứng dụng serverless hoàn chỉnh, sẵn sàng sử dụng trong thực tế. Kỹ năng chuyên sâu để phát triển các ứng dụng serverless với AWS. Tự tin trong việc tích hợp các dịch vụ cloud vào dự án cá nhân hoặc doanh nghiệp. Sẵn sàng tham gia? Chuyển đến Các bước chuẩn bị để khám phá chi tiết các bước chuẩn bị!\n"
},
{
	"uri": "/vi/6-configuring-s3-buckets/6.1-creating-a-new-s3-bucket/",
	"title": "Khởi Tạo S3 Bucket Mới",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo một Amazon S3 Bucket mới với tên student-management-website-2025 để lưu trữ các tệp tĩnh (index.html, styles.css, scripts.js từ mục 5) cho giao diện web của ứng dụng Quản Lý Dữ Liệu Sinh Viên. Bucket này sẽ được cấu hình để hỗ trợ Static Website Hosting (mục 6.3) và phục vụ nội dung qua CloudFront (mục 7), tích hợp với API student (stage prod, mục 4.8) để gọi các endpoint GET /students, POST /students, và POST /backup với bảo mật API Key (StudentApiKey, mục 4.2) và CORS (mục 4.7).\nTổng Quan về S3 Bucket trong Ứng Dụng Vai trò của bucket student-management-website-2025: Lưu trữ các tệp tĩnh (index.html, styles.css, scripts.js) cho giao diện web sử dụng Tailwind CSS. Bật Static Website Hosting để cung cấp endpoint truy cập giao diện (sẽ được phân phối qua CloudFront để hỗ trợ HTTPS và hiệu suất cao). Bỏ chọn Block all public access để cho phép cấu hình quyền công khai (s3:GetObject) trong Bucket Policy (mục 6.4), cần thiết để CloudFront truy xuất nội dung. Bật Bucket Versioning để lưu trữ các phiên bản của tệp, hỗ trợ khôi phục nếu xảy ra lỗi khi cập nhật giao diện. Tích hợp với hệ thống: Giao diện web gọi API student (mục 4.8) sử dụng Invoke URL (VD: https://abc123.execute-api.us-east-1.amazonaws.com/prod) và StudentApiKey trong header x-api-key. CORS được cấu hình (mục 4.7) để hỗ trợ yêu cầu từ domain CloudFront (VD: https://d12345678.cloudfront.net). Bucket này khác với bucket student-backup-20250706 (mục 2.4, 6.5), dùng để lưu trữ tệp backup từ endpoint POST /backup. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 2.4 (tạo bucket student-backup-20250706), mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, SES email xác minh), mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), mục 4.6 (tạo resource /backup và phương thức POST /backup), mục 4.7 (kích hoạt CORS), mục 4.8 (triển khai API lên stage prod), mục 4.9 (gắn StudentApiKey vào StudentUsagePlan và liên kết với API student stage prod), và mục 5 (xây dựng giao diện web với index.html, styles.css, scripts.js). Đảm bảo tài khoản AWS có quyền truy cập S3 (s3:CreateBucket, s3:PutBucketPolicy) và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn. Trong thanh tìm kiếm ở đầu trang, nhập S3 và chọn dịch vụ Amazon S3 để vào giao diện quản lý bucket. Kiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng us-east-1 (US East (N. Virginia)) để đồng bộ với API student, các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), bảng DynamoDB studentData, bucket student-backup-20250706, và SES. Vùng được hiển thị ở góc trên bên phải AWS Console.\nHình 1: Giao diện AWS Console với thanh tìm kiếm S3. Mở Giao Diện Tạo Bucket\nTrong giao diện chính của Amazon S3, nhìn vào menu điều hướng bên trái hoặc phần chính. Nhấn nút Create bucket (thường nằm ở góc trên bên phải) để mở giao diện cấu hình bucket mới. Lưu ý: Nếu giao diện hiển thị danh sách bucket hiện có, kiểm tra xem bucket student-management-website-2025 đã tồn tại hay chưa để tránh trùng lặp.\nHình 2: Nút Create bucket trong giao diện S3. Cấu Hình Bucket student-management-website-2025\nTrong giao diện Create bucket, nhập các thông tin sau: Bucket name: Nhập student-management-website-2025. Tên bucket phải duy nhất toàn cầu (không trùng với bất kỳ bucket nào trong AWS). Nếu tên bị trùng, thử thêm hậu tố ngẫu nhiên (VD: student-management-website-20250706-abc123). Tên phải tuân thủ quy tắc: chỉ chứa chữ cái thường, số, dấu gạch ngang (-), không chứa khoảng trắng hoặc ký tự đặc biệt khác. AWS Region: Chọn US East (N. Virginia) us-east-1 để đồng bộ với các dịch vụ khác trong hệ thống. Bucket type: Chọn General purpose (phù hợp cho lưu trữ giao diện tĩnh). Object Ownership: Chọn ACLs enabled \u0026gt; Bucket owner preferred để hỗ trợ quyền truy cập công khai thông qua Bucket Policy (mục 6.4). Điều này cho phép quản lý quyền bằng Access Control Lists (ACLs) và Bucket Policy, cần thiết để CloudFront truy xuất tệp.\nHình 3: Cấu hình tên bucket và vùng AWS. Block Public Access settings for this bucket: Bỏ chọn Block all public access và tất cả các tùy chọn con: Block public access to buckets and objects granted through new access control lists Block public access to buckets and objects granted through new public bucket or access point policies Block public access from access points Lý do: Cần cho phép truy cập công khai (s3:GetObject) để CloudFront phục vụ giao diện web. Sau khi cấu hình Bucket Policy (mục 6.4), có thể bật lại các tùy chọn không liên quan để tăng bảo mật.\nHình 4: Bỏ chọn Block Public Access. Bucket Versioning: Chọn Enable để bật Bucket Versioning. Lý do: Lưu trữ các phiên bản của tệp (index.html, styles.css, scripts.js) để khôi phục nếu xảy ra lỗi khi cập nhật giao diện (VD: tải nhầm tệp).\nHình 5: Bật Bucket Versioning. Tags (Tùy chọn): Thêm tag để quản lý chi phí, ví dụ: Project=StudentManagement, Environment=Production. Default encryption: Chọn Enable \u0026gt; Server-side encryption with Amazon S3-managed keys (SSE-S3) để mã hóa dữ liệu tại rest, tăng bảo mật cho các tệp giao diện. Advanced settings: Giữ mặc định (không cần cấu hình Object Lock hoặc Multi-Region Access Points cho giao diện tĩnh). Kiểm tra cấu hình: Xem lại thông tin, đặc biệt là tên bucket, vùng, và cài đặt Block Public Access. Nhấn Create bucket để hoàn tất.\nHình 6: Xem lại và nhấn Create bucket. Tạo Bucket\nSau khi nhấn Create bucket, bạn sẽ thấy thông báo: \u0026ldquo;Successfully created bucket \u0026lsquo;student-management-website-2025\u0026rsquo;.\u0026rdquo; Kết quả mong đợi: Trong danh sách Buckets, bucket student-management-website-2025 xuất hiện với trạng thái mới tạo. Xử lý lỗi: Nếu gặp lỗi \u0026ldquo;Bucket name already exists\u0026rdquo;: Thay tên bucket (VD: student-management-website-20250706-\u0026lt;random-string\u0026gt;). Kiểm tra xem bạn có quyền tạo bucket (s3:CreateBucket) trong vai trò IAM. Nếu gặp lỗi \u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra vai trò IAM của tài khoản AWS có quyền s3:CreateBucket và s3:PutBucketPolicy.\nHình 7: Thông báo trạng thái tạo bucket. Kiểm Tra Bucket\nTrong S3 \u0026gt; Buckets, chọn student-management-website-2025 để xác minh: Properties: Kiểm tra vùng (us-east-1), Bucket Versioning (Enabled), Default encryption (SSE-S3). Permissions: Xác minh Block all public access đã bỏ chọn để hỗ trợ cấu hình Bucket Policy (mục 6.4). Lưu ý: Bucket này sẽ được sử dụng để tải tệp giao diện (mục 6.2), bật Static Website Hosting (mục 6.3), và cấu hình quyền công khai (mục 6.4) trước khi tích hợp với CloudFront. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Tên bucket - Tên student-management-website-2025 được đề xuất để dễ nhận diện, nhưng phải duy nhất toàn cầu. Nếu trùng, thêm hậu tố ngẫu nhiên (VD: student-management-website-20250706-abc123). - Đảm bảo không trùng với bucket backup (student-backup-20250706, mục 2.4). Bảo mật - Bỏ chọn Block all public access chỉ là tạm thời để cấu hình Bucket Policy (mục 6.4). Sau khi cấu hình, có thể bật lại các tùy chọn không liên quan để tăng bảo mật. - Để bảo mật tốt hơn, sử dụng CloudFront Origin Access Identity (OAI) thay vì quyền công khai hoàn toàn (mục 6.4). - Không lưu API_KEY trong các tệp tĩnh. Sử dụng AWS Secrets Manager hoặc CloudFront Functions để thêm header x-api-key (mục 5). Vùng AWS - Đảm bảo vùng us-east-1 khớp với bucket student-management-website-2025, student-backup-20250706, API student, stage prod, các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), DynamoDB studentData, SES, và CloudFront. Xử lý lỗi - Nếu bucket không xuất hiện: Làm mới trang hoặc kiểm tra vùng AWS. - Nếu không thể tạo bucket: Kiểm tra giới hạn bucket trong tài khoản (mặc định 100 bucket/vùng, có thể yêu cầu AWS tăng quota). - Nếu gặp lỗi AccessDenied: Kiểm tra vai trò IAM có quyền s3:CreateBucket và s3:PutBucketPolicy. Tối ưu hóa - Thêm S3 Access Logs để theo dõi truy cập: Trong S3 \u0026gt; student-management-website-2025 \u0026gt; Properties \u0026gt; Server access logging, chọn Enable và chỉ định bucket log (VD: student-web-logs-20250706). - Sử dụng AWS CLI hoặc SDK để tự động hóa tạo bucket: Kiểm tra tích hợp - Xác minh bucket student-management-website-2025 tồn tại trong S3 \u0026gt; Buckets với đúng vùng (us-east-1) và Bucket Versioning (Enabled). - Chuẩn bị sẵn các tệp index.html, styles.css, scripts.js (mục 5) để tải lên (mục 6.2). - Sau khi hoàn tất mục 6, truy cập giao diện qua CloudFront URL (VD: https://d12345678.cloudfront.net) và kiểm tra các chức năng: - POST /students: Lưu bản ghi vào DynamoDB studentData và gửi email qua SES. - GET /students: Hiển thị bảng sinh viên. - POST /backup: Tạo tệp backup trong student-backup-20250706 và gửi email thông báo. Mẹo thực tiễn: Sau khi tạo bucket, kiểm tra ngay trong S3 \u0026gt; Buckets để xác minh thông tin. Sử dụng AWS CLI hoặc SDK để tự động hóa nếu cần tạo nhiều bucket. Chuẩn bị tệp giao diện từ mục 5 và kiểm tra quyền IAM trước khi tiếp tục với mục 6.2 (tải tệp lên S3).\nKết Luận Bucket student-management-website-2025 đã được tạo thành công trong vùng us-east-1, với Bucket Versioning và Default encryption được bật, sẵn sàng để tải tệp giao diện (mục 6.2), cấu hình Static Website Hosting (mục 6.3), và tích hợp với CloudFront.\nBước tiếp theo: Chuyển đến Tải tài nguyên giao diện lên S3 để tiếp tục cấu hình!\n"
},
{
	"uri": "/vi/7-deploying-cloudfront/7.1-creating-a-cloudfront-distribution/",
	"title": "Tạo CloudFront Distribution",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo một CloudFront Distribution để phân phối nội dung tĩnh từ S3 Bucket student-management-website-2025 (mục 6.1–6.4), sử dụng Origin Access Identity (OAI) để giới hạn truy cập bucket chỉ từ CloudFront, bật Web Application Firewall (WAF) để tăng bảo mật, và cung cấp HTTPS cho giao diện web (index.html, styles.css, scripts.js). Distribution sẽ tích hợp với API student (stage prod, mục 4.8) để hỗ trợ các endpoint GET /students, POST /students, và POST /backup, sử dụng StudentApiKey (mục 4.2) với CORS (mục 4.7).\nTổng Quan về CloudFront Distribution Vai trò của CloudFront: Cung cấp HTTPS cho giao diện web (S3 Static Website Hosting chỉ hỗ trợ HTTP, mục 6.3). Tăng tốc độ tải bằng cách lưu cache tại các edge locations toàn cầu. Sử dụng OAI để bảo mật, thay thế chính sách công khai (Principal: \u0026quot;*\u0026quot; , mục 6.4). Bật WAF để bảo vệ chống tấn công (VD: SQL injection, DDoS). Tích hợp với hệ thống: Phục vụ các tệp tĩnh (index.html, styles.css, scripts.js, mục 6.2) từ S3 Bucket student-management-website-2025. Giao diện web gọi API student (mục 4.8) với Invoke URL (VD: https://abc123.execute-api.us-east-1.amazonaws.com/prod) và StudentApiKey. Các chức năng: POST /students: Lưu bản ghi vào DynamoDB studentData và gửi email qua SES. GET /students: Hiển thị dữ liệu trong bảng. POST /backup: Tạo tệp trong S3 Bucket student-backup-20250706 (mục 6.5) và gửi email thông báo. CORS được cấu hình (mục 4.7) để hỗ trợ yêu cầu từ domain CloudFront (VD: https://d12345678.cloudfront.net). Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 6.1 (tạo bucket student-management-website-2025), mục 6.2 (tải lên index.html, styles.css, scripts.js), mục 6.3 (bật Static Website Hosting), mục 6.4 (cấu hình Bucket Policy), mục 6.5 (cấu hình bucket student-backup-20250706), mục 5 (xây dựng giao diện web), mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), mục 4.6 (tạo resource /backup và phương thức POST /backup), mục 4.7 (kích hoạt CORS), mục 4.8 (triển khai API lên stage prod), mục 4.9 (gắn StudentApiKey vào StudentUsagePlan). Đảm bảo tài khoản AWS có quyền cloudfront:CreateDistribution, cloudfront:CreateInvalidation, s3:PutBucketPolicy, và vùng AWS là us-east-1 cho các dịch vụ liên quan.\nHành Động Chi Tiết Truy Cập AWS Management Console\nĐăng nhập vào AWS Management Console bằng tài khoản AWS. Trong thanh tìm kiếm, nhập CloudFront và chọn dịch vụ Amazon CloudFront. Kiểm tra vùng AWS: CloudFront là dịch vụ toàn cầu, nhưng đảm bảo S3 Bucket student-management-website-2025, API student, Lambda, DynamoDB, và SES ở us-east-1.\nHình 1: Giao diện AWS Console với thanh tìm kiếm CloudFront. Mở Giao Diện Tạo Distribution\nTrong CloudFront \u0026gt; Distributions, nhấn Create distribution.\nHình 2: Nút Create distribution trong CloudFront. Cấu Hình Distribution Name và Origin\nDistribution name: Nhập StudentWebsiteDistribution. Lý do: Tên này giúp nhận diện distribution trong danh sách CloudFront, không ảnh hưởng đến domain truy cập.\nHình 3: Nhập Distribution name. Nhấn Next để tiếp tục.\nHình 4: Nhấn Next để qua trang tiếp theo. Origin: Origin type: Chọn Amazon S3.\nHình 5: Chọn Origin type Amazon S3. Origin domain: Nhấn Browse S3 và chọn student-management-website-2025 từ danh sách. Kết quả: AWS tự động điền student-management-website-2025.s3.amazonaws.com (endpoint REST API của S3). Lưu ý: Nếu giao diện hiển thị endpoint Static Website Hosting (student-management-website-2025.s3-website-us-east-1.amazonaws.com), chọn endpoint REST API (*.s3.amazonaws.com) để tương thích với OAI.\nHình 6: Chọn Origin domain. Origin access: Chọn Allow private S3 bucket access to CloudFront – Recommended. Chọn Create a new OAI hoặc chọn OAI hiện có. OAI Name: Nhập StudentWebsiteOAI (hoặc tên tùy chọn). Chọn Use recommended origin settings để tự động cập nhật Bucket Policy của student-management-website-2025. Kết quả: AWS tạo OAI và thêm chính sách vào bucket: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowCloudFrontOAI\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EXXXXXX\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-management-website-2025/*\u0026#34; } ] } Lưu ý: Xóa chính sách công khai cũ (Principal: \u0026quot;*\u0026quot;, mục 6.4) để tăng bảo mật.\nHình 7: Cấu hình Origin Access Identity. Nhấn Choose để xác nhận Origin. Nhấn Next. Cấu Hình Cache Behavior và Security\nDefault cache behavior: Viewer protocol policy: Chọn Redirect HTTP to HTTPS để đảm bảo truy cập an toàn. Allowed HTTP methods: Chọn GET, HEAD (phù hợp cho website tĩnh). Cache key and origin requests: Chọn CachingOptimized để tối ưu hiệu suất. Compress objects automatically: Chọn Yes để nén nội dung (VD: CSS, JS). Web Application Firewall (WAF): Chọn Enable security protections. Chọn AWS WAF default web ACL hoặc tạo ACL mới trong AWS WAF (VD: chặn SQL injection, XSS). Lý do: WAF bảo vệ giao diện web khỏi các cuộc tấn công phổ biến.\nHình 8: Cấu hình Cache Behavior và WAF. Nhấn Next.\nHình 9: Nhấn Next để tiếp tục. Cấu Hình Settings\nPrice class: Chọn Use all edge locations (tối ưu hiệu suất toàn cầu, hoặc chọn khác để giảm chi phí). Alternate domain name (CNAME) (Tùy chọn): Nhập domain tùy chỉnh (VD: www.student-management.com) nếu có, yêu cầu cấu hình DNS. Default root object: Nhập index.html để phục vụ tệp chính khi truy cập domain CloudFront. SSL certificate: Chọn Default CloudFront Certificate (*.cloudfront.net) cho HTTPS. Tags (Tùy chọn): Thêm tag như Project=StudentManagement, Environment=Production.\nHình 10: Cấu hình Settings cho CloudFront. Tạo Distribution\nXem lại cấu hình: Origin: student-management-website-2025.s3.amazonaws.com. Origin access: OAI (StudentWebsiteOAI). Viewer protocol policy: Redirect HTTP to HTTPS. Default root object: index.html. WAF: Enabled. Nhấn Create distribution. Kết quả mong đợi: CloudFront hiển thị thông báo \u0026ldquo;Successfully created new distribution\u0026rdquo;. Trạng thái ban đầu là In Progress (mất 5–15 phút). Sau khi hoàn tất, trạng thái chuyển thành Enabled, và bạn nhận Distribution domain name (VD: d12345678.cloudfront.net).\nHình 11: Thông báo trạng thái tạo distribution. Kiểm Tra Distribution\nTrong CloudFront \u0026gt; Distributions, chọn distribution (StudentWebsiteDistribution). Kiểm tra Status là Enabled và sao chép Distribution domain name (VD: https://d12345678.cloudfront.net). Mở trình duyệt, truy cập URL này. Kết quả mong đợi: Giao diện web hiển thị với biểu mẫu, bảng sinh viên, và nút chức năng (Lưu, Xem, Backup) sử dụng Tailwind CSS và font Poppins.\nHình 12: Giao diện web qua CloudFront. Xử lý lỗi: Lỗi 403 Forbidden: Kiểm tra Bucket Policy có đúng OAI ARN (arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EXXXXXX). Xác minh index.html, styles.css, scripts.js được tải lên S3 (mục 6.2). Đảm bảo chính sách công khai cũ (Principal: \u0026quot;*\u0026quot;) đã bị xóa (mục 6.4). Lỗi 404 Not Found: Kiểm tra Default root object là index.html (mục 7.2). Xác minh Static Website Hosting bật với index.html làm Index document (mục 6.3). Giao diện sai: Mở Developer Tools \u0026gt; Console để kiểm tra lỗi tải styles.css hoặc scripts.js. Kiểm tra đường dẫn trong index.html (VD: \u0026lt;link href=\u0026quot;styles.css\u0026quot;\u0026gt;, \u0026lt;script src=\u0026quot;scripts.js\u0026quot;\u0026gt;). CORS: Kiểm tra cấu hình CORS trong API Gateway (mục 4.7) với Access-Control-Allow-Origin: https://d12345678.cloudfront.net. API lỗi: Kiểm tra StudentApiKey, StudentUsagePlan (mục 4.9), và log CloudWatch của Lambda. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Bảo mật OAI đảm bảo chỉ CloudFront truy cập S3. Xóa chính sách công khai (Principal: \u0026quot;*\u0026quot;, mục 6.4) và giữ Block public access (mục 6.1, trừ Block public access for bucket policies). Sử dụng CloudFront Functions để thêm header x-api-key: javascript \u0026lt;br\u0026gt; function handler(event) { \u0026lt;br\u0026gt; var request = event.request; \u0026lt;br\u0026gt; request.headers['x-api-key'] = { value: 'xxxxxxxxxxxxxxxxxxxx' }; \u0026lt;br\u0026gt; return request; \u0026lt;br\u0026gt; } \u0026lt;br\u0026gt; Tối ưu hóa Bật CloudFront Standard Logs để theo dõi truy cập: Trong CloudFront \u0026gt; Distribution \u0026gt; General \u0026gt; Logging, chọn On, chỉ định bucket log (VD: student-web-logs-20250706). Sử dụng AWS CLI: bash \u0026lt;br\u0026gt; aws cloudfront create-distribution --distribution-config file://distribution-config.json \u0026lt;br\u0026gt; Tích hợp với hệ thống Cập nhật CORS trong API Gateway (mục 4.7) với Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Đảm bảo endpoint POST /students, GET /students, POST /backup hoạt động với Invoke URL và StudentApiKey. Kiểm tra tích hợp Truy cập CloudFront URL (https://d12345678.cloudfront.net) và kiểm tra: - POST /students: Lưu bản ghi, gửi email SES. - GET /students: Hiển thị bảng. - POST /backup: Tạo tệp trong student-backup-20250706, gửi email. Sử dụng Developer Tools \u0026gt; Network để kiểm tra yêu cầu API. Xử lý lỗi 403 Forbidden: Kiểm tra OAI ARN, Bucket Policy, quyền s3:GetObject. 404 Not Found: Xác minh index.html là Default root object, tệp tồn tại trong S3. CORS: Kiểm tra header Access-Control-Allow-Origin trong Lambda (mục 3) và API Gateway (mục 4.7). 429: Kiểm tra giới hạn Rate/Burst/Quota trong StudentUsagePlan (mục 4.3). Mẹo thực tiễn: Kiểm tra CloudFront URL ngay sau khi trạng thái Enabled. Tạo invalidation (mục 7.3) nếu cập nhật tệp S3. Sử dụng AWS CLI để tự động hóa cấu hình.\nKết Luận CloudFront Distribution đã được tạo với OAI và WAF, phân phối nội dung từ student-management-website-2025 qua HTTPS. Hệ thống sẵn sàng tích hợp với API student và kiểm tra giao diện.\nBước tiếp theo: Chuyển đến Cấu hình Default Root Object để tiếp tục cấu hình!\n"
},
{
	"uri": "/vi/4-creating-a-restful-api/4.1-creating-a-rest-api/",
	"title": "Tạo REST API mới trên API Gateway",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo một REST API mới trong AWS API Gateway với tên student và loại endpoint Edge-optimized, để tích hợp với các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail) và giao diện web (chạy trên CloudFront). API này sẽ cung cấp các endpoint để truy xuất, lưu trữ, và sao lưu dữ liệu sinh viên, đồng thời được bảo mật bằng API Key và hỗ trợ CORS.\nTổng Quan về REST API trong API Gateway AWS API Gateway là dịch vụ serverless cho phép tạo các API RESTful hoặc HTTP, kết nối giao diện web với các dịch vụ backend như Lambda, DynamoDB, hoặc S3. API student sẽ bao gồm các endpoint: GET /students: Gọi hàm getStudentData để lấy danh sách sinh viên từ bảng DynamoDB studentData. POST /students: Gọi hàm insertStudentData để lưu thông tin sinh viên và gửi email xác nhận qua SES. POST /backup: Gọi hàm BackupDynamoDBAndSendEmail để sao lưu dữ liệu vào S3 và gửi email thông báo. Edge-optimized endpoint sử dụng mạng CloudFront để giảm độ trễ, phù hợp với giao diện web phân phối qua CloudFront. Yêu Cầu Ban Đầu Bạn cần hoàn thành các bước ở mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập API Gateway và chọn dịch vụ Amazon API Gateway để vào giao diện quản lý.\nKiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng AWS chính (ví dụ: us-east-1), kiểm tra vùng ở góc trên bên phải AWS Console. Vùng này phải khớp với các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), bảng DynamoDB studentData, bucket S3 student-backup-20250706, và SES.\nHình 1: Giao diện AWS Console với thanh tìm kiếm API Gateway.\nĐiều Hướng Đến Mục APIs\nTrong giao diện chính của Amazon API Gateway, nhìn vào menu điều hướng bên trái.\nChọn APIs để xem danh sách các API hiện có. Nếu bạn chưa tạo API nào, danh sách sẽ trống.\nGiao diện sẽ hiển thị các tùy chọn để tạo hoặc quản lý API.\nHình 2: Menu điều hướng với tùy chọn APIs.\nKhởi Tạo Quá Trình Tạo API\nTrong giao diện APIs, nhấn nút Create API (Tạo API) ở góc trên bên phải để bắt đầu cấu hình API mới.\nNếu bạn thấy tùy chọn REST API ngay lập tức, nhảy sang bước 4. Nếu không, giao diện sẽ liệt kê các loại API (REST API, HTTP API, WebSocket API).\nHình 3: Nút Create API trong giao diện APIs.\nChọn REST API và Build\nTrong giao diện Create API, tìm phần REST API (không phải REST API Private hoặc HTTP API).\nNhấn Build bên dưới REST API để bắt đầu tạo API RESTful.\nLưu ý về REST API:\nREST API hỗ trợ các tính năng như API Key, CORS, và tích hợp Lambda Proxy, phù hợp với hệ thống này. So sánh với HTTP API (nhẹ hơn, chi phí thấp hơn) và REST API Private (chỉ truy cập trong VPC), REST API là lựa chọn tốt nhất cho ứng dụng công khai tích hợp với CloudFront. Hình 4: Giao diện chọn REST API và nhấn Build.\nCấu Hình Chi Tiết API\nTrong mục API Details: Chọn New API để tạo API mới từ đầu. API name: Nhập chính xác student (khác với StudentManagementAPI ở mục 4 trước đó, tôi sẽ sử dụng student như yêu cầu). Description: Nhập REST API cho hệ thống quản lý sinh viên, tích hợp với Lambda và CloudFront. API endpoint Type: Chọn Edge-optimized. Giải thích: Edge-optimized: API được phân phối qua mạng CloudFront, sử dụng các edge locations để giảm độ trễ cho người dùng toàn cầu. Phù hợp với giao diện web chạy trên CloudFront. Regional: API chỉ phục vụ trong một vùng AWS, phù hợp nếu không cần tối ưu độ trễ toàn cầu. Private: Chỉ truy cập trong VPC, không phù hợp với ứng dụng công khai. Giữ các thiết lập khác ở giá trị mặc định. Hình 5: Giao diện cấu hình chi tiết API.\nNhấn Create API để tạo.\nHình 6: Nhấn nút Create API. Kiểm Tra Trạng Thái Tạo API\nSau khi nhấn Create API, bạn sẽ được chuyển đến trang quản lý API student. Giao diện sẽ hiển thị thông báo: \u0026ldquo;Successfully created REST API ‘student’.\u0026rdquo; Nếu không thấy thông báo hoặc gặp lỗi: Kiểm tra quyền IAM của tài khoản AWS có bao gồm apigateway:POST để tạo API. Đảm bảo bạn đã chọn REST API và Edge-optimized đúng cách. Trong menu bên trái, chọn Resources để bắt đầu cấu hình các resource và method (sẽ thực hiện ở các mục 4.4, 4.5, 4.6). Hình 7: Trang quản lý API student sau khi tạo. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Tên API Tên student phải được nhập chính xác, vì nó sẽ xuất hiện trong URL Invoke (ví dụ: https://api-id.execute-api.us-east-1.amazonaws.com/prod). Edge-optimized vs Regional Edge-optimized phù hợp với hệ thống này vì giao diện web sử dụng CloudFront. URL Invoke sẽ có định dạng sử dụng CloudFront edge locations. Nếu bạn cần tích hợp với một domain tùy chỉnh (ví dụ: api.system.edu.vn), đảm bảo cấu hình domain trong API Gateway và CloudFront sau khi tạo API. Vùng AWS Đảm bảo vùng us-east-1 khớp với các hàm Lambda, bảng DynamoDB studentData, bucket S3 student-backup-20250706, và SES. Nếu sử dụng vùng khác (ví dụ: us-west-2), bạn cần điều chỉnh khi cấu hình tích hợp Lambda (các mục 4.4, 4.5, 4.6). Xử lý lỗi Nếu gặp lỗi \u0026ldquo;AccessDenied\u0026rdquo;, kiểm tra quyền IAM của tài khoản AWS. Nếu API không hiển thị, làm mới trang hoặc kiểm tra lại vùng AWS. Tối ưu hóa Sau khi tạo API, bạn có thể thêm mô tả chi tiết hơn trong Settings (menu bên trái) hoặc bật logging API Gateway để giám sát: - Vào Settings \u0026gt; CloudWatch Logs \u0026gt; Chọn Enable CloudWatch Logs và đặt mức log (ví dụ: INFO). - Điều này giúp gỡ lỗi khi tích hợp với Lambda hoặc giao diện web. Kiểm tra sớm Sau khi tạo API, xác minh API xuất hiện trong danh sách APIs trước khi cấu hình resource và method. Mẹo thực tiễn: Xác minh API student xuất hiện trong danh sách APIs và kiểm tra URL Invoke sau khi triển khai (mục 4.8) để đảm bảo API sẵn sàng tích hợp.\nKết Luận REST API student đã được tạo thành công trong AWS API Gateway với loại endpoint Edge-optimized, sẵn sàng để cấu hình các resource và method trong các bước tiếp theo.\nBước tiếp theo: Chuyển đến Tạo API Key để bảo vệ truy cập để tiếp tục!\n"
},
{
	"uri": "/vi/",
	"title": "Website Serverless",
	"tags": [],
	"description": "",
	"content": "Triển Khai Website Serverless Quản Lý Thông Tin Sinh Viên với AWS Chào mừng bạn đến với workshop thực tiễn!\nXây dựng một ứng dụng web serverless hiện đại, tận dụng các dịch vụ AWS để quản lý thông tin sinh viên một cách an toàn, hiệu quả, và tiết kiệm chi phí.\nTổng Quan Workshop này hướng dẫn bạn từng bước xây dựng một website serverless sử dụng các dịch vụ AWS mạnh mẽ để quản lý thông tin sinh viên. Ứng dụng hỗ trợ:\nNhập và xuất dữ liệu sinh viên với các trường: Mã sinh viên, Họ tên, Lớp, Ngày sinh, và Email. Giao diện trực quan được thiết kế với Tailwind CSS, mang lại trải nghiệm người dùng mượt mà. Bảo mật: Sử dụng API Key qua API Gateway để xác thực yêu cầu. Thông báo: Gửi email xác nhận và sao lưu qua AWS SES. Sao lưu tự động: Lưu dữ liệu từ DynamoDB vào S3 theo lịch trình. Bằng cách sử dụng các dịch vụ serverless như S3, DynamoDB, Lambda, API Gateway, CloudFront, và SES, bạn sẽ học cách triển khai một ứng dụng:\nKhông cần quản lý máy chủ. Tiết kiệm chi phí với mô hình trả phí theo sử dụng. Tự động mở rộng theo lưu lượng truy cập. Tối ưu hiệu suất toàn cầu với độ trễ thấp. Kiến trúc hệ thống tổng quan:\nHình 1: Sơ đồ tổng quan kiến trúc ứng dụng serverless với các dịch vụ AWS.\nNội Dung Workshop Workshop bao gồm các bước chi tiết để xây dựng ứng dụng serverless hoàn chỉnh. Dưới đây là danh sách các nội dung:\nBước Nội Dung Mô Tả 1 Giới thiệu Tổng quan về workshop, lợi ích của kiến trúc serverless, và mục tiêu học tập. 2 Các bước chuẩn bị Hướng dẫn thiết lập tài khoản AWS, cài đặt công cụ cần thiết, và chuẩn bị môi trường. 3 Cấu hình Lambda Functions Tạo các hàm Lambda để xử lý logic, như truy xuất và lưu trữ dữ liệu sinh viên. 4 Tạo RESTful API Cấu hình API Gateway để tạo API an toàn, tích hợp với Lambda. 5 Viết giao diện cho Website Thiết kế giao diện web với Tailwind CSS để nhập/xuất dữ liệu sinh viên. 6 Cấu hình S3 Bucket Tạo và cấu hình bucket S3 để lưu trữ nội dung tĩnh và dữ liệu sao lưu. 7 Triển khai CloudFront Sử dụng CloudFront để phân phối nội dung toàn cầu với độ trễ thấp. 8 Thiết lập Backup hệ thống Tự động hóa sao lưu dữ liệu từ DynamoDB vào S3 với EventBridge. 9 Kiểm tra kết quả Xác minh hoạt động của ứng dụng qua các kịch bản kiểm thử. 10 Xem Logs hoạt động bằng CloudWatch Theo dõi và phân tích log hệ thống để tối ưu hiệu suất. 11 Video Demo tham khảo Xem video hướng dẫn minh họa cách ứng dụng hoạt động. 12 Dọn dẹp tài nguyên Hướng dẫn xóa các tài nguyên AWS để tránh chi phí không cần thiết. Lưu ý: Mỗi bước được thiết kế để bạn thực hành từng phần của ứng dụng, từ cấu hình cơ sở dữ liệu đến triển khai giao diện và giám sát hệ thống. Hãy làm theo thứ tự để đạt kết quả tốt nhất.\nBắt Đầu Hành Trình Hoàn thành workshop này, bạn sẽ:\nSở hữu một ứng dụng serverless hoàn chỉnh, sẵn sàng sử dụng trong thực tế. Nắm vững kỹ năng thực tiễn để tích hợp các dịch vụ AWS như Lambda, DynamoDB, API Gateway, S3, CloudFront, SES, và CloudWatch. Tự tin phát triển các ứng dụng serverless khác trong tương lai. Sẵn sàng bắt đầu?\nChuyển đến Giới thiệu để khám phá chi tiết về ứng dụng và lợi ích của kiến trúc serverless!\n"
},
{
	"uri": "/vi/2-preparation-steps/",
	"title": "Các Bước Chuẩn Bị",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Thiết lập môi trường cần thiết để triển khai ứng dụng serverless quản lý thông tin sinh viên, bao gồm tài khoản AWS, các IAM Role, bảng DynamoDB, và dịch vụ SES.\nĐể bắt đầu workshop Triển khai Website Serverless Quản Lý Thông Tin Sinh Viên với AWS, bạn cần chuẩn bị các thành phần cơ bản để đảm bảo tích hợp mượt mà với các dịch vụ AWS như Lambda, DynamoDB, API Gateway, S3, CloudFront, và SES.\nYêu Cầu Ban Đầu Bạn cần có một tài khoản AWS để thực hiện các bước trong workshop. Nếu chưa có, hãy tạo tài khoản trước khi tiếp tục.\nĐể tìm hiểu cách tạo tài khoản AWS, tham khảo hướng dẫn chi tiết tại:\nHướng dẫn tạo tài khoản AWS Các Bước Chuẩn Bị Dưới đây là các bước cụ thể để chuẩn bị môi trường cho ứng dụng serverless:\nBước Nội Dung Mô Tả 2.1 Tạo IAM Role cho Lambda Get Tạo vai trò IAM cho hàm Lambda xử lý truy xuất dữ liệu sinh viên từ DynamoDB, đảm bảo quyền truy cập an toàn và tối thiểu. 2.2 Tạo IAM Role cho Lambda Post Tạo vai trò IAM cho hàm Lambda xử lý lưu trữ dữ liệu sinh viên vào DynamoDB, tuân thủ nguyên tắc quyền tối thiểu. 2.3 Tạo IAM Role cho DynamoDB Backup Tạo vai trò IAM cho hàm Lambda thực hiện sao lưu dữ liệu từ DynamoDB vào S3, bao gồm quyền ghi vào S3 và gửi email qua SES. 2.4 Tạo bảng trong DynamoDB Thiết lập bảng studentData với khóa chính studentid (String) để lưu trữ thông tin sinh viên (Mã sinh viên, Họ tên, Lớp, Ngày sinh, Email). 2.5 Cấu hình SES Cấu hình AWS SES để gửi email xác nhận khi lưu dữ liệu và thông báo sao lưu với pre-signed URL. Lưu ý: Thực hiện các bước theo thứ tự để đảm bảo môi trường được thiết lập chính xác. Mỗi bước sẽ được hướng dẫn chi tiết trong các tài liệu tương ứng.\nKết Luận Hoàn thành các bước chuẩn bị này, bạn sẽ có:\nMột tài khoản AWS sẵn sàng để triển khai ứng dụng. Các IAM Role được cấu hình để đảm bảo bảo mật và quyền truy cập tối thiểu. Bảng studentData trong DynamoDB để lưu trữ dữ liệu sinh viên. Dịch vụ SES được thiết lập để gửi thông báo qua email. Sẵn sàng tiếp tục?\nChuyển đến Tạo IAM Role cho Lambda Get để bắt đầu thiết lập vai trò IAM cho hàm Lambda đầu tiên!\n"
},
{
	"uri": "/vi/3-creating-lambda-functions/3.2-create-the-insertstudentdata-function/",
	"title": "Cấu hình Lambda Function insertStudentData",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo và cấu hình hàm Lambda insertStudentData để nhận thông tin sinh viên từ giao diện web, lưu vào bảng DynamoDB studentData, và gửi email xác nhận qua SES. Hàm này xử lý dữ liệu các trường Mã sinh viên (studentid), Họ tên (name), Lớp (class), Ngày sinh (birthdate), và Email (email), đồng thời kiểm tra tính hợp lệ và trùng lặp trước khi lưu. Hàm sử dụng Python 3.13, kiến trúc x86_64, và gán vai trò IAM LambdaInsertStudentRole (sửa lỗi từ LambdaGetStudentRole trong yêu cầu). Hàm sẽ trả về phản hồi JSON để tích hợp với giao diện web qua API Gateway.\nTổng Quan về Hàm insertStudentData Hàm insertStudentData thực hiện các chức năng sau:\nNhận dữ liệu từ event['body'] (gửi từ giao diện web qua API Gateway). Kiểm tra dữ liệu đầu vào (đảm bảo tất cả các trường bắt buộc được cung cấp). Kiểm tra trùng studentid bằng thao tác GetItem để tránh lưu dữ liệu trùng lặp. Lưu dữ liệu vào bảng studentData bằng thao tác PutItem. Gửi email xác nhận qua SES với nội dung chi tiết (mã sinh viên, họ tên, lớp, ngày sinh). Ghi log chi tiết vào CloudWatch để giám sát và gỡ lỗi. Trả về phản hồi JSON với header CORS (Access-Control-Allow-Origin: '*') để hỗ trợ giao diện web. Yêu Cầu Ban Đầu Bạn cần hoàn thành các bước chuẩn bị ở mục 2 (IAM Role LambdaInsertStudentRole, bảng DynamoDB studentData, SES email xác minh) trước khi tạo hàm. Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập Lambda và chọn dịch vụ AWS Lambda để vào giao diện quản lý.\nĐảm bảo bạn đang làm việc trong vùng AWS chính (ví dụ: us-east-1), kiểm tra vùng ở góc trên bên phải AWS Console. Vùng này phải khớp với bảng DynamoDB studentData và SES.\nHình 1: Giao diện AWS Console với thanh tìm kiếm Lambda.\nĐiều Hướng Đến Mục Functions\nTrong giao diện chính của AWS Lambda, nhìn vào menu điều hướng bên trái.\nChọn Functions (Hàm) để xem danh sách các hàm Lambda hiện có. Nếu bạn chưa tạo hàm nào, danh sách sẽ trống.\nHình 2: Menu điều hướng với tùy chọn Functions.\nKhởi Tạo Quá Trình Tạo Hàm\nTrong giao diện Functions, nhấn nút Create function (Tạo hàm) ở góc trên bên phải để bắt đầu cấu hình hàm mới.\nHình 3: Nút Create function trong giao diện Functions.\nCấu Hình Thông Tin Cơ Bản của Hàm\nTrong mục Function type, chọn Author from scratch (Tạo từ đầu) để tự viết mã cho hàm. Trong mục Function name, nhập chính xác insertStudentData. Tên này sẽ được sử dụng khi tích hợp với API Gateway. Trong mục Runtime, chọn Python 3.13 (phiên bản Python mới nhất được yêu cầu). Nếu Python 3.13 không có sẵn, chọn phiên bản Python mới nhất được hỗ trợ (ví dụ: Python 3.12 hoặc 3.11). Trong mục Architecture, chọn x86_64 để đảm bảo tương thích với kiến trúc tiêu chuẩn. Hình 4: Giao diện cấu hình thông tin cơ bản của hàm.\nTrong mục Permissions, chọn Use an existing role (Sử dụng vai trò hiện có).\nTrong danh sách vai trò, chọn LambdaInsertStudentRole (đã tạo ở mục 2.2). Lưu ý quan trọng: Yêu cầu ban đầu chỉ định LambdaGetStudentRole, nhưng vai trò này không phù hợp vì thiếu quyền dynamodb:PutItem và ses:SendEmail. Vai trò LambdaInsertStudentRole bao gồm AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonSESFullAccess, AmazonS3FullAccess, và CloudFrontFullAccess, nhưng AmazonDynamoDBReadOnlyAccess không hỗ trợ PutItem. Cần thay bằng AmazonDynamoDBFullAccess hoặc chính sách tùy chỉnh (xem Lưu ý). Giữ các thiết lập khác ở giá trị mặc định và nhấn Create function để tạo hàm.\nHình 5: Chọn vai trò LambdaInsertStudentRole và nhấn Create function.\nKiểm Tra Trạng Thái Tạo Hàm\nSau khi nhấn Create function, bạn sẽ được chuyển đến trang chi tiết của hàm insertStudentData.\nGiao diện sẽ hiển thị thông báo tương tự: \u0026ldquo;Successfully created the function insertStudentData. You can now change its code and configuration. To invoke your function with a test event, choose Test.\u0026rdquo;\nNếu không thấy thông báo hoặc gặp lỗi, kiểm tra lại vai trò LambdaInsertStudentRole có tồn tại và tài khoản AWS của bạn có quyền lambda:CreateFunction hay không.\nHình 6: Trang chi tiết của hàm insertStudentData sau khi tạo.\nCấu Hình Mã Nguồn\nTrong giao diện chi tiết của hàm insertStudentData, tại tab Code, cuộn xuống phần Code source. Trong tệp lambda_function.py, xóa mã mặc định và dán mã sau: import json import boto3 import logging # Thiết lập logging logger = logging.getLogger() logger.setLevel(logging.INFO) # Khởi tạo kết nối DynamoDB và SES dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(\u0026#39;studentData\u0026#39;) ses = boto3.client(\u0026#39;ses\u0026#39;, region_name=\u0026#39;us-east-1\u0026#39;) def lambda_handler(event, context): logger.info(\u0026#34;Event nhận được: %s\u0026#34;, json.dumps(event)) # Xử lý request body try: if isinstance(event.get(\u0026#39;body\u0026#39;), str): body = json.loads(event[\u0026#39;body\u0026#39;]) elif isinstance(event.get(\u0026#39;body\u0026#39;), dict): body = event[\u0026#39;body\u0026#39;] else: body = {} except Exception as e: logger.error(\u0026#34;Lỗi khi parse JSON: %s\u0026#34;, str(e)) return _response(400, \u0026#34;Dữ liệu gửi lên không hợp lệ.\u0026#34;) # Lấy các trường student_id = body.get(\u0026#39;studentid\u0026#39;) name = body.get(\u0026#39;name\u0026#39;) student_class = body.get(\u0026#39;class\u0026#39;) birthdate = body.get(\u0026#39;birthdate\u0026#39;) email = body.get(\u0026#39;email\u0026#39;) # Kiểm tra dữ liệu hợp lệ if not all([student_id, name, student_class, birthdate, email]): logger.error(\u0026#34;Thiếu các trường: studentid=%s, name=%s, class=%s, birthdate=%s, email=%s\u0026#34;, student_id, name, student_class, birthdate, email) return _response(400, \u0026#34;Thiếu thông tin sinh viên cần thiết.\u0026#34;) # Kiểm tra trùng mã sinh viên try: existing = table.get_item(Key={\u0026#39;studentid\u0026#39;: student_id}) if \u0026#39;Item\u0026#39; in existing: logger.error(\u0026#34;Mã sinh viên %s đã tồn tại\u0026#34;, student_id) return _response(409, f\u0026#34;Mã sinh viên \u0026#39;{student_id}\u0026#39; đã tồn tại.\u0026#34;) except Exception as e: logger.error(\u0026#34;Lỗi khi kiểm tra mã sinh viên: %s\u0026#34;, str(e)) return _response(500, \u0026#34;Lỗi khi kiểm tra dữ liệu.\u0026#34;) # Lưu dữ liệu vào DynamoDB try: table.put_item( Item={ \u0026#39;studentid\u0026#39;: student_id, \u0026#39;name\u0026#39;: name, \u0026#39;class\u0026#39;: student_class, \u0026#39;birthdate\u0026#39;: birthdate, \u0026#39;email\u0026#39;: email } ) logger.info(\u0026#34;Lưu dữ liệu thành công cho studentid: %s\u0026#34;, student_id) except Exception as e: logger.error(\u0026#34;Lỗi khi lưu vào DynamoDB: %s\u0026#34;, str(e)) return _response(500, \u0026#34;Lỗi khi lưu dữ liệu vào hệ thống.\u0026#34;) # Gửi email thông báo email_error = None try: ses.send_email( Source=\u0026#39;baothangvip@gmail.com\u0026#39;, Destination={\u0026#39;ToAddresses\u0026#39;: [email]}, Message={ \u0026#39;Subject\u0026#39;: {\u0026#39;Data\u0026#39;: \u0026#39;Dữ Liệu Sinh Viên Đã Được Lưu\u0026#39;}, \u0026#39;Body\u0026#39;: { \u0026#39;Text\u0026#39;: { \u0026#39;Data\u0026#39;: ( f\u0026#39;📢 THÔNG BÁO TỪ HỆ THỐNG QUẢN LÝ SINH VIÊN HUTECH\\n\\n\u0026#39; f\u0026#39;Chào bạn {name},\\n\\n\u0026#39; f\u0026#39;✅ Thông tin sinh viên của bạn đã được lưu thành công trên hệ thống.\\n\\n\u0026#39; f\u0026#39;🔹 Mã sinh viên: {student_id}\\n\u0026#39; f\u0026#39;🔹 Họ tên: {name}\\n\u0026#39; f\u0026#39;🔹 Lớp: {student_class}\\n\u0026#39; f\u0026#39;🔹 Ngày sinh: {birthdate}\\n\\n\u0026#39; f\u0026#39;📬 Vui lòng giữ email này để đối chiếu khi cần thiết.\\n\\n\u0026#39; f\u0026#39;Thân mến,\\n\u0026#39; f\u0026#39;📘 Hệ thống quản lý sinh viên\\n\u0026#39; f\u0026#39;📧 Email: hutech@system.edu.vn (nếu bạn muốn dùng tên miền riêng)\\n\u0026#39; ) } } } ) logger.info(\u0026#34;Gửi email thành công tới: %s\u0026#34;, email) except Exception as e: email_error = str(e) logger.error(\u0026#34;Lỗi khi gửi email tới %s: %s\u0026#34;, email, email_error) # Trả kết quả if email_error: return _response(200, f\u0026#34;Dữ liệu sinh viên đã được lưu nhưng gửi email tới {email} thất bại: {email_error}\u0026#34;) return _response(200, \u0026#34;Dữ liệu sinh viên đã được lưu và email thông báo đã được gửi!\u0026#34;) # Hàm trả về response chuẩn def _response(status_code, message): return { \u0026#39;statusCode\u0026#39;: status_code, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;message\u0026#39;: message}), \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39; } } Giải thích mã:\nLogging: Sử dụng logging để ghi log chi tiết vào CloudWatch (mức INFO và ERROR), hỗ trợ giám sát và gỡ lỗi. Xử lý đầu vào: Kiểm tra event['body'] là chuỗi JSON hoặc dict, xử lý lỗi parse JSON. Kiểm tra dữ liệu: Đảm bảo tất cả các trường studentid, name, class, birthdate, email được cung cấp. Kiểm tra trùng lặp: Sử dụng GetItem để kiểm tra studentid đã tồn tại trong bảng studentData. Lưu dữ liệu: Thao tác PutItem lưu dữ liệu sinh viên vào bảng studentData. Gửi email: Gửi email xác nhận qua SES với nội dung chi tiết, sử dụng baothangvip@gmail.com làm nguồn (phải được xác minh trong SES). Phản hồi: Trả về JSON với mã trạng thái (200, 400, 409, 500) và header CORS để tích hợp với giao diện web. Kiểm tra và thay đổi:\nVùng AWS: Thay region_name='us-east-1' trong dòng ses = boto3.client('ses', region_name='us-east-1') nếu bạn sử dụng vùng khác (ví dụ: us-west-2). Lưu ý rằng dynamodb = boto3.resource('dynamodb') không chỉ định vùng để linh hoạt hơn, nhưng bạn nên thêm region_name='us-east-1' cho đồng bộ: dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;, region_name=\u0026#39;us-east-1\u0026#39;) Email nguồn: Thay baothangvip@gmail.com bằng email đã xác minh trong SES (mục 2.5). Nếu chưa xác minh, hàm sẽ báo lỗi \u0026ldquo;Email address is not verified\u0026rdquo;. Nhấn Deploy để lưu và triển khai mã.\nHình 7: Giao diện chỉnh sửa mã nguồn insertStudentData.\nSau khi triển khai, giao diện sẽ hiển thị thông báo: \u0026ldquo;Successfully updated the function insertStudentData.\u0026rdquo;\nHình 8: Thông báo triển khai thành công.\nCấu Hình Timeout và Bộ Nhớ\nTrong tab Configuration \u0026gt; General configuration, nhấn Edit. Đặt Timeout: 30 giây (đủ cho thao tác PutItem, GetItem, và gửi email qua SES). Đặt Memory: 128 MB (mặc định, đủ cho hàm này vì các thao tác đơn giản). Nhấn Save để lưu thay đổi. Kiểm Tra Hàm\nTrong tab Test, nhấn Create new test event. Đặt tên sự kiện (ví dụ: testInsertStudentData). Sử dụng JSON mẫu: { \u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;studentid\\\u0026#34;: \\\u0026#34;SV001\\\u0026#34;, \\\u0026#34;name\\\u0026#34;: \\\u0026#34;Nguyen Van A\\\u0026#34;, \\\u0026#34;class\\\u0026#34;: \\\u0026#34;CNTT01\\\u0026#34;, \\\u0026#34;birthdate\\\u0026#34;: \\\u0026#34;2000-01-01\\\u0026#34;, \\\u0026#34;email\\\u0026#34;: \\\u0026#34;baothangvip@gmail.com\\\u0026#34;}\u0026#34; } Nhấn Create để lưu sự kiện kiểm tra, sau đó nhấn Test để chạy hàm. Kiểm tra kết quả: Nếu thành công, hàm trả về: { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;message\\\u0026#34;: \\\u0026#34;Dữ liệu sinh viên đã được lưu và email thông báo đã được gửi!\\\u0026#34;}\u0026#34;, \u0026#34;headers\u0026#34;: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34; } } Kiểm tra bảng studentData trong DynamoDB Console để xác minh dữ liệu đã được lưu (vào DynamoDB \u0026gt; Tables \u0026gt; studentData \u0026gt; Explore items). Kiểm tra hộp thư của email nhận (baothangvip@gmail.com, bao gồm Spam/Junk) để xem email xác nhận. Nếu gặp lỗi, kiểm tra log trong CloudWatch (vào Monitor \u0026gt; Logs \u0026gt; chọn log group /aws/lambda/insertStudentData). Các lỗi phổ biến: \u0026ldquo;AccessDenied\u0026rdquo; (DynamoDB): Vai trò LambdaInsertStudentRole thiếu quyền PutItem. Thay AmazonDynamoDBReadOnlyAccess bằng chính sách tùy chỉnh hoặc AmazonDynamoDBFullAccess. \u0026ldquo;Email address is not verified\u0026rdquo; (SES): Đảm bảo email baothangvip@gmail.com đã được xác minh trong SES (mục 2.5). Nếu SES ở chế độ sandbox, email nhận cũng phải được xác minh. \u0026ldquo;ResourceNotFoundException\u0026rdquo;: Đảm bảo bảng studentData đã được tạo (mục 2.4). \u0026ldquo;Invalid JSON\u0026rdquo;: Kiểm tra JSON trong sự kiện kiểm tra có đúng định dạng không. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Sửa lỗi vai trò IAM Yêu cầu ban đầu sử dụng LambdaGetStudentRole, nhưng vai trò này không phù hợp vì thiếu quyền dynamodb:PutItem và ses:SendEmail. Sử dụng LambdaInsertStudentRole (tạo ở mục 2.2) là đúng. Nếu bạn cố ý muốn dùng LambdaGetStudentRole, cần thêm các chính sách AmazonDynamoDBFullAccess và AmazonSESFullAccess vào vai trò này trong IAM Console: - Vào IAM \u0026gt; Roles \u0026gt; LambdaGetStudentRole \u0026gt; Add permissions \u0026gt; Attach policies. - Tìm và chọn AmazonDynamoDBFullAccess và AmazonSESFullAccess. Tuy nhiên, để tránh nhầm lẫn, nên sử dụng LambdaInsertStudentRole như hướng dẫn. DynamoDB quyền Chính sách AmazonDynamoDBReadOnlyAccess trong LambdaInsertStudentRole không hỗ trợ PutItem. Cần thay bằng AmazonDynamoDBFullAccess hoặc chính sách tùy chỉnh như sau: - Vào IAM \u0026gt; Policies \u0026gt; Create Policy. - Chọn JSON, dán chính sách tùy chỉnh (thay your-account-id bằng ID tài khoản AWS). - Đặt tên (ví dụ: DynamoDBPutItemStudentData) và gắn vào LambdaInsertStudentRole. SES Sandbox Đảm bảo email nguồn (baothangvip@gmail.com) đã được xác minh trong SES (mục 2.5). Nếu SES ở chế độ sandbox, email nhận (body['email']) cũng phải được xác minh. Thoát sandbox để gửi email đến địa chỉ bất kỳ. Bảng DynamoDB Bảng studentData phải tồn tại với studentid (Partition Key, String), name, class, birthdate, email. Hoàn thành mục 2.4 trước. CORS Header Access-Control-Allow-Origin: '*' cần cho giao diện web (CloudFront) gọi qua API Gateway. Cấu hình CORS trong API Gateway sau. Vùng AWS Đảm bảo region_name='us-east-1' trong mã khớp với vùng của bảng studentData và SES. Cập nhật nếu dùng vùng khác (ví dụ: us-west-2). Xử lý lỗi Kiểm tra log trong CloudWatch (/aws/lambda/insertStudentData) nếu lỗi. Dùng CloudTrail hoặc IAM Access Advisor để xác định vấn đề quyền. Tối ưu hóa Thao tác PutItem và GetItem hiệu quả hơn Scan. Thêm dữ liệu mẫu vào studentData để thử nghiệm. Kiểm tra sớm Chạy kiểm tra để xác minh dữ liệu lưu đúng và email được gửi trước khi tích hợp với API Gateway. Mẹo thực tiễn: Thêm dữ liệu mẫu vào bảng studentData, kiểm tra log CloudWatch, và xác minh email nhận để gỡ lỗi trước khi tích hợp.\nKết Luận Hàm Lambda insertStudentData đã được tạo để nhận và lưu dữ liệu sinh viên vào bảng studentData, đồng thời gửi email xác nhận qua SES. Hàm sẵn sàng tích hợp với API Gateway.\nBước tiếp theo: Chuyển đến Tạo hàm BackupDynamoDBAndSendEmail để tiếp tục!\n"
},
{
	"uri": "/vi/7-deploying-cloudfront/7.2-configuring-default-root-object/",
	"title": "Configure Default Root Object",
	"tags": [],
	"description": "",
	"content": " Objective: Configure index.html as the Default Root Object for the CloudFront Distribution StudentWebsiteDistribution (section 7.1) so that CloudFront automatically serves the index.html file from the S3 Bucket student-management-website-2025 when users access the CloudFront domain (e.g., https://d12345678.cloudfront.net). This ensures the static web interface (form, student table, functional buttons) displays correctly and integrates with the student API (stage prod, section 4.8) to perform functions like saving, viewing, and backing up data.\nOverview of Default Root Object Role of Default Root Object: Specifies the default file (index.html) that CloudFront returns when users access the root URL of the distribution (e.g., https://d12345678.cloudfront.net). Similar to the Index document in S3 Static Website Hosting (section 6.3), but applied at the CloudFront layer. Ensures the main interface displays without the need for a specific path (e.g., /index.html). Integration with the system: CloudFront distributes static files (index.html, styles.css, scripts.js, section 6.2) from the S3 Bucket student-management-website-2025 (sections 6.1–6.4) via Origin Access Identity (OAI) (section 7.1) to restrict access. The web interface calls the student API (section 4.8) with the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey (section 4.2). The functions include: POST /students: Save records to DynamoDB studentData and send a confirmation email via SES. GET /students: Display data in the table. POST /backup: Create a file in the S3 Bucket student-backup-20250706 (section 6.5) and send notification emails via SES. CORS is configured (section 4.7) to support requests from the CloudFront domain (e.g., https://d12345678.cloudfront.net). Initial Requirements You need to complete section 7.1 (create the CloudFront Distribution StudentWebsiteDistribution), section 6.1 (create the student-management-website-2025 bucket), section 6.2 (upload index.html, styles.css, scripts.js), section 6.3 (enable Static Website Hosting), section 6.4 (configure Bucket Policy), section 6.5 (configure the student-backup-20250706 bucket), section 5 (build the web interface), section 4.1 (create the student API), section 4.2 (create the StudentApiKey), section 4.3 (create the StudentUsagePlan), section 4.4 (create the GET /students method), section 4.5 (create the POST /students method), section 4.6 (create the /backup resource and POST /backup method), section 4.7 (enable CORS), section 4.8 (deploy the API to the prod stage), section 4.9 (link the StudentApiKey to StudentUsagePlan). Ensure your AWS account has cloudfront:UpdateDistribution, s3:GetObject, and the AWS region is us-east-1 for related services.\nDetailed Actions Access the AWS Management Console\nLog in to the AWS Management Console with your AWS account. In the search bar, type CloudFront and select the Amazon CloudFront service. Check the AWS region: CloudFront is a global service, but ensure the S3 Bucket student-management-website-2025, student API, Lambda, DynamoDB, and SES are in us-east-1.\nFigure 1: AWS Console Interface with the CloudFront search bar. Select the CloudFront Distribution\nIn CloudFront \u0026gt; Distributions, find and select the distribution named StudentWebsiteDistribution (created in section 7.1). Identification: The distribution ID starts with E... and the Domain name is of the format d12345678.cloudfront.net. Click the ID or distribution name to enter the distribution details interface. Check the status: Ensure the distribution is in the Enabled state. If it is still In Progress, wait 5–15 minutes for the deployment to complete.\nFigure 2: Select CloudFront Distribution. Edit Default Root Object\nIn the details interface of StudentWebsiteDistribution, select the General tab. Find the Settings section and click the Edit button next to Default root object (usually shows the current value if set).\nFigure 3: Find and Click Edit in the Settings Section. In the Default root object field, enter index.html. Reason: index.html is the main file containing the web interface (input form, student table, save/view/backup functional buttons) uploaded to the S3 Bucket student-management-website-2025 (section 6.2). When users access the CloudFront domain, CloudFront will request index.html from S3 through OAI (section 7.1). Review before saving: Ensure index.html has been uploaded to the root directory of the S3 Bucket student-management-website-2025 (section 6.2). Verify Static Website Hosting is enabled with index.html as the Index document (section 6.3). Check the Bucket Policy (section 7.1) allows OAI access: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowCloudFrontOAI\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EXXXXXX\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-management-website-2025/*\u0026#34; } ] } Save Changes\nClick Save changes to apply the configuration.\nFigure 4: Click Save Changes to Save Configuration. Expected result: CloudFront will start updating the configuration (takes 5–10 minutes). Once completed, the distribution status will return to Enabled, and AWS will display the message \u0026ldquo;Successfully updated distribution settings\u0026rdquo;.\nFigure 5: Update Success Message. Error Handling: \u0026ldquo;AccessDenied\u0026rdquo;: Check if the IAM role has cloudfront:UpdateDistribution permissions: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;cloudfront:UpdateDistribution\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:cloudfront::\u0026lt;AWS_ACCOUNT_ID\u0026gt;:distribution/\u0026lt;DISTRIBUTION_ID\u0026gt;\u0026#34; } ] } Replace \u0026lt;AWS_ACCOUNT_ID\u0026gt; and \u0026lt;DISTRIBUTION_ID\u0026gt; with actual values (found in CloudFront \u0026gt; Distributions). Update not applied: Check the distribution status and wait for it to return to Enabled. Verify that the Default root object field shows index.html in the General tab. Test Default Root Object\nIn CloudFront \u0026gt; Distributions, copy the Distribution domain name (e.g., https://d12345678.cloudfront.net). Open your browser and access this URL. Expected result: The web interface should display with the input form, student table, and functional buttons (Save, View, Backup) using Tailwind CSS and Poppins font. The styles.css and scripts.js files should load correctly over HTTPS, and the interface should display as expected. API requests (GET /students, POST /students, POST /backup) should work if CORS is correctly configured (section 4.7).\nFigure 6: Web Interface via CloudFront. Error Handling: 403 Forbidden: Check the Bucket Policy for the correct OAI ARN (arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EXXXXXX). Verify index.html, styles.css, scripts.js are uploaded to S3 (section 6.2). Ensure the old public policy (Principal: \u0026quot;*\u0026quot;) has been removed (section 6.4). 404 Not Found: Check that Default root object is set to index.html in CloudFront \u0026gt; Distributions \u0026gt; General. Verify that Static Website Hosting is enabled with index.html as the Index document (section 6.3). Incorrect Interface: Open Developer Tools \u0026gt; Console to check for errors loading styles.css or scripts.js. Check the paths in index.html (e.g., \u0026lt;link href=\u0026quot;styles.css\u0026quot;\u0026gt;, \u0026lt;script src=\u0026quot;scripts.js\u0026quot;\u0026gt;). CORS: Check the CORS configuration in API Gateway (section 4.7) with Access-Control-Allow-Origin: https://d12345678.cloudfront.net. API Errors: Check StudentApiKey, StudentUsagePlan (section 4.9), and CloudWatch logs for Lambda. Important Notes Factor Details Security Ensure the Bucket Policy allows only OAI access to S3 (section 7.1). Avoid embedding StudentApiKey in scripts.js. Use CloudFront Functions to add the x-api-key header: javascript \u0026lt;br\u0026gt; function handler(event) { \u0026lt;br\u0026gt; var request = event.request; \u0026lt;br\u0026gt; request.headers['x-api-key'] = { value: 'xxxxxxxxxxxxxxxxxxxx' }; \u0026lt;br\u0026gt; return request; \u0026lt;br\u0026gt; } \u0026lt;br\u0026gt; Optimization Enable CloudFront Standard Logs to track access: In CloudFront \u0026gt; Distribution \u0026gt; General \u0026gt; Logging, select On, and specify a log bucket (e.g., student-web-logs-20250706). Use AWS CLI to check the configuration: bash \u0026lt;br\u0026gt; aws cloudfront get-distribution --id \u0026lt;DISTRIBUTION_ID\u0026gt; \u0026lt;br\u0026gt; System Integration Update CORS in API Gateway (section 4.7) with Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Ensure POST /students, GET /students, POST /backup work with Invoke URL and StudentApiKey. Integration Testing Access the CloudFront URL (https://d12345678.cloudfront.net) and check: - POST /students: Save records, send SES email. - GET /students: Display table. - POST /backup: Create file in student-backup-20250706, send email. Use Developer Tools \u0026gt; Network to check API requests. Error Handling 403 Forbidden: Check OAI ARN, Bucket Policy, s3:GetObject permission. 404 Not Found: Verify index.html is the Default root object, file exists in S3. Incorrect Interface: Check Developer Tools \u0026gt; Console, paths in index.html. CORS: Check Access-Control-Allow-Origin header in Lambda (section 3) and API Gateway (section 4.7). 429: Check rate/burst/quota limits in StudentUsagePlan (section 4.3). Best Practice Tip: Test the CloudFront URL immediately after setting the Default root object. Create invalidation (section 7.3) if updating files in S3. Use AWS CLI to check the configuration: aws cloudfront get-distribution --id \u0026lt;DISTRIBUTION_ID\u0026gt;.\nConclusion The Default Root Object has been configured as index.html for the CloudFront Distribution StudentWebsiteDistribution, ensuring the web interface displays correctly when accessing the CloudFront domain. The system is now ready to integrate with the student API.\nNext step: Proceed to Create Invalidation to Refresh Cache to continue!\n"
},
{
	"uri": "/vi/6-configuring-s3-buckets/6.2-uploading-static-assets-to-s3/",
	"title": "Tải Tài Nguyên Giao Diện Lên S3 (HTML/CSS/JS)",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tải các tệp giao diện web tĩnh (index.html, styles.css, scripts.js từ mục 5) lên S3 Bucket student-management-website-2025 (tạo ở mục 6.1) để chuẩn bị cho việc bật Static Website Hosting (mục 6.3) và phục vụ qua CloudFront (mục 7). Các tệp này tạo nên giao diện của ứng dụng Quản Lý Dữ Liệu Sinh Viên, cho phép người dùng nhập, xem, và sao lưu dữ liệu sinh viên thông qua các endpoint API GET /students, POST /students, và POST /backup (mục 4.8) với bảo mật API Key (StudentApiKey, mục 4.2) và CORS (mục 4.7).\nTổng Quan về Tài Nguyên Giao Diện Các tệp cần tải lên: index.html: Cấu trúc giao diện với biểu mẫu nhập liệu, bảng hiển thị sinh viên, và các nút chức năng (Lưu, Xem, Backup). styles.css: Tùy chỉnh giao diện với Tailwind CSS, font Poppins, gradient màu sắc, và hiệu ứng động. scripts.js: Logic gọi API sử dụng jQuery, xử lý yêu cầu tới Invoke URL (VD: https://abc123.execute-api.us-east-1.amazonaws.com/prod) với header x-api-key: \u0026lt;StudentApiKey\u0026gt;. Vai trò của bucket student-management-website-2025: Lưu trữ các tệp tĩnh để phục vụ giao diện web qua Static Website Hosting. Được cấu hình quyền công khai (s3:GetObject) trong Bucket Policy (mục 6.4) để CloudFront truy xuất nội dung. Tích hợp với CloudFront để cung cấp HTTPS, tăng tốc độ tải, và bảo mật tốt hơn. Tích hợp với hệ thống: Giao diện web gọi API student (stage prod, mục 4.8) để thực hiện các chức năng: POST /students: Lưu bản ghi vào DynamoDB studentData và gửi email xác nhận qua SES. GET /students: Hiển thị dữ liệu trong bảng. POST /backup: Tạo tệp backup trong S3 Bucket student-backup-20250706 (mục 2.4, 6.5) và gửi email thông báo qua SES. CORS được cấu hình (mục 4.7) để hỗ trợ yêu cầu từ domain CloudFront (VD: https://d12345678.cloudfront.net). Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 6.1 (tạo bucket student-management-website-2025), mục 5 (xây dựng giao diện web với index.html, styles.css, scripts.js), mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), mục 4.6 (tạo resource /backup và phương thức POST /backup), mục 4.7 (kích hoạt CORS), mục 4.8 (triển khai API lên stage prod), mục 4.9 (gắn StudentApiKey vào StudentUsagePlan và liên kết với API student stage prod), mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS có quyền truy cập S3 (s3:PutObject) và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn. Trong thanh tìm kiếm ở đầu trang, nhập S3 và chọn dịch vụ Amazon S3 để vào giao diện quản lý bucket. Kiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng us-east-1 (US East (N. Virginia)) để đồng bộ với bucket student-management-website-2025, API student, các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), bảng DynamoDB studentData, bucket student-backup-20250706, và SES. Vùng được hiển thị ở góc trên bên phải AWS Console.\nHình 1: Giao diện AWS Console với thanh tìm kiếm S3. Chọn Bucket student-management-website-2025\nTrong giao diện chính của Amazon S3 \u0026gt; Buckets, tìm và chọn bucket student-management-website-2025 (tạo ở mục 6.1). Nếu không thấy bucket: Kiểm tra vùng AWS (us-east-1) và làm mới trang. Xác minh bucket đã được tạo thành công với tên chính xác (tên bucket là duy nhất toàn cầu, có thể bạn đã dùng tên khác như student-management-website-20250706-abc123). Nhấn vào tên bucket để vào giao diện quản lý Objects của student-management-website-2025.\nHình 2: Chọn bucket student-management-website-2025. Mở Giao Diện Upload\nTrong giao diện Objects của bucket student-management-website-2025, nhấn nút Upload (thường nằm ở góc trên bên phải). Giao diện Upload sẽ mở ra, cho phép bạn chọn hoặc kéo thả các tệp để tải lên.\nHình 3: Nút Upload trong giao diện bucket. Chuẩn Bị và Kéo Thả Tệp để Tải Lên\nChuẩn bị tệp: Đảm bảo bạn có các tệp từ mục 5: index.html: Giao diện với biểu mẫu, bảng, và nút chức năng, sử dụng Tailwind CSS và jQuery. styles.css: Style tùy chỉnh với font Poppins, gradient, và hiệu ứng responsive. scripts.js: Logic gọi API với Invoke URL (VD: https://abc123.execute-api.us-east-1.amazonaws.com/prod) và StudentApiKey (VD: xxxxxxxxxxxxxxxxxxxx). Lưu các tệp trong một thư mục cục bộ (VD: student-web-files/) để dễ quản lý. Kiểm tra nội dung: Mở scripts.js, xác minh API_ENDPOINT và API_KEY đã được thay bằng Invoke URL (mục 4.8) và StudentApiKey (mục 4.2). Nếu chưa thay, cập nhật: const API_ENDPOINT = \u0026#39;https://abc123.execute-api.us-east-1.amazonaws.com/prod\u0026#39;; const API_KEY = \u0026#39;xxxxxxxxxxxxxxxxxxxx\u0026#39;; Lưu ý bảo mật: Không nhúng API_KEY trực tiếp; xem đề xuất trong Lưu ý để sử dụng AWS Secrets Manager hoặc CloudFront Functions. Mở index.html cục bộ trong trình duyệt để đảm bảo giao diện hiển thị đúng trước khi tải lên. Kéo thả tệp: Trong giao diện Upload, kéo thả các tệp index.html, styles.css, scripts.js từ thư mục cục bộ vào khu vực tải lên. Hoặc nhấn Add files và chọn từng tệp từ máy tính. Cấu trúc tệp: Tải các tệp trực tiếp vào thư mục gốc của bucket (không tạo thư mục con như css/, js/) để đảm bảo đường dẫn đơn giản (VD: https://student-management-website-2025.s3-website-us-east-1.amazonaws.com/index.html). Nếu cần thư mục con, tạo trước trong bucket (VD: Create folder \u0026gt; css, js) và tải tệp tương ứng, nhưng phải cập nhật đường dẫn trong index.html: \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/styles.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;/js/scripts.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Tải Tệp Lên Bucket\nSau khi chọn các tệp, kiểm tra danh sách trong giao diện Upload hiển thị index.html, styles.css, scripts.js.\nHình 4: Danh sách tệp trong giao diện Upload. Trong mục Permissions (trong giao diện Upload): Predefined ACLs: Chọn Grant public-read access để đảm bảo CloudFront có thể truy xuất tệp. Lưu ý: Quyền này sẽ được thay thế bằng Bucket Policy (mục 6.4) để quản lý tập trung, nhưng chọn ở đây để đơn giản hóa kiểm tra ban đầu. Trong mục Properties (tùy chọn): Storage class: Chọn Standard (mặc định) để đảm bảo hiệu suất tốt cho giao diện web. Server-side encryption: Đảm bảo Enable với SSE-S3 (đã cấu hình ở mục 6.1). Nhấn Upload để bắt đầu tải tệp.\nHình 5: Nhấn Upload để tải tệp. Kiểm Tra Trạng Thái Tải Lên\nSau khi nhấn Upload, AWS S3 sẽ xử lý và hiển thị thông báo: \u0026ldquo;Upload succeeded\u0026rdquo; khi tất cả tệp được tải lên thành công.\nHình 6: Thông báo Upload succeeded. Để xác minh: Trong S3 \u0026gt; Buckets \u0026gt; student-management-website-2025 \u0026gt; Objects, kiểm tra danh sách hiển thị index.html, styles.css, scripts.js. Nhấn vào từng tệp để xem chi tiết (VD: URL, kích thước, ngày tải lên). Xử lý lỗi: Nếu gặp lỗi \u0026ldquo;AccessDenied\u0026rdquo;: Đảm bảo Block all public access đã bỏ chọn trong mục 6.1. Kiểm tra vai trò IAM của tài khoản AWS có quyền s3:PutObject. Nếu tệp không hiển thị: Làm mới trang hoặc kiểm tra vùng AWS (us-east-1). Xác minh bạn đã chọn đúng bucket student-management-website-2025. Nếu thông báo \u0026ldquo;Upload failed\u0026rdquo;: Kiểm tra kết nối mạng hoặc kích thước tệp (S3 hỗ trợ tối đa 5TB/tệp). Thử tải lại từng tệp riêng lẻ để xác định tệp có vấn đề. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Cấu trúc tệp - Tải các tệp vào thư mục gốc để giữ đường dẫn đơn giản (VD: /index.html, /styles.css, /scripts.js). - Nếu dùng thư mục con (css/, js/), cập nhật đường dẫn trong index.html và kiểm tra khi bật Static Website Hosting (mục 6.3). Bảo mật - Tránh nhúng StudentApiKey trực tiếp trong scripts.js. Sử dụng AWS Secrets Manager hoặc CloudFront Functions để thêm header x-api-key: ```javascript // Ví dụ với CloudFront Functions function handler(event) { var request = event.request; request.headers[\u0026lsquo;x-api-key\u0026rsquo;] = { value: \u0026lsquo;xxxxxxxxxxxxxxxxxxxx\u0026rsquo; }; return request; } - Sau khi tải lên, cấu hình Bucket Policy (mục 6.4) để quản lý quyền s3:GetObject thay vì dựa vào ACL public-read. - Sử dụng CloudFront Origin Access Identity (OAI) (mục 7) để tăng bảo mật, hạn chế truy cập trực tiếp vào S3. Tối ưu hóa - Nén tệp: Nén styles.css và scripts.js (sử dụng UglifyJS hoặc CSSNano) để giảm thời gian tải. - Kiểm tra nội dung: Mở index.html cục bộ trong trình duyệt để đảm bảo giao diện hiển thị đúng trước khi tải lên. - Sử dụng AWS CLI: Tải tệp nhanh hơn với lệnh: bash \u0026lt;br\u0026gt; aws s3 cp student-web-files/ s3://student-management-website-2025/ --recursive \u0026lt;br\u0026gt; - S3 Versioning: Đã bật ở mục 6.1, đảm bảo khôi phục được nếu tải nhầm tệp. Tích hợp với hệ thống - Sau khi tải tệp, bật Static Website Hosting (mục 6.3) để lấy endpoint (VD: http://student-management-website-2025.s3-website-us-east-1.amazonaws.com). - Cấu hình Bucket Policy (mục 6.4) để cho phép CloudFront truy xuất. - Tích hợp với CloudFront (mục 7) để phục vụ giao diện qua HTTPS và tăng tốc độ tải. - Đảm bảo CORS trong API Gateway (mục 4.7) hỗ trợ yêu cầu từ CloudFront domain (VD: https://d12345678.cloudfront.net). Kiểm tra tích hợp - Kiểm tra các tệp trong S3 \u0026gt; Buckets \u0026gt; student-management-website-2025 \u0026gt; Objects. - Sau khi bật Static Website Hosting (mục 6.3), truy cập endpoint S3 (VD: http://student-management-website-2025.s3-website-us-east-1.amazonaws.com) để kiểm tra giao diện. - Kết quả mong đợi: Giao diện hiển thị với biểu mẫu, bảng, và nút chức năng. - Lưu ý: Các yêu cầu API có thể gặp lỗi CORS nếu chưa cấu hình CloudFront; sẽ khắc phục trong mục 7. - Sau khi tích hợp CloudFront, kiểm tra chức năng: - POST /students: Lưu bản ghi vào DynamoDB studentData và gửi email qua SES. - GET /students: Hiển thị dữ liệu trong bảng. - POST /backup: Tạo tệp trong student-backup-20250706 và gửi email thông báo. Xử lý lỗi - 403 Forbidden: Kiểm tra quyền s3:PutObject và Bucket Policy (mục 6.4). - Tệp không hiển thị: Xác minh tệp được tải vào đúng bucket và thư mục gốc. - Giao diện lỗi: Kiểm tra đường dẫn trong index.html (VD: \u0026lt;link href=\u0026quot;styles.css\u0026quot;\u0026gt;, \u0026lt;script src=\u0026quot;scripts.js\u0026quot;\u0026gt;) và log trình duyệt (Developer Tools \u0026gt; Console). Mẹo thực tiễn: Trước khi tải lên, kiểm tra giao diện cục bộ bằng npx serve hoặc server tĩnh để đảm bảo các tệp hoạt động đúng. Sử dụng AWS CLI để tải nhanh hơn nếu có nhiều tệp. Sau khi tải, kiểm tra danh sách tệp trong bucket và chuẩn bị cho mục 6.3 (bật Static Website Hosting).\nKết Luận Các tệp index.html, styles.css, scripts.js đã được tải lên bucket student-management-website-2025, sẵn sàng để bật Static Website Hosting (mục 6.3) và tích hợp với CloudFront (mục 7) để phục vụ giao diện web.\nBước tiếp theo: Chuyển đến Bật tính năng Static Website Hosting để tiếp tục cấu hình!\n"
},
{
	"uri": "/vi/4-creating-a-restful-api/4.2-creating-an-api-key/",
	"title": "Tạo API Key để bảo vệ truy cập",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo một API Key có tên StudentApiKey trong AWS API Gateway để bảo vệ các endpoint của API student (tạo ở mục 4.1), đảm bảo chỉ các yêu cầu từ giao diện web (chạy trên CloudFront) hoặc client được cấp key hợp lệ mới có thể truy cập. API Key sẽ được sử dụng trong header x-api-key khi gọi các endpoint (GET /students, POST /students, POST /backup) và sẽ được liên kết với Usage Plan (mục 4.3) để quản lý giới hạn truy cập.\nTổng Quan về API Key trong API Gateway API Key là một chuỗi ký tự dùng để xác thực các yêu cầu gửi đến API Gateway, ngăn chặn truy cập trái phép. API Key được gửi trong header x-api-key của mỗi yêu cầu HTTP (ví dụ: GET https://api-id.execute-api.us-east-1.amazonaws.com/prod/students). Trong hệ thống này, StudentApiKey sẽ bảo mật các endpoint tích hợp với các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail). API Key sẽ được tích hợp vào giao diện web (sử dụng Tailwind CSS, chạy trên CloudFront) để gọi API một cách an toàn. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 4.1 (tạo API student) và mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập API Gateway và chọn dịch vụ Amazon API Gateway để vào giao diện quản lý.\nKiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng AWS chính (ví dụ: us-east-1), kiểm tra vùng ở góc trên bên phải AWS Console. Vùng này phải khớp với API student (tạo ở mục 4.1) và các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail).\nHình 1: Giao diện AWS Console với thanh tìm kiếm API Gateway.\nĐiều Hướng Đến Mục API Keys\nTrong giao diện chính của Amazon API Gateway, nhìn vào menu điều hướng bên trái.\nChọn API Keys để xem danh sách các API Key hiện có. Nếu bạn chưa tạo key nào, danh sách sẽ trống.\nGiao diện sẽ hiển thị các tùy chọn để tạo hoặc quản lý API Key.\nHình 2: Menu điều hướng với tùy chọn API Keys.\nKhởi Tạo Quá Trình Tạo API Key\nTrong giao diện API Keys, nhấn nút Create API Key (Tạo API Key) ở góc trên bên phải để bắt đầu cấu hình key mới.\nHình 3: Nút Create API Key trong giao diện API Keys.\nCấu Hình API Key\nTrong mục Create API Key:\nName: Nhập chính xác StudentApiKey. Tên này giúp bạn dễ dàng nhận diện key khi liên kết với Usage Plan. Description: Nhập API Key để bảo vệ truy cập vào StudentManagementAPI (hoặc mô tả tương tự để rõ ràng mục đích). API Key: Chọn Auto Generate để AWS tạo một chuỗi ngẫu nhiên, đảm bảo tính bảo mật. Lưu ý: Bạn có thể nhập key tùy chỉnh, nhưng Auto Generate được khuyến nghị để tránh key dễ đoán. Enabled: Đảm bảo tùy chọn này được chọn để key có thể sử dụng ngay sau khi tạo. Nhấn Save để tạo API Key.\nHình 4: Giao diện cấu hình API Key.\nKiểm Tra Trạng Thái và Sao Chép API Key\nSau khi nhấn Save, bạn sẽ thấy thông báo: \u0026ldquo;Successfully created API Key ‘StudentApiKey’.\u0026rdquo;\nTrong danh sách API Keys, chọn StudentApiKey để xem chi tiết.\nNhấn Show bên cạnh API Key để hiển thị giá trị key (ví dụ: xxxxxxxxxxxxxxxxxxxx).\nSao chép API Key:\nSao chép giá trị key và lưu ở nơi an toàn (ví dụ: tệp bảo mật cục bộ, AWS Secrets Manager, hoặc trình quản lý mật khẩu). Lưu ý quan trọng: API Key chỉ hiển thị một lần ngay sau khi tạo. Nếu mất, bạn phải tạo key mới và cập nhật trong Usage Plan (mục 4.3) và giao diện web. API Key này sẽ được sử dụng trong giao diện web để gọi các endpoint (GET /students, POST /students, POST /backup) bằng cách thêm vào header x-api-key.\nHình 5: Thông báo thành công và chi tiết API Key.\nLưu Ý Quan Trọng Yếu Tố Chi Tiết Bảo mật API Key Không nhúng API Key trực tiếp trong mã JavaScript của giao diện web (chạy trên CloudFront). Thay vào đó, sử dụng biến môi trường hoặc AWS Secrets Manager để lưu trữ và truy xuất key an toàn. - Vào AWS Secrets Manager \u0026gt; Store a new secret \u0026gt; Chọn Other type of secret \u0026gt; Nhập API Key. - Đặt tên bí mật (ví dụ: student-api-key) và truy xuất trong mã giao diện web thông qua AWS SDK. Vùng AWS API Key hoạt động trên toàn bộ tài khoản AWS, không bị giới hạn bởi vùng. Tuy nhiên, đảm bảo API student và các hàm Lambda đều ở cùng vùng (us-east-1) để tránh lỗi tích hợp. Xử lý lỗi Nếu không thấy thông báo thành công hoặc gặp lỗi \u0026ldquo;AccessDenied\u0026rdquo;: - Kiểm tra quyền IAM của tài khoản AWS có bao gồm apigateway:POST để tạo API Key. - Đảm bảo bạn đang ở đúng vùng AWS (us-east-1). Nếu API Key không hiển thị, làm mới trang hoặc kiểm tra lại danh sách API Keys. Tối ưu hóa - Sau khi tạo, liên kết API Key với Usage Plan (mục 4.3) để áp dụng giới hạn truy cập (rate limiting, quota). - Cân nhắc sử dụng AWS WAF với API Gateway để bảo vệ thêm khỏi các cuộc tấn công (ví dụ: DDoS). - Nếu cần nhiều API Key (cho các client khác nhau), tạo thêm key và quản lý trong cùng Usage Plan. Kiểm tra sớm - Sau khi tạo API Key, xác minh key xuất hiện trong danh sách API Keys và giá trị key được sao chép an toàn. - Kiểm tra key bằng cách gọi thử API (sau khi cấu hình method và deploy ở các mục 4.4–4.8) sử dụng Postman hoặc curl: curl -X GET https://api-id.execute-api.us-east-1.amazonaws.com/prod/students -H \u0026quot;x-api-key: xxxxxxxxxxxxxxxxxxxx\u0026quot; Kiểm tra tích hợp với giao diện web - Sau khi tạo API Key, nhúng key này vào giao diện web (sử dụng Tailwind CSS, chạy trên CloudFront) để gọi các endpoint. - Đảm bảo API Key được gửi trong header x-api-key khi gọi các endpoint (GET /students, POST /students, POST /backup). Mẹo thực tiễn: Lưu API Key an toàn ngay sau khi tạo và kiểm tra tích hợp với một yêu cầu thử (sử dụng Postman hoặc curl) trước khi nhúng vào giao diện web.\nKết Luận API Key StudentApiKey đã được tạo thành công trong AWS API Gateway, sẵn sàng để liên kết với Usage Plan và bảo vệ các endpoint của API student.\nBước tiếp theo: Chuyển đến Thiết lập Usage Plan (Kế hoạch sử dụng) để tiếp tục!\n"
},
{
	"uri": "/vi/8-setting-up-system-backup/8.2-creating-eventbridge-rule-for-backup/",
	"title": "Tạo EventBridge Rule để Tự Động Hóa Backup",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo Amazon EventBridge Rule DailyDynamoDBBackup để kích hoạt Lambda function BackupDynamoDBAndSendEmail (tạo ở mục 3.3, cấu hình ở mục 8.1) theo lịch trình định kỳ, tự động backup dữ liệu từ bảng DynamoDB studentData vào S3 Bucket student-backup-20250706 (mục 6.5) và gửi email thông báo qua Amazon SES. Lịch trình chạy hàng ngày lúc 07:00 AM +07 (00:00 UTC) với cửa sổ thời gian linh hoạt 5 phút, đảm bảo tích hợp với hệ thống serverless và giao diện web qua CloudFront.\nTổng Quan về EventBridge Rule Vai trò của EventBridge Rule: Amazon EventBridge lập lịch kích hoạt Lambda function BackupDynamoDBAndSendEmail định kỳ (hàng ngày lúc 07:00 AM +07, tức 00:00 UTC). Đảm bảo backup tự động, lưu tệp JSON vào S3 student-backup-20250706, và gửi email thông báo qua SES, giảm can thiệp thủ công. Sử dụng biểu thức Cron 0 0 * * ? * và Flexible Time Window 5 phút để tối ưu hóa hiệu suất. Tích hợp với hệ thống: Giao diện web (CloudFront StudentWebsiteDistribution, mục 7.1–7.3) từ S3 student-management-website-2025 (mục 6.1–6.4) gọi API student (stage prod, mục 4.8) với Invoke URL (VD: https://abc123.execute-api.us-east-1.amazonaws.com/prod) và StudentApiKey (mục 4.2). Các chức năng: POST /students: Lưu bản ghi vào DynamoDB studentData và gửi email qua SES. GET /students: Hiển thị dữ liệu trong bảng. POST /backup: Tạo tệp JSON trong student-backup-20250706 và gửi email thông báo. CORS cấu hình (mục 4.7) hỗ trợ yêu cầu từ domain CloudFront (VD: https://d12345678.cloudfront.net). Vai trò IAM DynamoDBBackupRoleStudent (mục 6.5) cấp quyền cho Lambda truy cập DynamoDB, S3, SES. EventBridge sử dụng vai trò Amazon_EventBridge_Scheduler_LAMBDA_7e5e967abf để kích hoạt Lambda. Yêu Cầu Ban Đầu Bạn cần hoàn thành:\nMục 2.4: Tạo S3 Bucket student-backup-20250706. Mục 3.3: Tạo Lambda function BackupDynamoDBAndSendEmail với vai trò DynamoDBBackupRoleStudent. Mục 4.1–4.9: Tạo API student, StudentApiKey, StudentUsagePlan, các phương thức GET /students, POST /students, POST /backup, kích hoạt CORS, triển khai stage prod. Mục 5: Xây dựng giao diện web (index.html, styles.css, scripts.js). Mục 6.1–6.5: Tạo và cấu hình S3 Bucket student-management-website-2025 và student-backup-20250706. Mục 7.1–7.3: Tạo CloudFront StudentWebsiteDistribution. Mục 8.1: Cấu hình Lambda BackupDynamoDBAndSendEmail với Memory 128 MB, Ephemeral Storage 512 MB, vai trò DynamoDBBackupRoleStudent, và biến môi trường S3_BUCKET_NAME, SENDER_EMAIL, RECIPIENT_EMAIL.\nĐảm bảo tài khoản AWS có quyền events:PutRule, events:PutTargets, iam:CreateRole, iam:PassRole, và vùng AWS là us-east-1. Hành Động Chi Tiết Truy Cập AWS Management Console và Amazon EventBridge\nĐăng nhập AWS Management Console. Tìm EventBridge, chọn Amazon EventBridge. Xác minh vùng AWS: us-east-1 để đồng bộ với DynamoDB studentData, S3 (student-management-website-2025, student-backup-20250706), Lambda, API Gateway, SES, CloudFront.\nHình 1: Giao diện AWS Console với thanh tìm kiếm EventBridge. Chọn Rules\nTrong EventBridge, chọn Rules từ menu bên trái. Nhấn Create rule.\nHình 2: Nút Create rule trong giao diện EventBridge. Cấu Hình Rule\nTrong Create rule: Name: DailyDynamoDBBackup (phản ánh mục đích backup hàng ngày). Description: Backup DynamoDB and send email daily at 7:00 AM +07. Event bus: Chọn default. Rule type: Chọn Schedule. Nhấn Continue in EventBridge Scheduler.\nHình 3: Cấu hình tên và mô tả rule. Thiết Lập Lịch Trình\nTrong Schedule pattern: Occurrence: Chọn Recurring schedule. Schedule type: Chọn Cron-based schedule. Cron expression: Nhập 0 0 * * ? * (chạy 00:00 UTC, tức 07:00 AM +07, mỗi ngày). Giải thích: 0 0 * * ? * = phút 0, giờ 0, mọi ngày/tháng, bất kỳ ngày tuần, mọi năm. Tùy chọn: Hàng tuần vào Chủ nhật 07:00 AM +07, dùng 0 0 * * SUN. Kiểm tra múi giờ hệ thống để tránh nhầm lẫn. Nhấn Next.\nHình 4: Cấu hình lịch trình Cron. Cấu Hình Flexible Time Window\nTrong Flexible time window: Chọn Enable flexible time window. Maximum time window: 5 minutes (AWS tối ưu hóa thời gian chạy trong 00:00–00:05 UTC). Lý do: Phù hợp cho backup nhỏ như studentData, không ảnh hưởng tính đúng giờ. Nhấn Next.\nHình 5: Cấu hình Flexible Time Window. Chọn Target API\nTrong Target(s): Target type: Chọn AWS service. Select a target: Chọn Lambda function. Lý do: BackupDynamoDBAndSendEmail là đích thực thi backup. Nhấn Next.\nHình 6: Chọn Target API. Chọn Lambda Function\nTrong Function, chọn BackupDynamoDBAndSendEmail. Xử lý lỗi: Nếu hàm không xuất hiện, kiểm tra hàm tồn tại trong us-east-1 và quyền lambda:ListFunctions.\nHình 7: Chọn Lambda function. Cấu Hình Execution Role\nTrong Permissions: Chọn Create new role for this schedule. Role name: Amazon_EventBridge_Scheduler_LAMBDA_7e5e967abf. Lý do: Vai trò cho phép EventBridge kích hoạt Lambda. Xác minh quyền: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;lambda:InvokeFunction\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:\u0026lt;AWS_ACCOUNT_ID\u0026gt;:function:BackupDynamoDBAndSendEmail\u0026#34;, \u0026#34;Principal\u0026#34;: {\u0026#34;Service\u0026#34;: \u0026#34;scheduler.amazonaws.com\u0026#34;} } ] } Thay \u0026lt;AWS_ACCOUNT_ID\u0026gt; bằng ID tài khoản AWS. Nhấn Next.\nHình 8: Cấu hình Execution Role. Xem Lại và Tạo Schedule\nXem lại cấu hình: Name: DailyDynamoDBBackup. Description: Backup DynamoDB and send email daily at 7:00 AM +07. Schedule: cron(0 0 * * ? *). Flexible time window: 5 minutes. Target: BackupDynamoDBAndSendEmail. Nhấn Create Schedule. Kết quả: Thông báo \u0026ldquo;Your schedule DailyDynamoDBBackup is being created\u0026rdquo;.\nHình 9: Xem lại và tạo Schedule. Kiểm Tra Rule\nTrong EventBridge \u0026gt; Rules, xác minh DailyDynamoDBBackup với: Status: Enabled. Schedule: cron(0 0 * * ? *). Target: BackupDynamoDBAndSendEmail. Test hoạt động: Tạm chỉnh lịch chạy mỗi 5 phút: Trong EventBridge \u0026gt; Rules, chọn DailyDynamoDBBackup \u0026gt; Edit \u0026gt; Schedule pattern, nhập */5 * * * ? *, nhấn Update rule. Sau 5 phút (hoặc 00:00 UTC ngày tiếp theo): S3: Kiểm tra student-backup-20250706 cho tệp JSON (VD: students-backup-20250708T0700.json). SES: Xác minh email tại admin@studentapp.com với subject Backup Completed: students-backup-20250708T0700.json và body Backup saved to s3://student-backup-20250706/students-backup-20250708T0700.json. CloudWatch Logs: Trong CloudWatch \u0026gt; Log groups \u0026gt; /aws/lambda/BackupDynamoDBAndSendEmail, kiểm tra log: fields @timestamp, @message\r| filter @message like /Backup completed/\r| sort @timestamp desc Xử lý lỗi: Rule không kích hoạt: Kiểm tra trạng thái rule là Enabled. Xác minh vai trò Amazon_EventBridge_Scheduler_LAMBDA_7e5e967abf có quyền lambda:InvokeFunction. Lambda lỗi: Kiểm tra log trong CloudWatch \u0026gt; Log groups \u0026gt; /aws/lambda/BackupDynamoDBAndSendEmail. Đảm bảo DynamoDBBackupRoleStudent có quyền dynamodb:Scan, s3:PutObject, ses:SendEmail (mục 8.1). Tệp không xuất hiện trong S3: Xác minh bucket student-backup-20250706 và Bucket Policy (mục 6.5): { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowLambdaPutObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: {\u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::\u0026lt;AWS_ACCOUNT_ID\u0026gt;:role/DynamoDBBackupRoleStudent\u0026#34;}, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-backup-20250706/*\u0026#34; } ] } Thay \u0026lt;AWS_ACCOUNT_ID\u0026gt; bằng ID tài khoản AWS. Email không gửi: Xác minh email no-reply@studentapp.com, admin@studentapp.com trong SES (mục 3). Kiểm tra quyền ses:SendEmail trong DynamoDBBackupRoleStudent. Sau khi test, khôi phục lịch trình về 0 0 * * ? *.\nHình 10: Thông báo trạng thái tạo rule. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Bảo mật - Đảm bảo vai trò Amazon_EventBridge_Scheduler_LAMBDA_7e5e967abf chỉ cấp quyền lambda:InvokeFunction cho BackupDynamoDBAndSendEmail. - Không nhúng StudentApiKey trong scripts.js. Sử dụng CloudFront Functions: javascript \u0026lt;br\u0026gt; function handler(event) { \u0026lt;br\u0026gt; var request = event.request; \u0026lt;br\u0026gt; request.headers['x-api-key'] = { value: 'xxxxxxxxxxxxxxxxxxxx' }; \u0026lt;br\u0026gt; return request; \u0026lt;br\u0026gt; } \u0026lt;br\u0026gt; Tối ưu hóa - Bật CloudWatch Logs cho Lambda (mục 8.1). - Kiểm tra rule bằng AWS CLI: bash \u0026lt;br\u0026gt; aws events describe-rule --name DailyDynamoDBBackup \u0026lt;br\u0026gt; Tích hợp - Xác minh CORS trong API Gateway (mục 4.7): Access-Control-Allow-Origin: https://d12345678.cloudfront.net. - Test endpoint POST /backup qua CloudFront URL để đảm bảo tích hợp với giao diện web. Kiểm tra tích hợp - Truy cập CloudFront URL (https://d12345678.cloudfront.net): - POST /students: Lưu bản ghi, gửi email SES. - GET /students: Hiển thị bảng. - POST /backup: Tạo tệp trong student-backup-20250706, gửi email. - Dùng Developer Tools \u0026gt; Network để kiểm tra yêu cầu API. Xử lý lỗi - Rule không chạy: Kiểm tra trạng thái Enabled, quyền events:PutRule, events:PutTargets. - Lambda lỗi: Kiểm tra log CloudWatch, quyền DynamoDBBackupRoleStudent. - Tệp không xuất hiện: Xác minh bucket policy student-backup-20250706. - Email không gửi: Xác minh SES email và quyền ses:SendEmail. Mẹo thực tiễn: Test rule ngay bằng lịch trình */5 * * * ? *, sau đó khôi phục về 0 0 * * ? *. Kiểm tra CloudWatch Logs và S3 để xác minh backup. Cấu hình S3 Lifecycle Rule cho student-backup-20250706 để quản lý tệp cũ.\nKết Luận Rule DailyDynamoDBBackup được tạo để kích hoạt Lambda BackupDynamoDBAndSendEmail hàng ngày lúc 07:00 AM +07, lưu dữ liệu từ DynamoDB studentData vào S3 student-backup-20250706 và gửi email qua SES. Hệ thống tích hợp với API student và giao diện web qua CloudFront.\nBước tiếp theo: Theo dõi backup trong S3 và email SES, tối ưu hóa nếu cần!\n"
},
{
	"uri": "/vi/2-preparation-steps/2.1-create-iam-role-for-lambda-get/",
	"title": "Tạo IAM Role cho Lambda Get",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo vai trò IAM LambdaGetStudentRole cho hàm Lambda getStudentData, cấp quyền để đọc dữ liệu từ bảng DynamoDB studentData, ghi log vào CloudWatch, và hỗ trợ các tương tác tiềm năng với S3 và CloudFront.\nHàm getStudentData thực hiện thao tác Scan để truy xuất toàn bộ dữ liệu sinh viên (Mã sinh viên, Họ tên, Lớp, Ngày sinh, Email) từ bảng DynamoDB studentData. Vai trò này cần:\nQuyền ghi log vào CloudWatch (AWSLambdaBasicExecutionRole). Quyền đọc dữ liệu từ DynamoDB (AmazonDynamoDBReadOnlyAccess). Quyền S3 và CloudFront (AmazonS3FullAccess, CloudFrontFullAccess) cho các tính năng mở rộng tiềm năng. Lưu ý: AmazonS3FullAccess và CloudFrontFullAccess không được sử dụng trong mã hiện tại nhưng được giữ lại để hỗ trợ các tính năng tương lai (ví dụ: lưu tệp vào S3 hoặc quản lý CloudFront).\nHành Động Chi Tiết Dưới đây là các bước chi tiết để tạo vai trò IAM LambdaGetStudentRole:\n1. Truy Cập AWS Management Console Mở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập IAM và chọn Identity and Access Management (IAM).\nHình 1: Giao diện AWS Console với thanh tìm kiếm IAM.\n2. Điều Hướng Đến Mục Roles Trong giao diện IAM, tìm menu điều hướng bên trái.\nChọn Roles (Vai trò) để xem danh sách các vai trò IAM. Nếu chưa có vai trò nào, danh sách sẽ trống.\nHình 2: Menu điều hướng với tùy chọn Roles.\n3. Khởi Tạo Quá Trình Tạo Vai Trò Trong giao diện Roles, nhấn nút Create Role (Tạo Vai trò) ở góc trên bên phải.\nHình 3: Nút Create Role trong giao diện Roles.\n4. Chọn Trusted Entity Type Trong mục Select trusted entity, chọn AWS Service để chỉ định vai trò dành cho dịch vụ AWS.\nTrong phần Use case, chọn Lambda từ danh sách dịch vụ.\nNhấn Next để chuyển sang bước cấu hình quyền.\nHình 4: Lựa chọn AWS Service và Lambda trong Use case.\n5. Cấp Quyền Cho Vai Trò Trong mục Permissions (Quyền), thêm bốn chính sách:\nAWSLambdaBasicExecutionRole:\nNhập AWSLambdaBasicExecutionRole vào thanh tìm kiếm. Chọn chính sách AWSLambdaBasicExecutionRole. Mô tả: Cho phép hàm Lambda ghi log vào CloudWatch để giám sát và gỡ lỗi.\nHình 5: Chọn chính sách AWSLambdaBasicExecutionRole.\nAmazonDynamoDBReadOnlyAccess:\nNhập AmazonDynamoDBReadOnlyAccess vào thanh tìm kiếm. Chọn chính sách AmazonDynamoDBReadOnlyAccess. Mô tả: Cấp quyền đọc dữ liệu từ DynamoDB, hỗ trợ thao tác Scan hoặc GetItem.\nHình 6: Chọn chính sách AmazonDynamoDBReadOnlyAccess.\nAmazonS3FullAccess:\nNhập AmazonS3FullAccess vào thanh tìm kiếm. Chọn chính sách AmazonS3FullAccess. Mô tả: Cấp quyền đọc, ghi, quản lý S3 bucket cho các tính năng mở rộng tiềm năng (ví dụ: lưu tệp bổ sung).\nHình 7: Chọn chính sách AmazonS3FullAccess.\nCloudFrontFullAccess:\nNhập CloudFrontFullAccess vào thanh tìm kiếm. Chọn chính sách CloudFrontFullAccess. Mô tả: Cấp quyền quản lý CloudFront distribution cho các tính năng mở rộng tiềm năng.\nHình 8: Chọn chính sách CloudFrontFullAccess.\nKiểm tra danh sách Permissions policies để đảm bảo có:\nAWSLambdaBasicExecutionRole AmazonDynamoDBReadOnlyAccess AmazonS3FullAccess CloudFrontFullAccess Nhấn Next.\n6. Đặt Tên và Kiểm Tra Vai Trò Trong mục Role details:\nRole Name: Nhập LambdaGetStudentRole. Lưu ý: Tên phải chính xác để khớp với cấu hình hàm Lambda getStudentData.\nDescription (tùy chọn): Nhập mô tả, ví dụ: \u0026ldquo;Vai trò IAM cho hàm Lambda getStudentData, cấp quyền đọc DynamoDB, ghi log CloudWatch, và hỗ trợ S3/CloudFront.\u0026rdquo; Hình 9: Nhập tên và mô tả vai trò.\nKiểm tra lại:\nTrusted entity: AWS Service (Lambda). Permissions: AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonS3FullAccess, CloudFrontFullAccess. Nhấn Create Role (Tạo Vai trò).\nHình 10: Nút Create Role để xác nhận.\n7. Kiểm Tra Trạng Thái Tạo Vai Trò Sau khi nhấn Create Role, bạn sẽ trở về danh sách Roles.\nTìm vai trò LambdaGetStudentRole. Nếu thành công, bạn sẽ thấy thông báo: \u0026ldquo;Role LambdaGetStudentRole created\u0026rdquo;.\nNhấp vào LambdaGetStudentRole để xem chi tiết:\nARN: Ghi lại ARN (ví dụ: arn:aws:iam::your-account-id:role/LambdaGetStudentRole) để sử dụng khi cấu hình hàm Lambda. Policies: Xác minh có AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonS3FullAccess, CloudFrontFullAccess. Nếu vai trò không xuất hiện, làm mới trang hoặc kiểm tra lại các bước.\nHình 11: Chi tiết vai trò LambdaGetStudentRole với ARN và policies.\nLưu Ý Quan Trọng Yếu Tố Chi Tiết Tên vai trò Phải là LambdaGetStudentRole (phân biệt chữ hoa/thường) để khớp với hàm Lambda. Tên sai sẽ gây lỗi khi thực thi. S3 và CloudFront AmazonS3FullAccess và CloudFrontFullAccess không được sử dụng hiện tại nhưng giữ lại cho các tính năng mở rộng (ví dụ: lưu tệp vào S3 hoặc quản lý CloudFront). Xóa nếu không cần để tuân thủ least privilege. Tối ưu hóa bảo mật Cân nhắc tạo chính sách tùy chỉnh thay vì AmazonDynamoDBReadOnlyAccess để giới hạn quyền chỉ trên bảng studentData. Kiểm tra sớm Ghi lại ARN và kiểm tra vai trò trong IAM trước khi cấu hình hàm Lambda để đảm bảo hoạt động đúng. Xử lý lỗi Nếu gặp lỗi \u0026ldquo;Access Denied\u0026rdquo;, kiểm tra quyền tài khoản AWS (iam:CreateRole) hoặc liên hệ quản trị viên. Mẹo thực tiễn: Kiểm tra ARN và chính sách ngay sau khi tạo vai trò để xác minh cấu hình trước khi tích hợp với Lambda.\nKết Luận Vai trò IAM LambdaGetStudentRole đảm bảo hàm Lambda getStudentData có quyền đọc dữ liệu từ DynamoDB, ghi log vào CloudWatch, và hỗ trợ mở rộng với S3 và CloudFront. Vai trò này sẵn sàng tích hợp vào hàm Lambda trong các bước tiếp theo.\nBước tiếp theo: Chuyển đến Tạo IAM Role cho Lambda Post để thiết lập vai trò cho hàm lưu trữ dữ liệu sinh viên!\n"
},
{
	"uri": "/vi/2-preparation-steps/2.2-create-iam-role-for-lambda-post/",
	"title": "Tạo IAM Role cho Lambda Post",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo vai trò IAM LambdaInsertStudentRole cho hàm Lambda insertStudentData, cấp quyền để ghi dữ liệu vào bảng DynamoDB studentData, gửi email qua AWS SES, ghi log vào CloudWatch, và hỗ trợ các tương tác tiềm năng với S3 và CloudFront.\nHàm insertStudentData thực hiện:\nLưu thông tin sinh viên (Mã sinh viên, Họ tên, Lớp, Ngày sinh, Email) vào bảng DynamoDB studentData qua thao tác PutItem. Gửi email xác nhận đến địa chỉ email của sinh viên qua AWS SES. Vai trò này cần:\nQuyền ghi log vào CloudWatch (AWSLambdaBasicExecutionRole). Quyền ghi và đọc dữ liệu vào DynamoDB (AmazonDynamoDBFullAccess). Quyền gửi email qua SES (AmazonSESFullAccess). Quyền S3 và CloudFront (AmazonS3FullAccess, CloudFrontFullAccess) cho các tính năng mở rộng tiềm năng. Lưu ý: AmazonS3FullAccess và CloudFrontFullAccess không được sử dụng trong mã hiện tại nhưng được giữ lại để hỗ trợ các tính năng tương lai (ví dụ: lưu tệp vào S3 hoặc quản lý CloudFront).\nHành Động Chi Tiết Dưới đây là các bước chi tiết để tạo vai trò IAM LambdaInsertStudentRole:\n1. Truy Cập AWS Management Console Mở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập IAM và chọn Identity and Access Management (IAM).\nĐảm bảo bạn đang ở vùng AWS chính (ví dụ: us-east-1), kiểm tra ở góc trên bên phải.\nHình 1: Giao diện AWS Console với thanh tìm kiếm IAM.\n2. Điều Hướng Đến Mục Roles Trong giao diện IAM, tìm menu điều hướng bên trái.\nChọn Roles (Vai trò) để xem danh sách các vai trò IAM. Nếu chưa có vai trò nào, danh sách sẽ trống.\nHình 2: Menu điều hướng với tùy chọn Roles.\n3. Khởi Tạo Quá Trình Tạo Vai Trò Trong giao diện Roles, nhấn nút Create Role (Tạo Vai trò) ở góc trên bên phải.\nHình 3: Nút Create Role trong giao diện Roles.\n4. Chọn Trusted Entity Type Trong mục Select trusted entity, chọn AWS Service để chỉ định vai trò dành cho dịch vụ AWS.\nTrong phần Use case, chọn Lambda từ danh sách dịch vụ.\nNhấn Next để chuyển sang bước cấu hình quyền.\nHình 4: Lựa chọn AWS Service và Lambda trong Use case.\n5. Cấp Quyền Cho Vai Trò Trong mục Permissions (Quyền), thêm các chính sách sau:\nAWSLambdaBasicExecutionRole:\nNhập AWSLambdaBasicExecutionRole vào thanh tìm kiếm. Chọn chính sách AWSLambdaBasicExecutionRole. Mô tả: Cho phép hàm Lambda ghi log vào CloudWatch để giám sát và gỡ lỗi.\nHình 5: Chọn chính sách AWSLambdaBasicExecutionRole.\nAmazonDynamoDBFullAccess:\nNhập AmazonDynamoDBFullAccess vào thanh tìm kiếm. Chọn chính sách AmazonDynamoDBFullAccess. Mô tả: Cấp quyền đọc và ghi dữ liệu trên DynamoDB, bao gồm thao tác PutItem cần thiết cho hàm insertStudentData.\nHình 6: Chọn chính sách AmazonDynamoDBFullAccess.\nAmazonSESFullAccess:\nNhập AmazonSESFullAccess vào thanh tìm kiếm. Chọn chính sách AmazonSESFullAccess. Mô tả: Cấp quyền gửi email qua SES để thông báo xác nhận (ví dụ: đến nguyentribaothang@gmail.com).\nHình 7: Chọn chính sách AmazonSESFullAccess.\nAmazonS3FullAccess (tùy chọn):\nNhập AmazonS3FullAccess vào thanh tìm kiếm. Chọn chính sách AmazonS3FullAccess. Mô tả: Cấp quyền đọc, ghi, quản lý S3 bucket cho các tính năng mở rộng tiềm năng.\nHình 8: Chọn chính sách AmazonS3FullAccess.\nCloudFrontFullAccess (tùy chọn):\nNhập CloudFrontFullAccess vào thanh tìm kiếm. Chọn chính sách CloudFrontFullAccess. Mô tả: Cấp quyền quản lý CloudFront distribution cho các tính năng mở rộng tiềm năng.\nHình 9: Chọn chính sách CloudFrontFullAccess.\nKiểm tra danh sách Permissions policies để đảm bảo có:\nAWSLambdaBasicExecutionRole AmazonDynamoDBFullAccess AmazonSESFullAccess AmazonS3FullAccess CloudFrontFullAccess Nhấn Next.\n6. Đặt Tên và Kiểm Tra Vai Trò Trong mục Role details:\nRole Name: Nhập LambdaInsertStudentRole. Lưu ý: Tên phải chính xác để khớp với cấu hình hàm Lambda insertStudentData.\nDescription (tùy chọn): Nhập mô tả, ví dụ: \u0026ldquo;Vai trò IAM cho hàm Lambda insertStudentData, cấp quyền ghi DynamoDB, gửi email SES, ghi log CloudWatch, và hỗ trợ S3/CloudFront.\u0026rdquo; Hình 10: Nhập tên và mô tả vai trò.\nKiểm tra lại:\nTrusted entity: AWS Service (Lambda). Permissions: AWSLambdaBasicExecutionRole, AmazonDynamoDBFullAccess, AmazonSESFullAccess, AmazonS3FullAccess, CloudFrontFullAccess. Nhấn Create Role (Tạo Vai trò).\n7. Kiểm Tra Trạng Thái Tạo Vai Trò Sau khi nhấn Create Role, bạn sẽ trở về danh sách Roles.\nHình 11: Nhập tên và mô tả vai trò.\nTìm vai trò LambdaInsertStudentRole. Nếu thành công, bạn sẽ thấy thông báo: \u0026ldquo;Role LambdaInsertStudentRole created\u0026rdquo;.\nHình 12: Thông báo: Role LambdaInsertStudentRole created.\nNhấp vào LambdaInsertStudentRole để xem chi tiết:\nARN: Ghi lại ARN (ví dụ: arn:aws:iam::your-account-id:role/LambdaInsertStudentRole) để sử dụng khi cấu hình hàm Lambda. Policies: Xác minh các chính sách đã gắn đúng. Nếu vai trò không xuất hiện, làm mới trang hoặc kiểm tra lại các bước.\nLưu Ý Quan Trọng Yếu Tố Chi Tiết Tên vai trò Phải là LambdaInsertStudentRole (phân biệt chữ hoa/thường) để khớp với hàm Lambda. Tên sai sẽ gây lỗi khi thực thi. DynamoDB quyền AmazonDynamoDBReadOnlyAccess không hỗ trợ PutItem. Sử dụng AmazonDynamoDBFullAccess để cho phép PutItem trên bảng studentData. S3 và CloudFront AmazonS3FullAccess và CloudFrontFullAccess không được sử dụng hiện tại nhưng giữ lại cho các tính năng mở rộng (ví dụ: lưu tệp vào S3 hoặc quản lý CloudFront). Xóa nếu không cần để tuân thủ least privilege. Kiểm tra sớm Ghi lại ARN và kiểm tra vai trò trong IAM trước khi cấu hình hàm Lambda để đảm bảo hoạt động đúng. Xử lý lỗi Nếu gặp lỗi \u0026ldquo;Access Denied\u0026rdquo;, kiểm tra quyền tài khoản AWS (iam:CreateRole, iam:AttachRolePolicy) hoặc liên hệ quản trị viên. Nếu hàm báo lỗi AccessDenied, kiểm tra chính sách DynamoDB. Dùng CloudTrail hoặc IAM Access Advisor để xác định vấn đề. Vùng AWS Đảm bảo vùng AWS (ví dụ: us-east-1) nhất quán với các dịch vụ khác (DynamoDB, Lambda, SES). Kiểm tra ở góc trên bên phải AWS Console. Mẹo thực tiễn: Kiểm tra vai trò và ARN ngay sau khi tạo để đảm bảo cấu hình chính xác trước khi tích hợp với hàm Lambda.\nKết Luận Vai trò IAM LambdaInsertStudentRole đảm bảo hàm Lambda insertStudentData có quyền cần thiết để ghi dữ liệu vào DynamoDB, gửi email qua SES, và ghi log vào CloudWatch, đồng thời hỗ trợ mở rộng với S3 và CloudFront. Với AmazonDynamoDBFullAccess, hàm hoạt động hiệu quả và an toàn trong ứng dụng serverless.\nBước tiếp theo: Chuyển đến Tạo IAM Role cho DynamoDB Backup để thiết lập vai trò cho sao lưu dữ liệu!\n"
},
{
	"uri": "/vi/6-configuring-s3-buckets/6.3-enabling-static-website-hosting/",
	"title": "Bật Tính Năng Static Website Hosting",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Bật tính năng Static Website Hosting trên S3 Bucket student-management-website-2025 để phục vụ các tệp tĩnh (index.html, styles.css, scripts.js từ mục 6.2) dưới dạng website tĩnh. Điều này cung cấp endpoint HTTP (VD: http://student-management-website-2025.s3-website-us-east-1.amazonaws.com) để truy cập giao diện, chuẩn bị phân phối qua CloudFront (mục 7) với HTTPS và hiệu suất cao. Giao diện gọi các endpoint API GET /students, POST /students, và POST /backup (mục 4.8) sử dụng Invoke URL (VD: https://abc123.execute-api.us-east-1.amazonaws.com/prod) và StudentApiKey (mục 4.2) với CORS (mục 4.7).\nTổng Quan về Static Website Hosting Vai trò của Static Website Hosting: Biến bucket student-management-website-2025 thành máy chủ web tĩnh, cung cấp endpoint HTTP (VD: http://student-management-website-2025.s3-website-us-east-1.amazonaws.com). Xử lý yêu cầu HTTP GET cho các tệp tĩnh (index.html, styles.css, scripts.js). Chỉ định index.html làm Index document để hiển thị trang chính khi truy cập endpoint gốc. Tích hợp với hệ thống: Giao diện web gọi API student (stage prod, mục 4.8) để: POST /students: Lưu bản ghi vào DynamoDB studentData và gửi email xác nhận qua SES. GET /students: Hiển thị dữ liệu trong bảng. POST /backup: Tạo tệp backup trong S3 Bucket student-backup-20250706 (mục 2.4, 6.5) và gửi email thông báo qua SES. Bucket Policy (mục 6.4) cho phép truy cập công khai (s3:GetObject) để CloudFront truy xuất nội dung. CloudFront (mục 7) sử dụng endpoint S3 làm Origin để cung cấp HTTPS và tăng tốc độ tải. CORS được cấu hình (mục 4.7) để hỗ trợ yêu cầu từ domain CloudFront (VD: https://d12345678.cloudfront.net). Lý do chọn index.html làm Index document: index.html là tệp chính chứa giao diện (biểu mẫu, bảng, nút chức năng) được tải lên ở mục 6.2. Khi truy cập endpoint gốc, S3 tự động phục vụ index.html. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 6.1 (tạo bucket student-management-website-2025), mục 6.2 (tải lên index.html, styles.css, scripts.js), mục 5 (xây dựng giao diện web), mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), mục 4.6 (tạo resource /backup và phương thức POST /backup), mục 4.7 (kích hoạt CORS), mục 4.8 (triển khai API lên stage prod), mục 4.9 (gắn StudentApiKey vào StudentUsagePlan), mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS có quyền s3:PutBucketWebsite và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập S3 và chọn dịch vụ Amazon S3 để vào giao diện quản lý bucket.\nKiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng us-east-1 (US East (N. Virginia)) để đồng bộ với bucket student-management-website-2025, API student, các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), bảng DynamoDB studentData, bucket student-backup-20250706, và SES. Vùng được hiển thị ở góc trên bên phải AWS Console.\nHình 1: Giao diện AWS Console với thanh tìm kiếm S3.\nChọn Bucket student-management-website-2025\nTrong giao diện chính của Amazon S3 \u0026gt; Buckets, tìm và chọn bucket student-management-website-2025 (tạo ở mục 6.1).\nNếu không thấy bucket:\nKiểm tra vùng AWS (us-east-1) và làm mới trang. Xác minh bucket đã được tạo với tên chính xác (tên bucket là duy nhất toàn cầu, có thể bạn đã dùng tên khác như student-management-website-20250706-abc123). Nhấn vào tên bucket để vào giao diện quản lý bucket.\nHình 2: Chọn bucket student-management-website-2025.\nTruy Cập Tab Properties\nTrong giao diện của bucket student-management-website-2025, chọn tab Properties (thường nằm ở đầu trang, bên cạnh Objects, Permissions, v.v.).\nCuộn xuống phần Static website hosting để xem trạng thái hiện tại (mặc định là Disabled).\nHình 3: Tab Properties và phần Static website hosting.\nChỉnh Sửa Static Website Hosting\nTrong phần Static website hosting, nhấn nút Edit để mở giao diện cấu hình.\nKiểm tra trước khi chỉnh sửa: Đảm bảo các tệp index.html, styles.css, scripts.js đã được tải lên bucket (mục 6.2), vì Static Website Hosting yêu cầu tệp index.html tồn tại để hoạt động đúng.\nHình 4: Nhấn Edit trong Static website hosting.\nCấu Hình Static Website Hosting\nTrong giao diện Edit static website hosting, nhập các thông tin sau:\nStatic website hosting: Chọn Enable để bật tính năng. Hosting type: Chọn Host a static website (phù hợp cho giao diện tĩnh của ứng dụng). Lưu ý: Không chọn Redirect requests for an object (dùng cho chuyển hướng, không phù hợp ở đây). Index document: Nhập index.html (tệp chính của giao diện web, chứa biểu mẫu và bảng sinh viên). Lý do: Khi truy cập endpoint gốc của bucket, S3 sẽ phục vụ index.html làm trang mặc định. Error document (Tùy chọn): Nhập index.html để chuyển hướng mọi lỗi (VD: 404 Not Found) về trang chính. Lý do: Đảm bảo người dùng luôn thấy giao diện chính, ngay cả khi truy cập đường dẫn không tồn tại. Nếu muốn trang lỗi tùy chỉnh, tải lên tệp error.html (mục 6.2) và nhập tên tệp ở đây. Kiểm tra cấu hình: Xác minh Enable được chọn, Hosting type là Host a static website, và Index document là index.html.\nHình 5: Cấu hình Static website hosting.\nLưu Thay Đổi\nNhấn Save changes để áp dụng cấu hình.\nKết quả mong đợi: AWS S3 hiển thị thông báo \u0026ldquo;Successfully edited static website hosting\u0026rdquo;.\nHình 6: Nhấn Save changes.\nTrong tab Properties \u0026gt; Static website hosting, bạn sẽ thấy:\nStatus: Enabled. Bucket website endpoint: URL dạng http://student-management-website-2025.s3-website-us-east-1.amazonaws.com. Sao chép Bucket website endpoint để kiểm tra.\nHình 7: Thông báo trạng thái và Bucket website endpoint.\nKiểm Tra Static Website Hosting\nMở trình duyệt và truy cập Bucket website endpoint (VD: http://student-management-website-2025.s3-website-us-east-1.amazonaws.com).\nKết quả mong đợi:\nGiao diện web hiển thị với biểu mẫu nhập liệu, bảng sinh viên, và các nút chức năng (Lưu, Xem, Backup). Các tệp styles.css và scripts.js được tải đúng, giao diện sử dụng Tailwind CSS và font Poppins hiển thị chính xác. Hình 8: Giao diện web hiển thị qua endpoint S3.\nLưu ý:\nCác yêu cầu API (GET /students, POST /students, POST /backup) có thể gặp lỗi CORS vì endpoint S3 sử dụng HTTP và chưa tích hợp với CloudFront. Điều này sẽ được khắc phục khi cấu hình CloudFront (mục 7) và CORS trong API Gateway (mục 4.7). Endpoint S3 chỉ hỗ trợ HTTP, không hỗ trợ HTTPS. CloudFront sẽ cung cấp HTTPS và tăng tốc độ tải. Xử lý lỗi:\nLỗi 403 Forbidden: Kiểm tra Bucket Policy (mục 6.4) đã cho phép s3:GetObject công khai. Đảm bảo Block all public access đã bỏ chọn (mục 6.1). Lỗi 404 Not Found: Xác minh index.html đã được tải lên bucket (mục 6.2) và nằm ở thư mục gốc. Kiểm tra đường dẫn trong index.html cho styles.css và scripts.js (VD: , ). Giao diện hiển thị sai: Mở Developer Tools \u0026gt; Console trong trình duyệt để kiểm tra lỗi (VD: tệp CSS/JS không tải). Xác minh các tệp được tải lên đúng (mục 6.2) và không bị hỏng. Lỗi \u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra vai trò IAM của tài khoản có quyền s3:PutBucketWebsite. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Bảo mật Hiện tại, bucket sử dụng quyền công khai (s3:GetObject). Sử dụng CloudFront Origin Access Identity (OAI) (mục 6.4) để hạn chế truy cập trực tiếp vào S3. Tránh nhúng StudentApiKey trong scripts.js; sử dụng AWS Secrets Manager hoặc CloudFront Functions: function handler(event) { var request = event.request; request.headers[\u0026lsquo;x-api-key\u0026rsquo;] = { value: \u0026lsquo;xxxxxxxxxxxxxxxxxxxx\u0026rsquo; }; return request; } Tối ưu hóa Đảm bảo styles.css, scripts.js đã nén (mục 6.2). Bật S3 Access Logs: Trong S3 \u0026gt; student-management-website-2025 \u0026gt; Properties \u0026gt; Server access logging, chọn Enable, chỉ định bucket log (VD: student-web-logs-20250706). Sử dụng AWS CLI: aws s3api put-bucket-website \u0026ndash;bucket student-management-website-2025 \u0026ndash;website-configuration \u0026lsquo;{\u0026ldquo;IndexDocument\u0026rdquo;:{\u0026ldquo;Suffix\u0026rdquo;:\u0026ldquo;index.html\u0026rdquo;},\u0026ldquo;ErrorDocument\u0026rdquo;:{\u0026ldquo;Key\u0026rdquo;:\u0026ldquo;index.html\u0026rdquo;}}\u0026rsquo; Tích hợp với hệ thống Cấu hình Bucket Policy (mục 6.4) để cho phép CloudFront truy xuất. Tạo CloudFront phân phối (mục 7) với Origin là Bucket website endpoint, Default root object: index.html, Viewer protocol policy: Redirect HTTP to HTTPS. Cập nhật CORS trong API Gateway (mục 4.7) với Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Kiểm tra tích hợp Truy cập Bucket website endpoint để kiểm tra giao diện. Sau khi cấu hình CloudFront, truy cập CloudFront URL (https://d12345678.cloudfront.net) và kiểm tra: POST /students (lưu bản ghi, gửi email SES), GET /students (hiển thị bảng), POST /backup (tạo tệp trong student-backup-20250706, gửi email). Sử dụng Developer Tools \u0026gt; Network để kiểm tra yêu cầu API. Xử lý lỗi 403 Forbidden: Kiểm tra Bucket Policy (mục 6.4) và Block all public access (mục 6.1). 404 Not Found: Xác minh index.html ở thư mục gốc, đường dẫn trong index.html đúng (, ). Giao diện sai: Kiểm tra Developer Tools \u0026gt; Console. AccessDenied: Kiểm tra quyền IAM (s3:PutBucketWebsite). Mẹo thực tiễn: Kiểm tra endpoint S3 trước khi tích hợp CloudFront. Nếu gặp lỗi CORS, xác minh cấu hình CORS trong API Gateway (mục 4.7). Sử dụng AWS CLI để tự động hóa cấu hình.\nKết Luận Tính năng Static Website Hosting đã được bật trên bucket student-management-website-2025, cung cấp endpoint HTTP để phục vụ giao diện web. Bucket sẵn sàng tích hợp với CloudFront (mục 7) để hỗ trợ HTTPS.\nBước tiếp theo: Chuyển đến Cấu hình Bucket Policy để cho phép truy cập công khai để tiếp tục cấu hình!\n"
},
{
	"uri": "/vi/3-creating-lambda-functions/3.3-create-the-backupdynamodbandsendemail-function/",
	"title": "Cấu hình Lambda Function BackupDynamoDBAndSendEmail",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo và cấu hình hàm Lambda BackupDynamoDBAndSendEmail để sao lưu toàn bộ dữ liệu từ bảng DynamoDB studentData vào bucket S3 dưới dạng tệp JSON, tạo pre-signed URL, và gửi email thông báo chứa link tải qua SES. Hàm sử dụng Python 3.13, kiến trúc x86_64, và gán vai trò IAM DynamoDBBackupRole (tạo ở mục 2.3). Hàm sẽ trả về phản hồi JSON để tích hợp với các hệ thống khác (nếu cần) và ghi log vào CloudWatch để giám sát.\nTổng Quan về Hàm BackupDynamoDBAndSendEmail Hàm BackupDynamoDBAndSendEmail thực hiện các chức năng sau:\nĐọc toàn bộ dữ liệu từ bảng studentData (các trường studentid, name, class, birthdate, email) bằng thao tác Scan. Lưu dữ liệu tạm thời dưới dạng tệp JSON trong thư mục /tmp của môi trường Lambda. Tải tệp JSON lên bucket S3 với tên tệp có dấu thời gian (ví dụ: backups/backup-20250707-0409.json). Tạo pre-signed URL (hết hạn sau 1 giờ) để truy cập tệp backup. Gửi email thông báo qua SES với nội dung HTML đẹp, chứa link tải và thời gian hết hạn. Trả về phản hồi JSON xác nhận trạng thái sao lưu và gửi email. Yêu Cầu Ban Đầu Bạn cần hoàn thành các bước chuẩn bị ở mục 2 (IAM Role DynamoDBBackupRole, bảng DynamoDB studentData, SES email xác minh, S3 bucket student-backup-20250706). Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập Lambda và chọn dịch vụ AWS Lambda để vào giao diện quản lý.\nĐảm bảo bạn đang làm việc trong vùng AWS chính (ví dụ: us-east-1), kiểm tra vùng ở góc trên bên phải AWS Console. Vùng này phải khớp với bảng DynamoDB studentData, bucket S3 student-backup-20250706, và SES.\nHình 1: Giao diện AWS Console với thanh tìm kiếm Lambda.\nĐiều Hướng Đến Mục Functions\nTrong giao diện chính của AWS Lambda, nhìn vào menu điều hướng bên trái.\nChọn Functions (Hàm) để xem danh sách các hàm Lambda hiện có. Nếu bạn chưa tạo hàm nào, danh sách sẽ trống.\nHình 2: Menu điều hướng với tùy chọn Functions.\nKhởi Tạo Quá Trình Tạo Hàm\nTrong giao diện Functions, nhấn nút Create function (Tạo hàm) ở góc trên bên phải để bắt đầu cấu hình hàm mới.\nHình 3: Nút Create function trong giao diện Functions.\nCấu Hình Thông Tin Cơ Bản của Hàm\nTrong mục Function type, chọn Author from scratch (Tạo từ đầu) để tự viết mã cho hàm.\nTrong mục Function name, nhập chính xác BackupDynamoDBAndSendEmail. Tên này sẽ được sử dụng khi tích hợp với các dịch vụ khác (ví dụ: CloudWatch Events/EventBridge để tự động chạy sao lưu).\nTrong mục Runtime, chọn Python 3.13 (phiên bản Python mới nhất được yêu cầu). Nếu Python 3.13 không có sẵn, chọn phiên bản Python mới nhất được hỗ trợ (ví dụ: Python 3.12 hoặc 3.11).\nTrong mục Architecture, chọn x86_64 để đảm bảo tương thích với kiến trúc tiêu chuẩn.\nHình 4: Giao diện cấu hình thông tin cơ bản của hàm.\nTrong mục Permissions, chọn Use an existing role (Sử dụng vai trò hiện có).\nTrong danh sách vai trò, chọn DynamoDBBackupRole (tạo ở mục 2.3). Vai trò này bao gồm các chính sách AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonS3FullAccess, AmazonSESFullAccess, và CloudFrontFullAccess. Lưu ý: CloudFrontFullAccess không được sử dụng trong mã hiện tại, nhưng được giữ lại theo yêu cầu trước đó. Giữ các thiết lập khác ở giá trị mặc định và nhấn Create function để tạo hàm.\nHình 5: Chọn vai trò DynamoDBBackupRole và nhấn Create function.\nKiểm Tra Trạng Thái Tạo Hàm\nSau khi nhấn Create function, bạn sẽ được chuyển đến trang chi tiết của hàm BackupDynamoDBAndSendEmail. Giao diện sẽ hiển thị thông báo tương tự: \u0026ldquo;Successfully created the function BackupDynamoDBAndSendEmail. You can now change its code and configuration. To invoke your function with a test event, choose Test.\u0026rdquo; Nếu không thấy thông báo hoặc gặp lỗi, kiểm tra lại vai trò DynamoDBBackupRole có tồn tại và tài khoản AWS của bạn có quyền lambda:CreateFunction hay không. Cấu Hình Mã Nguồn\nTrong giao diện chi tiết của hàm BackupDynamoDBAndSendEmail, tại tab Code, cuộn xuống phần Code source. Trong tệp lambda_function.py, xóa mã mặc định và dán mã sau: import boto3 import datetime import json from botocore.exceptions import ClientError dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) ses = boto3.client(\u0026#39;ses\u0026#39;) s3_client = boto3.client(\u0026#39;s3\u0026#39;) def lambda_handler(event, context): # Truy cập bảng DynamoDB table = dynamodb.Table(\u0026#39;studentData\u0026#39;) response = table.scan() items = response[\u0026#39;Items\u0026#39;] # Lưu dữ liệu vào file tạm trong Lambda backup_file = \u0026#39;/tmp/backup.json\u0026#39; with open(backup_file, \u0026#39;w\u0026#39;) as f: json.dump(items, f) # Tải file lên S3 s3_bucket = \u0026#39;student-backup-20250706\u0026#39; # Thay bằng tên bucket thực tế s3_key = f\u0026#39;backups/backup-{datetime.datetime.now().strftime(\u0026#34;%Y%m%d-%H%M%S\u0026#34;)}.json\u0026#39; s3_client.upload_file(backup_file, s3_bucket, s3_key) # Tạo pre-signed URL (hết hạn sau 1 giờ) presigned_url = s3_client.generate_presigned_url( \u0026#39;get_object\u0026#39;, Params={\u0026#39;Bucket\u0026#39;: s3_bucket, \u0026#39;Key\u0026#39;: s3_key}, ExpiresIn=3600 ) # Tạo email HTML đẹp sender = \u0026#39;baothangvip@gmail.com\u0026#39; recipient = \u0026#39;nguyentribaothang@gmail.com\u0026#39; subject = \u0026#39;Thông Báo Sao Lưu Dữ Liệu Sinh Viên\u0026#39; expiry_time = (datetime.datetime.now() + datetime.timedelta(hours=1)).strftime(\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;) html_body = f\u0026#34;\u0026#34;\u0026#34; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;vi\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;style\u0026gt; body {{ font-family: Arial, sans-serif; color: #333; line-height: 1.6; }} .container {{ max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9; border-radius: 8px; }} .header {{ background-color: #4CAF50; color: white; padding: 10px; text-align: center; border-radius: 8px 8px 0 0; }} .content {{ padding: 20px; background-color: white; border-radius: 0 0 8px 8px; }} .button {{ display: inline-block; padding: 10px 20px; background-color: #4CAF50; color: white !important; text-decoration: none; border-radius: 5px; margin-top: 20px; }} .footer {{ font-size: 12px; color: #777; text-align: center; margin-top: 20px; }} \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Sao Lưu Dữ Liệu Sinh Viên\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Kính gửi Quý khách,\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Dữ liệu sinh viên đã được sao lưu thành công và lưu trữ trên AWS S3.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Tải file sao lưu tại đây:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;{presigned_url}\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;Tải File Sao Lưu\u0026lt;/a\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Lưu ý:\u0026lt;/strong\u0026gt; Liên kết này sẽ hết hạn vào {expiry_time}.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Đây là email tự động. Vui lòng không trả lời trực tiếp email này.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026#34;\u0026#34;\u0026#34; try: response = ses.send_email( Source=sender, Destination={\u0026#39;ToAddresses\u0026#39;: [recipient]}, Message={ \u0026#39;Subject\u0026#39;: {\u0026#39;Data\u0026#39;: subject}, \u0026#39;Body\u0026#39;: { \u0026#39;Html\u0026#39;: {\u0026#39;Data\u0026#39;: html_body}, \u0026#39;Text\u0026#39;: {\u0026#39;Data\u0026#39;: f\u0026#39;File sao lưu: {presigned_url}\\nHết hạn: {expiry_time}\u0026#39;} } } ) print(f\u0026#34;Email sent! Message ID: {response[\u0026#39;MessageId\u0026#39;]}\u0026#34;) except ClientError as e: print(f\u0026#34;Lỗi gửi email: {e}\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;message\u0026#39;: f\u0026#39;Sao lưu thành công nhưng gửi email thất bại: {str(e)}\u0026#39;}) } return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;message\u0026#39;: \u0026#39;Sao lưu và gửi email thành công!\u0026#39;}) } Giải thích mã cải tiến:\nLogging: Thêm logging để ghi log chi tiết vào CloudWatch (mức INFO và ERROR), thay thế print để dễ dàng giám sát. Xử lý phân trang: Thêm vòng lặp while để xử lý phân trang cho thao tác Scan, đảm bảo lấy hết dữ liệu từ bảng lớn. CORS: Thêm header Access-Control-Allow-Origin: '*' trong tất cả phản hồi để tích hợp với API Gateway. Xử lý lỗi: Thêm try-except cho các bước Scan, lưu file, tải lên S3, và tạo pre-signed URL, trả về lỗi chi tiết với mã trạng thái 500. Vùng AWS: Chỉ định region_name='us-east-1' cho DynamoDB, S3, và SES để đảm bảo đồng bộ. Email HTML: Giữ nguyên nội dung HTML đẹp với CSS inline, nhưng thêm logging cho trạng thái gửi email. Kiểm tra và thay đổi:\nVùng AWS: Thay region_name='us-east-1' trong các dòng khởi tạo dynamodb, ses, và s3_client nếu bạn sử dụng vùng khác (ví dụ: us-west-2). Email: Thay baothangvip@gmail.com (nguồn) và nguyentribaothang@gmail.com (người nhận) bằng email đã xác minh trong SES (mục 2.5). Nếu SES ở chế độ sandbox, cả hai email phải được xác minh. Bucket S3: Thay student-backup-20250706 bằng tên bucket thực tế của bạn (sẽ tạo ở mục sau). Nhấn Deploy để lưu và triển khai mã.\nHình 6: Giao diện chỉnh sửa mã nguồn BackupDynamoDBAndSendEmail.\nSau khi triển khai, giao diện sẽ hiển thị thông báo: \u0026ldquo;Successfully updated the function BackupDynamoDBAndSendEmail.\u0026rdquo;\nCấu Hình Timeout và Bộ Nhớ\nTrong tab Configuration \u0026gt; General configuration, nhấn Edit. Đặt Timeout: 60 giây (đủ cho thao tác Scan, lưu file, tải lên S3, và gửi email). Đặt Memory: 256 MB (để xử lý bảng lớn và lưu trữ tạm trong /tmp). Nhấn Save để lưu thay đổi. Lý do: Thao tác Scan trên bảng lớn và lưu trữ tệp trong /tmp có thể yêu cầu nhiều tài nguyên hơn so với getStudentData hoặc insertStudentData. Kiểm Tra Hàm\nTrong tab Test, nhấn Create new test event. Đặt tên sự kiện (ví dụ: testBackupDynamoDB). Sử dụng JSON mẫu (có thể để trống vì hàm không yêu cầu input cụ thể): {} Nhấn Create để lưu sự kiện kiểm tra, sau đó nhấn Test để chạy hàm. Kiểm tra kết quả: Nếu thành công, hàm trả về: { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;message\\\u0026#34;: \\\u0026#34;Sao lưu và gửi email thành công!\\\u0026#34;}\u0026#34;, \u0026#34;headers\u0026#34;: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34; } } Kiểm tra bucket S3 student-backup-20250706 trong S3 Console (vào S3 \u0026gt; Buckets \u0026gt; student-backup-20250706 \u0026gt; Objects) để xác minh tệp backup (ví dụ: backups/backup-20250707-0409.json). Kiểm tra hộp thư của email nhận (nguyentribaothang@gmail.com, bao gồm Spam/Junk) để xem email thông báo với nội dung HTML như: \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;vi\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;style\u0026gt; body { font-family: Arial, sans-serif; color: #333; line-height: 1.6; } .container { max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9; border-radius: 8px; } .header { background-color: #4CAF50; color: white; padding: 10px; text-align: center; border-radius: 8px 8px 0 0; } .content { padding: 20px; background-color: white; border-radius: 0 0 8px 8px; } .button { display: inline-block; padding: 10px 20px; background-color: #4CAF50; color: white !important; text-decoration: none; border-radius: 5px; margin-top: 20px; } .footer { font-size: 12px; color: #777; text-align: center; margin-top: 20px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Sao Lưu Dữ Liệu Sinh Viên\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Kính gửi Quý khách,\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Dữ liệu sinh viên đã được sao lưu thành công và lưu trữ trên AWS S3.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Tải file sao lưu tại đây:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;[pre-signed-url]\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;Tải File Sao Lưu\u0026lt;/a\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Lưu ý:\u0026lt;/strong\u0026gt; Liên kết này sẽ hết hạn vào [expiry_time].\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Đây là email tự động. Vui lòng không trả lời trực tiếp email này.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Nhấp vào link trong email để xác minh tệp backup có thể tải được. Kiểm tra log trong CloudWatch (vào Monitor \u0026gt; Logs \u0026gt; chọn log group /aws/lambda/BackupDynamoDBAndSendEmail) để xem thông tin chi tiết (số bản ghi, Message ID của email). Nếu gặp lỗi, kiểm tra các lỗi phổ biến: \u0026ldquo;AccessDenied\u0026rdquo; (DynamoDB): Kiểm tra vai trò DynamoDBBackupRole có chính sách AmazonDynamoDBReadOnlyAccess. \u0026ldquo;AccessDenied\u0026rdquo; (S3): Kiểm tra quyền PutObject trong AmazonS3FullAccess và bucket student-backup-20250706 tồn tại. \u0026ldquo;Email address is not verified\u0026rdquo; (SES): Đảm bảo baothangvip@gmail.com và nguyentribaothang@gmail.com đã được xác minh trong SES. \u0026ldquo;NoSuchBucket\u0026rdquo;: Đảm bảo bucket student-backup-20250706 đã được tạo (mục sau). \u0026ldquo;ResourceNotFoundException\u0026rdquo;: Đảm bảo bảng studentData tồn tại (mục 2.4). Lưu Ý Quan Trọng Yếu Tố Chi Tiết IAM Role Vai trò DynamoDBBackupRole (tạo ở mục 2.3) phù hợp với chức năng của hàm. Tuy nhiên, CloudFrontFullAccess không được sử dụng. Để tuân thủ least privilege, cân nhắc loại bỏ hoặc thay bằng chính sách tùy chỉnh nếu cần mở rộng. - Vào IAM \u0026gt; Policies \u0026gt; Create Policy. - Chọn JSON, dán chính sách trên (thay student-backup-20250706 bằng tên bucket thực tế). - Đặt tên (ví dụ: S3BackupStudentData) và gắn vào DynamoDBBackupRole. SES Sandbox Đảm bảo email nguồn (baothangvip@gmail.com) và người nhận (nguyentribaothang@gmail.com) đã được xác minh trong SES (mục 2.5). Nếu SES ở chế độ sandbox, cả hai email phải được xác minh. Thoát sandbox để gửi email đến địa chỉ bất kỳ: - Vào SES \u0026gt; Account dashboard \u0026gt; Request production access. - Điền biểu mẫu như hướng dẫn ở mục 2.5. Nếu chưa thoát sandbox, thử nghiệm bằng cách sử dụng cùng một email đã xác minh cho cả nguồn và người nhận. S3 Bucket Đảm bảo bucket student-backup-20250706 đã được tạo (sẽ cấu hình ở mục sau). Nếu chưa, hàm sẽ báo lỗi NoSuchBucket. Đảm bảo bucket có thư mục backups/ hoặc mã sẽ tự tạo (nếu quyền PutObject được cấp). CORS Header Access-Control-Allow-Origin: '*' được thêm để hỗ trợ tích hợp với API Gateway (nếu hàm được gọi từ giao diện web). Đảm bảo cấu hình CORS trong API Gateway (sẽ đề cập ở các bước sau). Vùng AWS Đảm bảo vùng trong mã (us-east-1) khớp với vùng của bảng studentData, bucket S3, và SES. Nếu sử dụng vùng khác (ví dụ: us-west-2), cập nhật region_name trong các dòng khởi tạo dynamodb, ses, và s3_client. Xử lý lỗi Nếu hàm báo lỗi, kiểm tra log trong CloudWatch (vào Monitor \u0026gt; Logs \u0026gt; chọn log group /aws/lambda/BackupDynamoDBAndSendEmail). Các lỗi phổ biến: - \u0026ldquo;AccessDenied\u0026rdquo; (DynamoDB): Thiếu quyền Scan. - \u0026ldquo;AccessDenied\u0026rdquo; (S3): Thiếu quyền PutObject hoặc bucket không tồn tại. - \u0026ldquo;Email address is not verified\u0026rdquo; (SES): Email chưa được xác minh. - \u0026ldquo;ResourceNotFoundException\u0026rdquo;: Bảng studentData chưa được tạo. Sử dụng CloudTrail hoặc IAM Access Advisor để xác định vấn đề về quyền. Tối ưu hóa - Thêm xử lý phân trang cho Scan (đã thêm trong mã cải tiến). - Sử dụng logging thay cho print (đã thêm). - Tăng bộ nhớ (256 MB) và timeout (60 giây) để xử lý bảng lớn. - Để tăng cường bảo mật, xác minh domain trong SES (xem AWS SES Documentation - DKIM) và cập nhật email nguồn (ví dụ: no-reply@system.edu.vn). - Nếu bảng studentData lớn, cân nhắc sử dụng DynamoDB Streams để sao lưu tăng dần thay vì Scan toàn bộ bảng. Kiểm tra sớm Sau khi tạo và triển khai hàm, chạy kiểm tra để xác minh tệp backup trong S3, email thông báo, và log trong CloudWatch trước khi tích hợp với CloudWatch Events/EventBridge (cho sao lưu định kỳ). Mẹo thực tiễn: Thêm dữ liệu mẫu vào bảng studentData, kiểm tra bucket S3 và hộp thư nhận (bao gồm Spam/Junk) để xác minh kết quả.\nKết Luận Hàm Lambda BackupDynamoDBAndSendEmail đã được tạo để sao lưu dữ liệu sinh viên từ bảng studentData vào S3 và gửi email thông báo với liên kết tải file. Hàm sẵn sàng tích hợp với CloudWatch Events/EventBridge cho sao lưu định kỳ.\nBước tiếp theo: Chuyển đến Cấu hình CloudWatch Events/EventBridge để tiếp tục!\n"
},
{
	"uri": "/vi/2-preparation-steps/2.3-create-iam-role-for-dynamodb-backup/",
	"title": "Tạo IAM Role cho DynamoDB Backup",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo vai trò IAM DynamoDBBackupRole cho hàm Lambda BackupDynamoDBAndSendEmail, cấp quyền để đọc và ghi dữ liệu vào bảng DynamoDB studentData, lưu tệp backup vào S3, gửi email qua SES, ghi log vào CloudWatch, và hỗ trợ tương tác tiềm năng với CloudFront.\nHàm BackupDynamoDBAndSendEmail thực hiện:\nĐọc dữ liệu sinh viên (Mã sinh viên, Họ tên, Lớp, Ngày sinh, Email) từ bảng DynamoDB studentData qua thao tác Scan. Lưu tệp JSON vào bucket S3 (ví dụ: student-backup-20250706). Tạo pre-signed URL cho tệp backup và gửi email thông báo qua SES (ví dụ: đến nguyentribaothang@gmail.com). Ghi log vào CloudWatch để giám sát hoạt động. Vai trò này cần:\nQuyền đọc và ghi dữ liệu vào DynamoDB (AmazonDynamoDBFullAccess). Quyền lưu và tạo URL trên S3 (AmazonS3FullAccess). Quyền gửi email qua SES (AmazonSESFullAccess). Quyền ghi log vào CloudWatch (AWSLambdaBasicExecutionRole). Quyền CloudFront (CloudFrontFullAccess) cho các tính năng mở rộng tiềm năng. Lưu ý: CloudFrontFullAccess không được sử dụng hiện tại nhưng giữ lại cho các tính năng tương lai (ví dụ: quản lý CloudFront distribution).\nHành Động Chi Tiết Dưới đây là các bước chi tiết để tạo vai trò IAM DynamoDBBackupRole:\n1. Truy Cập AWS Management Console Mở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS.\nTrong thanh tìm kiếm, nhập IAM và chọn Identity and Access Management (IAM).\nĐảm bảo bạn ở vùng AWS chính (ví dụ: us-east-1), kiểm tra ở góc trên bên phải.\nHình 1: Giao diện AWS Console với thanh tìm kiếm IAM.\n2. Điều Hướng Đến Mục Roles Trong giao diện IAM, tìm menu điều hướng bên trái.\nChọn Roles (Vai trò) để xem danh sách các vai trò IAM. Nếu chưa có vai trò, danh sách sẽ trống.\nHình 2: Menu điều hướng với tùy chọn Roles.\n3. Khởi Tạo Quá Trình Tạo Vai Trò Trong giao diện Roles, nhấn Create Role (Tạo Vai trò) ở góc trên bên phải.\nHình 3: Nút Create Role trong giao diện Roles.\n4. Chọn Trusted Entity Type Trong mục Select trusted entity, chọn AWS Service để chỉ định vai trò dành cho dịch vụ AWS.\nTrong phần Use case, chọn Lambda từ danh sách dịch vụ.\nNhấn Next để chuyển sang cấu hình quyền.\nHình 4: Lựa chọn AWS Service và Lambda trong Use case.\n5. Cấp Quyền Cho Vai Trò Trong mục Permissions (Quyền), thêm năm chính sách:\nAmazonDynamoDBFullAccess:\nNhập AmazonDynamoDBFullAccess vào thanh tìm kiếm. Chọn chính sách AmazonDynamoDBFullAccess. Mô tả: Cấp quyền đọc và ghi dữ liệu vào DynamoDB, hỗ trợ thao tác Scan và các thao tác khác nếu cần.\nHình 5: Chọn chính sách AmazonDynamoDBFullAccess.\nAmazonS3FullAccess:\nNhập AmazonS3FullAccess vào thanh tìm kiếm. Chọn chính sách AmazonS3FullAccess. Mô tả: Cấp quyền lưu tệp backup vào S3 (PutObject) và tạo pre-signed URL (GeneratePresignedUrl).\nHình 6: Chọn chính sách AmazonS3FullAccess.\nAmazonSESFullAccess:\nNhập AmazonSESFullAccess vào thanh tìm kiếm. Chọn chính sách AmazonSESFullAccess. Mô tả: Cấp quyền gửi email qua SES để thông báo link tải backup (ví dụ: đến nguyentribaothang@gmail.com).\nHình 7: Chọn chính sách AmazonSESFullAccess.\nAWSLambdaBasicExecutionRole:\nNhập AWSLambdaBasicExecutionRole vào thanh tìm kiếm. Chọn chính sách AWSLambdaBasicExecutionRole. Mô tả: Cho phép hàm Lambda ghi log vào CloudWatch để giám sát và gỡ lỗi.\nHình 8: Chọn chính sách AWSLambdaBasicExecutionRole.\nCloudFrontFullAccess:\nNhập CloudFrontFullAccess vào thanh tìm kiếm. Chọn chính sách CloudFrontFullAccess. Mô tả: Cấp quyền quản lý CloudFront distribution cho các tính năng mở rộng tiềm năng.\nHình 9: Chọn chính sách CloudFrontFullAccess.\nKiểm tra danh sách Permissions policies để đảm bảo có:\nAmazonDynamoDBFullAccess AmazonS3FullAccess AmazonSESFullAccess AWSLambdaBasicExecutionRole CloudFrontFullAccess Nhấn Next.\n6. Đặt Tên và Kiểm Tra Vai Trò Trong mục Role details:\nRole Name: Nhập DynamoDBBackupRole. Lưu ý: Tên phải chính xác để khớp với cấu hình hàm Lambda BackupDynamoDBAndSendEmail.\nDescription (tùy chọn): Nhập mô tả, ví dụ: \u0026ldquo;Vai trò IAM cho hàm Lambda BackupDynamoDBAndSendEmail, cấp quyền đọc và ghi DynamoDB, lưu S3, gửi email SES, ghi log CloudWatch, và hỗ trợ CloudFront.\u0026rdquo; Hình 10: Nhập tên và mô tả vai trò.\nKiểm tra lại:\nTrusted entity: AWS Service (Lambda). Permissions: AmazonDynamoDBFullAccess, AmazonS3FullAccess, AmazonSESFullAccess, AWSLambdaBasicExecutionRole, CloudFrontFullAccess. Nhấn Create Role (Tạo Vai trò).\nHình 11: Nút Create Role để xác nhận.\n7. Kiểm Tra Trạng Thái Tạo Vai Trò Sau khi nhấn Create Role, bạn sẽ trở về danh sách Roles. Tìm vai trò DynamoDBBackupRole. Nếu thành công, bạn sẽ thấy thông báo: \u0026ldquo;Role DynamoDBBackupRole created\u0026rdquo;. Nhấp vào DynamoDBBackupRole để xem chi tiết: ARN: Ghi lại ARN (ví dụ: arn:aws:iam::your-account-id:role/DynamoDBBackupRole) để sử dụng khi cấu hình hàm Lambda. Policies: Xác minh có AmazonDynamoDBFullAccess, AmazonS3FullAccess, AmazonSESFullAccess, AWSLambdaBasicExecutionRole, CloudFrontFullAccess. Nếu vai trò không xuất hiện, làm mới trang hoặc kiểm tra lại các bước. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Tên vai trò Phải là DynamoDBBackupRole (phân biệt chữ hoa/thường) để khớp với hàm Lambda. Tên sai sẽ gây lỗi khi thực thi. CloudFront CloudFrontFullAccess không được sử dụng hiện tại nhưng giữ lại cho các tính năng mở rộng. Xóa nếu không cần để tuân thủ least privilege. S3 và SES Đảm bảo bucket S3 (ví dụ: student-backup-20250706) tồn tại và email nguồn (ví dụ: nguyentribaothang@gmail.com) đã được xác minh trong SES. Kiểm tra sớm Ghi lại ARN và kiểm tra vai trò trong IAM trước khi cấu hình hàm Lambda để đảm bảo hoạt động đúng. Xử lý lỗi Nếu gặp lỗi \u0026ldquo;Access Denied\u0026rdquo;, kiểm tra quyền tài khoản AWS (iam:CreateRole, iam:AttachRolePolicy) hoặc liên hệ quản trị viên. Nếu hàm báo lỗi AccessDenied, kiểm tra chính sách S3 hoặc SES. Dùng CloudTrail hoặc IAM Access Advisor để xác định vấn đề. Vùng AWS Đảm bảo vùng AWS (ví dụ: us-east-1) nhất quán với các dịch vụ (DynamoDB, Lambda, SES, S3). Kiểm tra ở góc trên bên phải AWS Console. Mẹo thực tiễn: Kiểm tra bucket S3 và trạng thái xác minh email trong SES trước khi chạy hàm Lambda để tránh lỗi AccessDenied.\nKết Luận Vai trò IAM DynamoDBBackupRole đảm bảo hàm Lambda BackupDynamoDBAndSendEmail có quyền đọc và ghi dữ liệu vào DynamoDB, lưu tệp vào S3, gửi email qua SES, và ghi log vào CloudWatch, đồng thời hỗ trợ mở rộng với CloudFront. Vai trò này sẵn sàng tích hợp vào hàm Lambda trong các bước tiếp theo.\nBước tiếp theo: Chuyển đến Tạo bảng trong DynamoDB để thiết lập bảng dữ liệu!\n"
},
{
	"uri": "/vi/7-deploying-cloudfront/7.3-creating-cloudfront-invalidation/",
	"title": "Tạo Invalidation để Làm Mới Nội Dung Cache",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo Invalidation cho CloudFront Distribution StudentWebsiteDistribution (mục 7.1) để làm mới nội dung cache, đảm bảo các tệp tĩnh (index.html, styles.css, scripts.js, mục 6.2) từ S3 Bucket student-management-website-2025 được cập nhật trên domain CloudFront (VD: https://d12345678.cloudfront.net). Điều này giúp người dùng thấy phiên bản mới nhất của giao diện web khi các tệp được sửa đổi, đồng thời duy trì tích hợp với API student (stage prod, mục 4.8) để thực hiện các chức năng như lưu, xem, và sao lưu dữ liệu. Sau khi tạo invalidation, kiểm tra trạng thái Deploying và giao diện qua Distribution domain name.\nTổng Quan về Invalidation Vai trò của Invalidation: CloudFront lưu cache nội dung tại các edge locations để tăng tốc độ tải, nhưng khi các tệp trong S3 (index.html, styles.css, scripts.js) được cập nhật, cache cũ có thể khiến người dùng thấy phiên bản lỗi thời. Invalidation yêu cầu CloudFront xóa cache và lấy phiên bản mới từ S3, đảm bảo giao diện web phản ánh các thay đổi. Sử dụng đường dẫn /* để làm mới toàn bộ nội dung cache trong distribution, phù hợp khi cập nhật nhiều tệp hoặc không xác định được tệp cụ thể. Tích hợp với hệ thống: CloudFront phân phối các tệp tĩnh từ S3 Bucket student-management-website-2025 (mục 6.1–6.4) thông qua Origin Access Identity (OAI) (mục 7.1), với index.html là Default Root Object (mục 7.2). Giao diện web gọi API student (mục 4.8) với Invoke URL (VD: https://abc123.execute-api.us-east-1.amazonaws.com/prod) và StudentApiKey (mục 4.2). Các chức năng: POST /students: Lưu bản ghi vào DynamoDB studentData và gửi email qua SES. GET /students: Hiển thị dữ liệu trong bảng. POST /backup: Tạo tệp trong S3 Bucket student-backup-20250706 (mục 6.5) và gửi email thông báo. CORS được cấu hình (mục 4.7) để hỗ trợ yêu cầu từ domain CloudFront (VD: https://d12345678.cloudfront.net). Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 7.1 (tạo CloudFront Distribution StudentWebsiteDistribution), mục 7.2 (cấu hình Default Root Object), mục 6.1 (tạo bucket student-management-website-2025), mục 6.2 (tải lên index.html, styles.css, scripts.js), mục 6.3 (bật Static Website Hosting), mục 6.4 (cấu hình Bucket Policy), mục 6.5 (cấu hình bucket student-backup-20250706), mục 5 (xây dựng giao diện web), mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), mục 4.6 (tạo resource /backup và phương thức POST /backup), mục 4.7 (kích hoạt CORS), mục 4.8 (triển khai API lên stage prod), mục 4.9 (gắn StudentApiKey vào StudentUsagePlan). Đảm bảo tài khoản AWS có quyền cloudfront:CreateInvalidation, s3:GetObject, và vùng AWS là us-east-1 cho các dịch vụ liên quan.\nHành Động Chi Tiết Truy Cập AWS Management Console\nĐăng nhập vào AWS Management Console bằng tài khoản AWS. Trong thanh tìm kiếm, nhập CloudFront và chọn dịch vụ Amazon CloudFront. Kiểm tra vùng AWS: CloudFront là dịch vụ toàn cầu, nhưng đảm bảo S3 Bucket student-management-website-2025, API student, Lambda, DynamoDB, và SES ở us-east-1.\nHình 1: Giao diện AWS Console với thanh tìm kiếm CloudFront. Chọn CloudFront Distribution\nTrong CloudFront \u0026gt; Distributions, tìm và chọn distribution có tên StudentWebsiteDistribution (tạo ở mục 7.1). Nhận diện: Distribution có ID bắt đầu bằng E... và Domain name dạng d12345678.cloudfront.net. Nhấn vào ID hoặc tên distribution để vào giao diện chi tiết. Kiểm tra trạng thái: Đảm bảo distribution ở trạng thái Enabled. Nếu vẫn là In Progress, chờ 5–15 phút để triển khai hoàn tất (mục 7.1).\nHình 2: Chọn CloudFront Distribution. Truy Cập Tab Invalidations\nTrong giao diện chi tiết của StudentWebsiteDistribution, chọn tab Invalidations (thường nằm ở đầu trang, bên cạnh General, Behaviors, v.v.). Tab Invalidations hiển thị danh sách các invalidation đã tạo (nếu có), với các cột như ID, Status (In Progress hoặc Completed), và Last modified. Tạo Invalidation\nTrong tab Invalidations, nhấn nút Create invalidation.\nHình 3: Nút Create invalidation trong tab Invalidations. Trong giao diện Create invalidation, tại trường Add object paths, nhập /*. Lý do: Đường dẫn /* yêu cầu CloudFront làm mới toàn bộ nội dung cache trong distribution, đảm bảo tất cả các tệp (index.html, styles.css, scripts.js) được lấy phiên bản mới nhất từ S3. Phù hợp khi cập nhật nhiều tệp hoặc không xác định được tệp cụ thể đã thay đổi (VD: sau khi tải lên phiên bản mới của styles.css hoặc scripts.js trong mục 6.2). Tùy chọn: Nếu chỉ cập nhật một tệp, nhập đường dẫn cụ thể (VD: /index.html, /styles.css) để giảm chi phí invalidation. Nhấn Create invalidation.\nHình 4: Cấu hình đường dẫn / cho invalidation.* Kết quả mong đợi: CloudFront tạo invalidation mới, hiển thị trong tab Invalidations với trạng thái In Progress và thông báo \u0026ldquo;Successfully created invalidation\u0026rdquo;.\nHình 5: Thông báo tạo invalidation thành công. Kiểm Tra Trạng Thái Invalidation\nTrong tab Invalidations, kiểm tra cột Last modified của invalidation vừa tạo. Trạng thái ban đầu: In Progress (CloudFront đang xóa cache tại các edge locations, mất 1–5 phút).\nHình 6: Trạng thái In Progress của invalidation. Trạng thái hoàn tất: Completed (cache đã được làm mới, nội dung mới sẵn sàng).\nHình 7: Trạng thái Completed của invalidation. Xử lý lỗi: Invalidation không tạo được: Kiểm tra vai trò IAM có quyền cloudfront:CreateInvalidation: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;cloudfront:CreateInvalidation\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:cloudfront::\u0026lt;AWS_ACCOUNT_ID\u0026gt;:distribution/\u0026lt;DISTRIBUTION_ID\u0026gt;\u0026#34; } ] } Thay \u0026lt;AWS_ACCOUNT_ID\u0026gt; và \u0026lt;DISTRIBUTION_ID\u0026gt; bằng giá trị thực (tìm trong CloudFront \u0026gt; Distributions). Trạng thái không chuyển sang Completed: Chờ thêm 5–10 phút, vì thời gian xử lý phụ thuộc vào số lượng edge locations. Tạo lại invalidation nếu cần. Truy Cập Distribution Domain Name để Kiểm Tra\nTrong CloudFront \u0026gt; Distributions, sao chép Distribution domain name của StudentWebsiteDistribution (VD: https://d12345678.cloudfront.net). Mở trình duyệt và truy cập URL này. Kết quả mong đợi: Giao diện web hiển thị phiên bản mới nhất của index.html, styles.css, và scripts.js (nếu đã cập nhật trong S3, mục 6.2). Biểu mẫu nhập liệu, bảng sinh viên, và các nút chức năng (Lưu, Xem, Backup) hiển thị đúng, sử dụng Tailwind CSS và font Poppins. Ví dụ kiểm tra: Tải lên phiên bản mới của styles.css (VD: đổi màu gradient) hoặc index.html (VD: thêm trường mới) vào S3 Bucket student-management-website-2025 (mục 6.2). Tạo invalidation với /*. Truy cập CloudFront URL và xác minh giao diện phản ánh thay đổi (VD: gradient mới hoặc trường mới hiển thị).\nHình 8: Giao diện web qua CloudFront sau invalidation. Kiểm Tra Giao Diện và Chức Năng API\nKiểm tra giao diện web qua CloudFront URL (VD: https://d12345678.cloudfront.net): Giao diện hiển thị: Biểu mẫu nhập liệu (hỗ trợ các trường studentid, name, class, birthdate, email) hoạt động đúng. Bảng sinh viên hiển thị dữ liệu từ API GET /students. Các nút chức năng (Lưu, Xem, Backup) hoạt động, sử dụng Tailwind CSS và font Poppins. Chức năng API: Lưu dữ liệu sinh viên: Nhập dữ liệu vào biểu mẫu, nhấn Lưu, kiểm tra bản ghi được lưu vào DynamoDB studentData và nhận email xác nhận qua SES. curl -X POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/students \\ -H \u0026#34;x-api-key: xxxxxxxxxxxxxxxxxxxx\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;studentid\u0026#34;:\u0026#34;SV005\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Pham Thi E\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;CNTT05\u0026#34;,\u0026#34;birthdate\u0026#34;:\u0026#34;2001-05-05\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;student5@example.com\u0026#34;}\u0026#39; Xem danh sách sinh viên: Nhấn Xem, kiểm tra bảng hiển thị dữ liệu từ API GET /students. curl -X GET https://abc123.execute-api.us-east-1.amazonaws.com/prod/students \\ -H \u0026#34;x-api-key: xxxxxxxxxxxxxxxxxxxx\u0026#34; Backup dữ liệu: Nhấn Backup, kiểm tra tệp được tạo trong S3 Bucket student-backup-20250706 và nhận email thông báo qua SES. curl -X POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/backup \\ -H \u0026#34;x-api-key: xxxxxxxxxxxxxxxxxxxx\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; Xử lý lỗi: Nội dung không cập nhật: Kiểm tra trạng thái invalidation là Completed trong tab Invalidations. Tạo lại invalidation với /* nếu cần. Xác minh tệp mới (index.html, styles.css, scripts.js) được tải lên S3 đúng cách (mục 6.2). Kiểm tra Bucket Policy (mục 7.1) cho phép OAI truy cập: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowCloudFrontOAI\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity \u0026lt;OAI_ID\u0026gt;\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-management-website-2025/*\u0026#34; } ] } Lỗi 403 Forbidden: Kiểm tra OAI (mục 7.1) được cấu hình đúng trong CloudFront và Bucket Policy của S3. Đảm bảo index.html, styles.css, scripts.js được tải lên S3 (mục 6.2). Xác minh Block public access được bật (trừ Block public access for bucket policies) trong S3 (mục 7.1). Lỗi 404 Not Found: Kiểm tra Default Root Object là index.html (mục 7.2). Xác minh Static Website Hosting (mục 6.3) bật với index.html làm Index document trong S3. Giao diện hiển thị sai: Mở Developer Tools \u0026gt; Console để kiểm tra lỗi tải styles.css hoặc scripts.js. Kiểm tra đường dẫn trong index.html (VD: \u0026lt;link href=\u0026quot;styles.css\u0026quot;\u0026gt;, \u0026lt;script src=\u0026quot;scripts.js\u0026quot;\u0026gt;) khớp với cấu trúc thư mục trong S3. Lỗi CORS khi gọi API: Kiểm tra cấu hình CORS trong API Gateway (mục 4.7) có Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Đảm bảo scripts.js gửi yêu cầu API với đúng Invoke URL (VD: https://abc123.execute-api.us-east-1.amazonaws.com/prod) và header x-api-key: \u0026lt;StudentApiKey\u0026gt;. Lỗi 403/429 khi gọi API: 403: Kiểm tra StudentApiKey và StudentUsagePlan (mục 4.9). 429: Kiểm tra giới hạn Rate/Burst/Quota trong StudentUsagePlan (mục 4.3). Lưu Ý Quan Trọng Yếu Tố Chi Tiết Bảo mật Đảm bảo Bucket Policy chỉ cho phép OAI truy cập S3 (mục 7.1). Tránh nhúng StudentApiKey trong scripts.js. Sử dụng CloudFront Functions để thêm header x-api-key: javascript \u0026lt;br\u0026gt; function handler(event) { \u0026lt;br\u0026gt; var request = event.request; \u0026lt;br\u0026gt; request.headers['x-api-key'] = { value: 'xxxxxxxxxxxxxxxxxxxx' }; \u0026lt;br\u0026gt; return request; \u0026lt;br\u0026gt; } \u0026lt;br\u0026gt; Tối ưu hóa Bật CloudFront Standard Logs để theo dõi truy cập: Trong CloudFront \u0026gt; Distribution \u0026gt; General \u0026gt; Logging, chọn On, chỉ định bucket log (VD: student-web-logs-20250706). Sử dụng AWS CLI để tự động hóa invalidation: bash \u0026lt;br\u0026gt; aws cloudfront create-invalidation --distribution-id \u0026lt;DISTRIBUTION_ID\u0026gt; --paths \u0026quot;/*\u0026quot; \u0026lt;br\u0026gt; Tích hợp với hệ thống Cập nhật CORS trong API Gateway (mục 4.7) với Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Đảm bảo endpoint POST /students, GET /students, POST /backup hoạt động với Invoke URL và StudentApiKey. Kiểm tra tích hợp Truy cập CloudFront URL (https://d12345678.cloudfront.net) và kiểm tra: - POST /students: Lưu bản ghi, gửi email SES. - GET /students: Hiển thị bảng. - POST /backup: Tạo tệp trong student-backup-20250706, gửi email. Sử dụng Developer Tools \u0026gt; Network để kiểm tra yêu cầu API. Xử lý lỗi Nội dung không cập nhật: Kiểm tra trạng thái invalidation, tệp S3, Bucket Policy. 403 Forbidden: Kiểm tra OAI, Bucket Policy, quyền s3:GetObject. 404 Not Found: Xác minh index.html là Default Root Object, tệp tồn tại trong S3. CORS: Kiểm tra header Access-Control-Allow-Origin trong Lambda (mục 3) và API Gateway (mục 4.7). 429: Kiểm tra giới hạn Rate/Burst/Quota trong StudentUsagePlan (mục 4.3). Mẹo thực tiễn: Tạo invalidation mỗi khi cập nhật tệp trong S3. Kiểm tra CloudFront URL ngay sau khi trạng thái invalidation là Completed. Sử dụng AWS CLI để tự động hóa: aws cloudfront create-invalidation --distribution-id \u0026lt;DISTRIBUTION_ID\u0026gt; --paths \u0026quot;/*\u0026quot;.\nKết Luận Invalidation đã được tạo cho CloudFront Distribution StudentWebsiteDistribution, đảm bảo nội dung cache được làm mới và giao diện web hiển thị phiên bản mới nhất từ S3. Hệ thống tích hợp với API student sẵn sàng hoạt động.\nBước tiếp theo: \u0026gt; Chuyển đến Thiết lập Backup hệ thống để bắt đầu triển khai Backup hệ thống!\n"
},
{
	"uri": "/vi/3-creating-lambda-functions/",
	"title": "Tạo Lambda Functions",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo và cấu hình ba hàm Lambda trong AWS để hỗ trợ các chức năng chính của hệ thống quản lý thông tin sinh viên:\ngetStudentData: Truy xuất toàn bộ dữ liệu sinh viên từ bảng DynamoDB studentData. insertStudentData: Lưu thông tin sinh viên vào bảng DynamoDB và gửi email xác nhận qua SES. BackupDynamoDBAndSendEmail: Sao lưu dữ liệu từ bảng DynamoDB vào S3 và gửi email thông báo chứa link tải tệp backup. Mỗi hàm sẽ được tạo thông qua AWS Management Console, sử dụng ngôn ngữ lập trình Python 3.12 (hoặc phiên bản mới nhất được hỗ trợ), gán IAM Role tương ứng (đã tạo ở các mục 2.1, 2.2, 2.3) và cấu hình để tích hợp với các dịch vụ AWS khác (DynamoDB, SES, S3). Các bước dưới đây đảm bảo người học có thể triển khai các hàm một cách dễ dàng, đồng thời tối ưu hóa hiệu suất và bảo mật.\nYêu Cầu Ban Đầu Bạn cần hoàn thành các bước chuẩn bị ở mục 2 (IAM Roles, bảng DynamoDB, SES) trước khi tạo các hàm Lambda. Đảm bảo tài khoản AWS đã sẵn sàng.\nCác Bước Cấu Hình Dưới đây là các bước cụ thể để cấu hình các hàm Lambda:\nBước Nội Dung Mô Tả 3.1 Tạo hàm getStudentData Tạo hàm Lambda để truy xuất toàn bộ dữ liệu sinh viên từ bảng DynamoDB studentData sử dụng thao tác Scan. 3.2 Tạo hàm insertStudentData Tạo hàm Lambda để lưu thông tin sinh viên vào bảng DynamoDB studentData và gửi email xác nhận qua SES. 3.3 Tạo hàm BackupDynamoDBAndSendEmail Tạo hàm Lambda để sao lưu dữ liệu từ bảng DynamoDB studentData vào S3 và gửi email thông báo chứa pre-signed URL. Lưu ý: Thực hiện các bước theo thứ tự để đảm bảo các hàm được cấu hình chính xác. Mỗi bước sẽ được hướng dẫn chi tiết trong các tài liệu tương ứng.\nKết Luận Hoàn thành các bước cấu hình này, bạn sẽ có:\nHàm getStudentData để truy xuất dữ liệu sinh viên. Hàm insertStudentData để lưu trữ và gửi email xác nhận. Hàm BackupDynamoDBAndSendEmail để sao lưu dữ liệu và gửi thông báo. Sẵn sàng tiếp tục?\nChuyển đến Tạo hàm getStudentData để bắt đầu cấu hình hàm Lambda đầu tiên!\n"
},
{
	"uri": "/vi/4-creating-a-restful-api/4.3-creating-a-usage-plan/",
	"title": "Thiết lập Usage Plan (Kế hoạch sử dụng)",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo một Usage Plan có tên StudentUsagePlan trong AWS API Gateway để kiểm soát và giới hạn truy cập vào API student (tạo ở mục 4.1) thông qua API Key StudentApiKey (tạo ở mục 4.2). Usage Plan sẽ áp dụng giới hạn tốc độ (Rate: 5 yêu cầu/giây, Burst: 10 yêu cầu) và quota (1000 yêu cầu/ngày), đảm bảo kiểm soát chi phí, ngăn chặn lạm dụng, và bảo mật các endpoint (GET /students, POST /students, POST /backup) khi được gọi từ giao diện web (chạy trên CloudFront).\nTổng Quan về Usage Plan trong API Gateway Usage Plan là cơ chế của API Gateway để quản lý cách client sử dụng API thông qua API Key, bao gồm: Rate Limiting: Giới hạn số yêu cầu mỗi giây (Rate) và số yêu cầu đồng thời tối đa (Burst). Quota: Giới hạn tổng số yêu cầu trong một khoảng thời gian (ví dụ: ngày, tuần, tháng). Trong hệ thống này, StudentUsagePlan sẽ: Liên kết với API Key StudentApiKey để xác thực yêu cầu. Áp dụng cho API student và stage (ví dụ: prod, sẽ tạo ở mục 4.8). Đảm bảo giao diện web chỉ gửi yêu cầu hợp lệ với API Key trong giới hạn định sẵn. Usage Plan giúp bảo vệ API khỏi các cuộc tấn công lạm dụng (như DDoS) và kiểm soát chi phí sử dụng API Gateway. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), và mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập API Gateway và chọn dịch vụ Amazon API Gateway để vào giao diện quản lý.\nKiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng AWS chính (ví dụ: us-east-1), kiểm tra vùng ở góc trên bên phải AWS Console. Vùng này phải khớp với API student (tạo ở mục 4.1) và các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail).\nHình 1: Giao diện AWS Console với thanh tìm kiếm API Gateway.\nĐiều Hướng Đến Mục Usage Plans\nTrong giao diện chính của Amazon API Gateway, nhìn vào menu điều hướng bên trái.\nChọn Usage Plans để xem danh sách các Usage Plan hiện có. Nếu bạn chưa tạo plan nào, danh sách sẽ trống.\nGiao diện sẽ hiển thị các tùy chọn để tạo hoặc quản lý Usage Plan.\nHình 2: Menu điều hướng với tùy chọn Usage Plans.\nKhởi Tạo Quá Trình Tạo Usage Plan\nTrong giao diện Usage Plans, nhấn nút Create (hoặc Create usage plans tùy phiên bản Console) ở góc trên bên phải để bắt đầu cấu hình Usage Plan mới.\nHình 3: Nút Create trong giao diện Usage Plans.\nCấu Hình Usage Plan\nTrong mục Create Usage Plan:\nName: Nhập chính xác StudentUsagePlan. Tên này giúp bạn dễ dàng nhận diện plan khi liên kết với API Key và stage. Description: Nhập Usage Plan để kiểm soát truy cập vào StudentManagementAPI (hoặc mô tả tương tự để rõ ràng mục đích). Enable throttling: Chọn để bật giới hạn tốc độ. Rate: Nhập 5 (5 yêu cầu/giây). Burst: Nhập 10 (10 yêu cầu đồng thời tối đa). Giải thích: Rate giới hạn số yêu cầu mỗi giây mà client (với API Key) có thể gửi. Burst giới hạn số yêu cầu đồng thời tối đa để xử lý các đợt yêu cầu đột biến. Giá trị này phù hợp với ứng dụng quy mô nhỏ như hệ thống quản lý sinh viên. Hình 4: Giao diện cấu hình Usage Plan.\nEnable quota: Chọn để bật giới hạn quota. Quota: Nhập 1000 và chọn requests per Day (1000 yêu cầu/ngày). Giải thích: Quota giới hạn tổng số yêu cầu hàng ngày, giúp kiểm soát chi phí và ngăn lạm dụng. Giữ các thiết lập khác ở giá trị mặc định (ví dụ: không bật Enable usage plan metrics trừ khi bạn cần theo dõi chi tiết). Nhấn Next để tiếp tục.\nHình 5: Nhấn nút tạo.\nKiểm Tra Trạng Thái Tạo Usage Plan\nSau khi nhấn Create, bạn sẽ thấy thông báo: \u0026ldquo;Successfully created usage plan ‘StudentUsagePlan’.\u0026rdquo;\nTrong danh sách Usage Plans, chọn StudentUsagePlan để xem chi tiết.\nXác minh:\nThrottling: Rate = 5 yêu cầu/giây, Burst = 10 yêu cầu. Quota: 1000 yêu cầu/ngày. API Keys: StudentApiKey đã được liên kết. Nếu không thấy thông báo hoặc gặp lỗi:\nKiểm tra quyền IAM của tài khoản AWS có bao gồm apigateway:POST để tạo Usage Plan. Đảm bảo bạn đang ở đúng vùng AWS (us-east-1). Làm mới trang hoặc kiểm tra lại danh sách Usage Plans. Hình 6: Trang chi tiết Usage Plan sau khi tạo.\nLưu Ý Quan Trọng Yếu Tố Chi Tiết Liên kết với Stage Usage Plan sẽ được liên kết với stage prod của API student ở mục 4.9. Sau khi deploy API (mục 4.8), bạn cần quay lại StudentUsagePlan để thêm API student và stage prod. - Trong Associated APIs and Stages, chọn Add API Stage, chọn API student và stage prod. Bảo mật API Key Đảm bảo StudentApiKey đã được sao chép và lưu an toàn (mục 4.2). Không nhúng API Key trực tiếp trong mã JavaScript của giao diện web. Sử dụng biến môi trường hoặc AWS Secrets Manager: - Vào AWS Secrets Manager \u0026gt; Store a new secret \u0026gt; Chọn Other type of secret \u0026gt; Nhập API Key. - Đặt tên bí mật (ví dụ: student-api-key) và truy xuất trong giao diện web qua AWS SDK. Giới hạn Rate và Quota Rate: 5 yêu cầu/giây và Burst: 10 yêu cầu phù hợp cho ứng dụng quy mô nhỏ. Nếu cần phục vụ nhiều người dùng hơn, tăng giá trị (ví dụ: Rate = 100, Burst = 200). Quota: 1000 yêu cầu/ngày đủ cho thử nghiệm. Nếu cần, tăng quota (ví dụ: 10,000 yêu cầu/ngày) trong môi trường production. Xử lý lỗi Nếu gặp lỗi \u0026ldquo;AccessDenied\u0026rdquo;: - Kiểm tra quyền IAM của tài khoản AWS (apigateway:POST, apigateway:PUT để tạo và liên kết Usage Plan). - Đảm bảo API Key StudentApiKey tồn tại (mục 4.2). Nếu client nhận lỗi 429 \u0026quot;Too Many Requests\u0026quot; khi gọi API, kiểm tra: - Yêu cầu vượt quá Rate hoặc Burst. - Quota 1000 yêu cầu/ngày đã bị sử dụng hết (xem trong Usage Plans \u0026gt; Usage). Nếu Usage Plan không hiển thị, làm mới trang hoặc kiểm tra lại vùng AWS. Tối ưu hóa - Bật CloudWatch Metrics cho Usage Plan để theo dõi số lượng yêu cầu: - Trong StudentUsagePlan, chọn Enable usage plan metrics. - Kiểm tra trong CloudWatch \u0026gt; Metrics \u0026gt; API Gateway \u0026gt; UsagePlanId. - Cân nhắc sử dụng AWS WAF với API Gateway để bảo vệ khỏi các cuộc tấn công DDoS hoặc lạm dụng API Key. - Nếu cần nhiều client (ví dụ: nhiều ứng dụng web), tạo thêm API Key và liên kết với cùng StudentUsagePlan. Kiểm tra sớm - Sau khi tạo StudentUsagePlan, xác minh plan xuất hiện trong danh sách Usage Plans và StudentApiKey được liên kết. - Sau khi deploy API (mục 4.8), kiểm tra Usage Plan bằng cách gọi endpoint với API Key sử dụng Postman hoặc curl. - Nếu nhận lỗi 403 \u0026quot;Forbidden\u0026quot;, kiểm tra API Key có được liên kết với Usage Plan và method có yêu cầu API Key Required: true (mục 4.4, 4.5, 4.6). Kiểm tra tích hợp với giao diện web Sau khi liên kết Usage Plan với stage prod (mục 4.9), sử dụng API Key trong giao diện web để gọi các endpoint (GET /students, POST /students, POST /backup). Mẹo thực tiễn: Xác minh StudentUsagePlan được cấu hình đúng với Rate, Burst, và Quota trước khi liên kết với stage prod. Kiểm tra số lượng yêu cầu qua CloudWatch sau khi thử nghiệm API.\nKết Luận Usage Plan StudentUsagePlan đã được tạo thành công trong AWS API Gateway, áp dụng giới hạn Rate (5 yêu cầu/giây), Burst (10 yêu cầu), và Quota (1000 yêu cầu/ngày), sẵn sàng để liên kết với API student và stage prod.\nBước tiếp theo: Chuyển đến Tạo phương thức GET để truy xuất dữ liệu để tiếp tục!\n"
},
{
	"uri": "/vi/6-configuring-s3-buckets/6.4-setting-bucket-policy-for-public-access/",
	"title": "Cấu Hình Bucket Policy để Cho Phép Truy Cập Công Khai",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Cấu hình Bucket Policy cho S3 Bucket student-management-website-2025 để cho phép truy cập công khai (s3:GetObject) tới các tệp tĩnh (index.html, styles.css, scripts.js từ mục 6.2). Điều này đảm bảo giao diện web tĩnh (được bật Static Website Hosting ở mục 6.3) có thể được truy cập qua endpoint S3 hoặc CloudFront (mục 7). Bucket Policy cho phép mọi người (Principal: *) đọc các tệp, hỗ trợ tích hợp với API student (stage prod, mục 4.8) để gọi các endpoint GET /students, POST /students, và POST /backup với bảo mật API Key (StudentApiKey, mục 4.2) và CORS (mục 4.7).\nTổng Quan về Bucket Policy Vai trò của Bucket Policy: Cấp quyền truy cập công khai (s3:GetObject) để trình duyệt hoặc CloudFront đọc các tệp tĩnh (index.html, styles.css, scripts.js). Đảm bảo endpoint Static Website Hosting (VD: http://student-management-website-2025.s3-website-us-east-1.amazonaws.com) phục vụ giao diện web đúng cách. Chuẩn bị cho tích hợp với CloudFront, cung cấp HTTPS và hiệu suất cao. Tích hợp với hệ thống: Giao diện web gọi API student (mục 4.8) sử dụng Invoke URL (VD: https://abc123.execute-api.us-east-1.amazonaws.com/prod) và StudentApiKey trong header x-api-key. Các chức năng bao gồm: POST /students: Lưu bản ghi vào DynamoDB studentData và gửi email xác nhận qua SES. GET /students: Hiển thị dữ liệu trong bảng. POST /backup: Tạo tệp backup trong S3 Bucket student-backup-20250706 (mục 2.4, 6.5) và gửi email thông báo qua SES. CORS được cấu hình (mục 4.7) để hỗ trợ yêu cầu từ domain CloudFront (VD: https://d12345678.cloudfront.net). Lý do cấp quyền công khai: Static Website Hosting yêu cầu các tệp trong bucket có thể truy cập công khai để trình duyệt hoặc CloudFront tải nội dung. Quyền s3:GetObject được cấp cho Principal: * (mọi người) để đơn giản hóa, nhưng có thể giới hạn với CloudFront OAI (xem Lưu ý) để tăng bảo mật. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 6.1 (tạo bucket student-management-website-2025), mục 6.2 (tải lên index.html, styles.css, scripts.js), mục 6.3 (bật Static Website Hosting), mục 5 (xây dựng giao diện web), mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), mục 4.6 (tạo resource /backup và phương thức POST /backup), mục 4.7 (kích hoạt CORS), mục 4.8 (triển khai API lên stage prod), mục 4.9 (gắn StudentApiKey vào StudentUsagePlan), mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS có quyền s3:PutBucketPolicy và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn. Trong thanh tìm kiếm ở đầu trang, nhập S3 và chọn dịch vụ Amazon S3 để vào giao diện quản lý bucket. Kiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng us-east-1 (US East (N. Virginia)) để đồng bộ với bucket student-management-website-2025, API student, các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), bảng DynamoDB studentData, bucket student-backup-20250706, và SES. Vùng được hiển thị ở góc trên bên phải AWS Console.\nHình 1: Giao diện AWS Console với thanh tìm kiếm S3. Chọn Bucket student-management-website-2025\nTrong giao diện chính của Amazon S3 \u0026gt; Buckets, tìm và chọn bucket student-management-website-2025 (tạo ở mục 6.1). Nếu không thấy bucket: Kiểm tra vùng AWS (us-east-1) và làm mới trang. Xác minh bucket đã được tạo với tên chính xác (tên bucket là duy nhất toàn cầu, có thể bạn đã dùng tên khác như student-management-website-20250706-abc123). Nhấn vào tên bucket để vào giao diện quản lý bucket.\nHình 2: Chọn bucket student-management-website-2025. Truy Cập Tab Permissions\nTrong giao diện của bucket student-management-website-2025, chọn tab Permissions (thường nằm ở đầu trang, bên cạnh Objects, Properties, v.v.). Cuộn xuống phần Bucket policy để xem trạng thái hiện tại (mặc định là trống nếu chưa cấu hình).\nHình 3: Tab Permissions và phần Bucket policy. Chỉnh Sửa Bucket Policy\nTrong phần Bucket policy, nhấn nút Edit để mở giao diện chỉnh sửa. Kiểm tra trước khi chỉnh sửa: Đảm bảo Block all public access đã bỏ chọn (mục 6.1) để cho phép cấu hình quyền công khai. Xác minh các tệp index.html, styles.css, scripts.js đã được tải lên (mục 6.2) và Static Website Hosting đã bật với index.html làm Index document (mục 6.3).\nHình 4: Nhấn Edit trong Bucket policy. Chỉnh Sửa Mã Bucket Policy\nTrong giao diện Edit bucket policy, xóa nội dung hiện có (nếu có) và dán mã JSON sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-management-website-2025/*\u0026#34; } ] } Giải thích mã JSON: Version: \u0026ldquo;2012-10-17\u0026rdquo; là phiên bản định dạng chính sách IAM mới nhất. Statement: Danh sách các chính sách quyền. Sid: \u0026ldquo;PublicReadGetObject\u0026rdquo; là tên tùy chọn để nhận diện chính sách. Effect: \u0026ldquo;Allow\u0026rdquo; cho phép hành động được chỉ định. Principal: \u0026ldquo;*\u0026rdquo; cho phép mọi người (bao gồm trình duyệt và CloudFront) truy cập. Action: \u0026ldquo;s3:GetObject\u0026rdquo; cho phép đọc các tệp trong bucket. Resource: \u0026ldquo;arn:aws:s3:::student-management-website-2025/*\u0026rdquo; chỉ định tất cả các tệp trong bucket student-management-website-2025. Kiểm tra mã: Đảm bảo tên bucket trong Resource khớp với student-management-website-2025.\nHình 5: Cấu hình Bucket Policy. Lưu Thay Đổi\nNhấn Save changes để áp dụng Bucket Policy. Kết quả mong đợi: AWS S3 hiển thị thông báo \u0026ldquo;Successfully edited bucket policy\u0026rdquo;.\nHình 6: Nhấn Save changes. Xử lý lỗi: \u0026ldquo;Policy has invalid resource\u0026rdquo;: Kiểm tra ARN trong Resource đúng cú pháp (arn:aws:s3:::student-management-website-2025/*). \u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra vai trò IAM của tài khoản có quyền s3:PutBucketPolicy: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutBucketPolicy\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-management-website-2025\u0026#34; } ] } Đảm bảo Block all public access đã bỏ chọn (mục 6.1). Kiểm Tra Truy Cập Website\nTrở lại tab Properties \u0026gt; Static website hosting trong bucket student-management-website-2025. Sao chép Bucket website endpoint (VD: http://student-management-website-2025.s3-website-us-east-1.amazonaws.com).\nHình 7: Bucket website endpoint. Mở trình duyệt và truy cập endpoint này. Kết quả mong đợi: Giao diện web hiển thị với biểu mẫu nhập liệu, bảng sinh viên, và các nút chức năng (Lưu, Xem, Backup) sử dụng Tailwind CSS và font Poppins. Các tệp styles.css và scripts.js được tải đúng, giao diện hiển thị chính xác.\nHình 8: Giao diện web hiển thị qua endpoint S3. Lưu ý: Các yêu cầu API (GET /students, POST /students, POST /backup) có thể gặp lỗi CORS vì endpoint S3 sử dụng HTTP và chưa tích hợp với CloudFront. Điều này sẽ được khắc phục khi cấu hình CloudFront (mục 7) và CORS trong API Gateway (mục 4.7). Endpoint S3 chỉ hỗ trợ HTTP. CloudFront sẽ cung cấp HTTPS và tăng tốc độ tải. Xử lý lỗi: Lỗi 403 Forbidden: Kiểm tra Bucket Policy đúng ARN (arn:aws:s3:::student-management-website-2025/*). Xác minh Block all public access đã bỏ chọn (mục 6.1). Đảm bảo các tệp index.html, styles.css, scripts.js được tải lên với quyền public-read (mục 6.2) hoặc được bao phủ bởi Bucket Policy. Lỗi 404 Not Found: Xác minh index.html đã được tải lên thư mục gốc (mục 6.2). Kiểm tra Static Website Hosting đã bật với index.html là Index document (mục 6.3). Giao diện hiển thị sai: Mở Developer Tools \u0026gt; Console trong trình duyệt để kiểm tra lỗi (VD: tệp CSS/JS không tải). Xác minh đường dẫn trong index.html (VD: \u0026lt;link href=\u0026quot;styles.css\u0026quot;\u0026gt;, \u0026lt;script src=\u0026quot;scripts.js\u0026quot;\u0026gt;). Lưu Ý Quan Trọng Yếu Tố Chi Tiết Bảo mật Quyền công khai (Principal: \u0026quot;*\u0026quot;) phù hợp cho kiểm tra ban đầu, nhưng không an toàn cho môi trường sản xuất. Sử dụng CloudFront Origin Access Identity (OAI): - Tạo OAI trong CloudFront \u0026gt; Origin access identities, gắn vào phân phối CloudFront (mục 7). - Bật lại Block public access (trừ Block public access for bucket policies) sau khi cấu hình OAI. - Tránh nhúng StudentApiKey trong scripts.js. Sử dụng AWS Secrets Manager hoặc CloudFront Functions: function handler(event) { var request = event.request; request.headers[\u0026lsquo;x-api-key\u0026rsquo;] = { value: \u0026lsquo;xxxxxxxxxxxxxxxxxxxx\u0026rsquo; }; return request; } Tối ưu hóa Bật S3 Access Logs: Trong S3 \u0026gt; student-management-website-2025 \u0026gt; Properties \u0026gt; Server access logging, chọn Enable, chỉ định bucket log (VD: student-web-logs-20250706). Sử dụng AWS CLI: aws s3api put-bucket-policy \u0026ndash;bucket student-management-website-2025 \u0026ndash;policy file://policy.json Tích hợp với hệ thống Tích hợp với CloudFront (mục 7): - Sử dụng Bucket website endpoint làm Origin. - Đặt Default root object: index.html. - Cấu hình Viewer protocol policy: Redirect HTTP to HTTPS. Cập nhật CORS trong API Gateway (mục 4.7) với Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Kiểm tra tích hợp Truy cập Bucket website endpoint để kiểm tra giao diện. Sau khi cấu hình CloudFront, truy cập CloudFront URL (https://d12345678.cloudfront.net) và kiểm tra: - POST /students: Lưu bản ghi vào DynamoDB studentData, gửi email SES. - GET /students: Hiển thị bảng. - POST /backup: Tạo tệp trong student-backup-20250706, gửi email. Sử dụng Developer Tools \u0026gt; Network để kiểm tra yêu cầu API. Xử lý lỗi 403 Forbidden: Kiểm tra Bucket Policy ARN, Block all public access (mục 6.1), quyền public-read của tệp (mục 6.2). 404 Not Found: Xác minh index.html ở thư mục gốc, Static Website Hosting bật đúng (mục 6.3). Giao diện sai: Kiểm tra Developer Tools \u0026gt; Console, đường dẫn trong index.html. CORS: Kiểm tra header Access-Control-Allow-Origin trong Lambda (mục 3.1, 3.2, 3.3) và API Gateway (mục 4.7). 429: Kiểm tra giới hạn Rate/Burst/Quota trong StudentUsagePlan (mục 4.3). Mẹo thực tiễn: Kiểm tra Bucket website endpoint ngay sau khi lưu Bucket Policy. Sử dụng AWS CLI để tự động hóa nếu cần áp dụng chính sách cho nhiều bucket. Chuẩn bị cho mục 7 (cấu hình CloudFront) để tăng bảo mật và hỗ trợ HTTPS.\nKết Luận Bucket Policy đã được cấu hình trên bucket student-management-website-2025, cho phép truy cập công khai (s3:GetObject) để phục vụ giao diện web. Bucket sẵn sàng tích hợp với CloudFront (mục 7) để hỗ trợ HTTPS và hiệu suất cao.\nBước tiếp theo: Chuyển đến Cấu hình CloudFront để phân phối nội dung để tiếp tục cấu hình!\n"
},
{
	"uri": "/vi/4-creating-a-restful-api/",
	"title": "Cấu hình RESTful API Bảo Mật bằng API Key",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo một RESTful API bằng AWS API Gateway để tích hợp với các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), cho phép giao diện web (chạy trên CloudFront) truy xuất, lưu trữ, và sao lưu dữ liệu sinh viên. API sẽ được bảo mật bằng API Key, sử dụng Usage Plan để giới hạn truy cập, và kích hoạt CORS để hỗ trợ giao tiếp với giao diện web. API sẽ được triển khai trên một stage (ví dụ: prod) và liên kết với API Key để đảm bảo chỉ các yêu cầu hợp lệ được xử lý.\nYêu Cầu Ban Đầu Bạn cần hoàn thành các bước ở mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nCác Bước Cấu Hình Dưới đây là các bước cụ thể để cấu hình RESTful API:\nBước Nội Dung Mô Tả 4.1 Tạo REST API mới trên API Gateway Tạo một REST API mới trong AWS API Gateway để tích hợp với các hàm Lambda. 4.2 Tạo API Key để bảo vệ truy cập Tạo API Key để bảo mật các yêu cầu truy cập API từ giao diện web. 4.3 Thiết lập Usage Plan (Kế hoạch sử dụng) Thiết lập Usage Plan để giới hạn số lượng yêu cầu API và quản lý truy cập. 4.4 Tạo phương thức GET để truy xuất dữ liệu Tạo phương thức GET cho endpoint /students để gọi hàm getStudentData và truy xuất dữ liệu sinh viên. 4.5 Tạo phương thức POST để lưu dữ liệu Tạo phương thức POST cho endpoint /students để gọi hàm insertStudentData và lưu thông tin sinh viên. 4.6 Tạo Resource \u0026amp; Method cho tính năng Backup dữ liệu Tạo resource và phương thức POST cho endpoint /backup để gọi hàm BackupDynamoDBAndSendEmail. 4.7 Kích hoạt CORS để hỗ trợ frontend truy cập Kích hoạt CORS để hỗ trợ các yêu cầu cross-origin từ giao diện web trên CloudFront. 4.8 Triển khai (Deploy) API lên một Stage cụ thể Triển khai API lên một stage (ví dụ: prod) để sử dụng trong môi trường production. 4.9 Gắn API Key vào Usage Plan \u0026amp; liên kết với REST API và Stage Liên kết API Key với Usage Plan và stage để đảm bảo chỉ các yêu cầu hợp lệ được xử lý. Lưu ý: Thực hiện các bước theo thứ tự để đảm bảo API được cấu hình chính xác. Mỗi bước sẽ được hướng dẫn chi tiết trong các tài liệu tương ứng.\nKết Luận Hoàn thành các bước cấu hình này, bạn sẽ có:\nRESTful API tích hợp với các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail). API được bảo mật bằng API Key và Usage Plan. Hỗ trợ CORS cho giao diện web trên CloudFront. Sẵn sàng tiếp tục?\nChuyển đến Tạo REST API mới trên API Gateway để bắt đầu cấu hình API đầu tiên!\n"
},
{
	"uri": "/vi/2-preparation-steps/2.4-createtable-in-dynamodb/",
	"title": "Tạo bảng trong DynamoDB",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Thiết lập bảng studentData trong DynamoDB để lưu trữ thông tin sinh viên, bao gồm Mã sinh viên (studentid), Họ tên, Lớp, Ngày sinh, và Email, sử dụng studentid (kiểu String) làm khóa chính để đảm bảo truy vấn nhanh và hiệu quả trong kiến trúc serverless.\nDynamoDB, cơ sở dữ liệu NoSQL của AWS, cung cấp mở rộng tự động và độ trễ thấp, lý tưởng cho ứng dụng quản lý thông tin sinh viên. Bảng studentData sẽ là nền tảng để tích hợp với các dịch vụ AWS như Lambda, API Gateway, và SES.\nHành Động Chi Tiết Dưới đây là các bước chi tiết để tạo và cấu hình bảng studentData:\n1. Truy Cập AWS Management Console Mở trình duyệt và đăng nhập vào AWS Management Console.\nTrong thanh tìm kiếm, nhập DynamoDB và chọn DynamoDB để vào giao diện quản lý.\nHình 1: Giao diện AWS Console với thanh tìm kiếm DynamoDB.\n2. Điều Hướng Đến Mục Tables Trong giao diện DynamoDB, tìm menu điều hướng bên trái.\nChọn Tables (Bảng) để xem danh sách các bảng hiện có. Nếu chưa có bảng, danh sách sẽ trống.\nHình 2: Menu điều hướng với tùy chọn Tables.\n3. Khởi Tạo Quá Trình Tạo Bảng Trong giao diện Tables, nhấn Create Table (Tạo Bảng) ở góc trên bên phải.\nHình 3: Nút Create Table trong giao diện Tables.\n4. Cấu Hình Chi Tiết Bảng Trong mục Table Details:\nTable Name: Nhập studentData. Lưu ý: Tên bảng phải khớp chính xác với mã trong các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail).\nPartition Key: Nhập studentid, chọn kiểu String. Khóa chính: Đảm bảo mỗi sinh viên có định danh duy nhất (ví dụ: SV001, SV002).\nSort Key: Để trống (không cần, vì truy vấn dựa trên studentid). Settings: Sử dụng tùy chọn mặc định:\nChọn On-Demand cho Capacity mode để tự động điều chỉnh tài nguyên, tiết kiệm chi phí và đơn giản hóa quản lý. Không cần thêm Secondary Indexes hoặc Encryption tùy chỉnh (mặc định đủ cho ứng dụng này). Kiểm tra thông tin:\nTable Name: studentData Partition Key: studentid (String) Hình 4: Giao diện cấu hình bảng với Table Name và Partition Key.\n5. Tạo Bảng Nhấn Create Table (Tạo Bảng) ở cuối trang.\nHình 5: Nút Create Table để xác nhận.\nDynamoDB sẽ tạo bảng trong khoảng 20-30 giây, tùy vào vùng AWS (ví dụ: us-east-1).\nHình 6: Giao diện hiển thị trạng thái tạo bảng.\n6. Kiểm Tra Trạng Thái Bảng Sau khi nhấn Create Table, bạn sẽ trở về danh sách Tables.\nTìm bảng studentData. Trạng thái ban đầu là Creating.\nChờ khoảng 30 giây, làm mới trang (nút Refresh hoặc F5).\nKhi trạng thái chuyển thành Active, bảng đã tạo thành công.\nThông báo: Giao diện hiển thị \u0026ldquo;The studentData table was created successfully\u0026rdquo;.\nHình 7: Bảng studentData với trạng thái Active.\n7. Xác Minh Cấu Hình Bảng Nhấp vào bảng studentData để xem chi tiết. Kiểm tra: Table ARN: Ví dụ, arn:aws:dynamodb:us-east-1:your-account-id:table/studentData. Partition Key: studentid (String). Capacity Mode: On-Demand. Sort Key: Không có. Các thuộc tính khác (Họ tên, Lớp, Ngày sinh, Email) là thuộc tính động, không cần khai báo trước. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Tên bảng Phải là studentData (phân biệt chữ hoa/thường) để khớp với mã Lambda. Tên sai gây lỗi truy vấn. Vùng AWS Tạo bảng trong cùng vùng AWS với các dịch vụ khác (ví dụ: us-east-1). Kiểm tra vùng ở góc trên bên phải AWS Console. Thời gian tạo Nếu trạng thái Creating kéo dài quá 30 giây, kiểm tra kết nối mạng hoặc làm mới trang. Nếu lỗi, xóa bảng và thử lại. Tối ưu hóa Với dữ liệu lớn (\u0026gt;500 MB), cân nhắc bật Point-in-time Recovery (PITR) trong tab Backups để hỗ trợ khôi phục. Sao lưu qua Lambda và S3 đủ cho ứng dụng này. Kiểm tra sớm Khi bảng ở trạng thái Active, vào tab Items, chọn Create Item để nhập bản ghi mẫu: - studentid: SV001 - name: Nguyễn Văn A - class: CNTT1 - birthdate: 2000-01-01 - email: example@gmail.com Xác minh dữ liệu hiển thị đúng. Mẹo thực tiễn: Kiểm tra cấu hình bảng ngay sau khi tạo để đảm bảo tính chính xác trước khi tích hợp với Lambda.\nKết Luận Bảng studentData là nền tảng để lưu trữ và quản lý thông tin sinh viên trong ứng dụng serverless. Với khóa chính studentid và chế độ On-Demand, bảng đảm bảo hiệu suất cao, mở rộng linh hoạt, và độ trễ thấp. Bảng đã sẵn sàng tích hợp với Lambda, API Gateway, và SES.\nBước tiếp theo: Chuyển đến Cấu hình SES để thiết lập dịch vụ gửi email!\n"
},
{
	"uri": "/vi/4-creating-a-restful-api/4.4-creating-a-get-method/",
	"title": "Tạo phương thức GET để truy xuất dữ liệu",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo phương thức GET trên resource /students trong API student (tạo ở mục 4.1) để tích hợp với hàm Lambda getStudentData (tạo ở mục 3.1), cho phép truy xuất danh sách sinh viên từ bảng DynamoDB studentData. Phương thức sẽ yêu cầu API Key (StudentApiKey, tạo ở mục 4.2) trong header x-api-key để bảo mật, và chuẩn bị cho việc kích hoạt CORS (mục 4.7) để giao diện web (chạy trên CloudFront) có thể gửi yêu cầu.\nTổng Quan về Phương Thức GET Phương thức GET /students sẽ gọi hàm Lambda getStudentData để lấy tất cả bản ghi từ bảng DynamoDB studentData (các trường: studentid, name, class, birthdate, email). Hàm getStudentData trả về phản hồi JSON với header Access-Control-Allow-Origin: '*' để hỗ trợ CORS, phù hợp với giao diện web. API Key Required đảm bảo chỉ các yêu cầu có StudentApiKey hợp lệ mới được xử lý. Sau khi tạo, API cần được triển khai (mục 4.8) để phương thức GET có hiệu lực. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), và mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập API Gateway và chọn dịch vụ Amazon API Gateway để vào giao diện quản lý.\nKiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng AWS chính (giả định us-east-1 để đồng bộ với các mục trước), kiểm tra vùng ở góc trên bên phải AWS Console. Vùng này phải khớp với API student, hàm Lambda getStudentData, bảng DynamoDB studentData, bucket S3 student-backup-20250706, và SES.\nHình 1: Giao diện AWS Console với thanh tìm kiếm API Gateway.\nĐiều Hướng Đến Mục APIs\nTrong giao diện chính của Amazon API Gateway, nhìn vào menu điều hướng bên trái.\nChọn APIs để xem danh sách các API hiện có.\nDanh sách sẽ hiển thị API student (tạo ở mục 4.1). Nếu không thấy, kiểm tra lại vùng AWS hoặc làm mới trang.\nHình 2: Menu điều hướng với tùy chọn APIs.\nChọn API student\nTrong danh sách APIs, tìm và chọn API có tên student.\nBạn sẽ được chuyển đến trang quản lý API student, hiển thị các mục như Resources, Stages, API Keys, v.v.\nChọn Resources từ menu bên trái để bắt đầu cấu hình resource và method.\nHình 3: Trang quản lý API student với tùy chọn Resources.\nTạo Resource /students\nTrong giao diện Resources, bạn sẽ thấy cây tài nguyên với gốc là /.\nNhấn Actions \u0026gt; Create Resource để tạo resource mới.\nCấu hình resource:\nResource Name: Nhập students. Resource Path: Nhập /students (hoặc để mặc định, sẽ tự động là /students). Enable API Gateway CORS: Chọn để chuẩn bị cho việc kích hoạt CORS (mục 4.7). Nhấn Create Resource để tạo.\nKiểm tra: Resource /students sẽ xuất hiện dưới gốc / trong cây tài nguyên.\nHình 4: Giao diện tạo resource /students.\nTạo Phương Thức GET\nTrong cây tài nguyên, chọn resource /students.\nNhấn Actions \u0026gt; Create Method.\nTrong dropdown dưới /students, chọn GET và nhấn biểu tượng check (✔) để xác nhận.\nLưu ý: Nếu dropdown không hiển thị GET, đảm bảo bạn đã chọn đúng resource /students.\nIntegration Type: Chọn Lambda Function để tích hợp với hàm Lambda.\nHình 5: Giao diện tạo phương thức GET.\nCấu Hình Tích Hợp Lambda\nTrong giao diện cấu hình phương thức GET:\nUse Lambda Proxy integration: Chọn (để gửi toàn bộ yêu cầu HTTP đến hàm Lambda và nhận phản hồi JSON với headers). Lambda Region: Chọn us-east-1 (hoặc vùng AWS của bạn, phải khớp với vùng của hàm getStudentData). Lambda Function: Nhập getStudentData. Lưu ý: Nếu hàm getStudentData không xuất hiện trong danh sách gợi ý, nhập thủ công và đảm bảo hàm tồn tại trong Lambda (mục 3.1). Nhấn Save để lưu cấu hình. Nếu AWS yêu cầu cấp quyền, nhấn OK để cho phép API Gateway gọi hàm Lambda getStudentData. AWS sẽ tự động thêm chính sách IAM vào vai trò của hàm Lambda (thường là LambdaGetStudentRole từ mục 3.1) với quyền lambda:InvokeFunction.\nHình 6: Giao diện cấu hình tích hợp Lambda.\nBật API Key Required\nTrong giao diện Method Request của GET /students:\nNhấn Edit bên cạnh Authorization. Chọn NONE (API Key sẽ xử lý xác thực, không cần Cognito hoặc IAM Authorizer). Trong API Key Required, chọn true để yêu cầu API Key trong header x-api-key. Giải thích: Điều này đảm bảo mọi yêu cầu gửi đến GET /students phải chứa StudentApiKey (tạo ở mục 4.2) trong header x-api-key. Nhấn Save hoặc biểu tượng check (✔) để lưu cấu hình. Hình 7: Giao diện bật API Key Required.\nKiểm Tra Trạng Thái Tạo Phương Thức\nSau khi cấu hình và nhấn Save, bạn sẽ thấy thông báo: \u0026ldquo;Successfully created method ‘GET’. Redeploy your API for the update to take effect.\u0026rdquo;\nLưu ý quan trọng: Phương thức GET sẽ không hoạt động cho đến khi bạn triển khai API vào một stage (mục 4.8).\nĐể kiểm tra cấu hình:\nTrong Resources, chọn GET dưới /students. Xác minh: Integration Request: Hiển thị Lambda Function: getStudentData. Method Request: API Key Required: true. Nếu gặp lỗi: \u0026ldquo;Lambda function not found\u0026rdquo;: Kiểm tra hàm getStudentData tồn tại trong Lambda và vùng AWS khớp (us-east-1). \u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra vai trò IAM của tài khoản AWS có quyền apigateway:PUT để tạo method. \u0026ldquo;Permission denied\u0026rdquo;: Đảm bảo API Gateway có quyền gọi getStudentData (AWS tự động thêm quyền khi bạn nhấn OK). Hình 8: Thông báo thành công sau khi tạo phương thức GET.\nLưu Ý Quan Trọng Yếu Tố Chi Tiết Tích hợp Lambda Proxy Lambda Proxy integration cho phép gửi toàn bộ yêu cầu HTTP (headers, query parameters, body) đến hàm getStudentData và nhận phản hồi JSON với headers (như Access-Control-Allow-Origin: '*'). Đảm bảo mã của getStudentData (mục 3.1) trả về phản hồi đúng định dạng. Bảo mật API Key Với API Key Required: true, yêu cầu gửi đến GET /students phải chứa header x-api-key: \u0026lt;StudentApiKey\u0026gt;. Để tăng cường bảo mật, lưu API Key trong AWS Secrets Manager (xem mục 4.2). CORS Phương thức GET cần hỗ trợ CORS để giao diện web có thể gửi yêu cầu cross-origin. Điều này sẽ được cấu hình chi tiết ở mục 4.7 (kích hoạt CORS với phương thức OPTIONS). Đảm bảo hàm getStudentData trả về header Access-Control-Allow-Origin: '*' (hoặc domain CloudFront cụ thể, ví dụ: https://d12345678.cloudfront.net). Vùng AWS Đảm bảo vùng us-east-1 khớp với hàm getStudentData, bảng DynamoDB studentData, và API student. Nếu sử dụng vùng khác (ví dụ: us-west-2), chọn đúng vùng trong Lambda Region. Xử lý lỗi - Nếu gặp lỗi \u0026ldquo;Lambda function not found\u0026rdquo;: - Kiểm tra hàm getStudentData tồn tại trong Lambda \u0026gt; Functions. - Đảm bảo vùng AWS khớp (us-east-1). - Nếu gặp lỗi 403 \u0026quot;Forbidden\u0026quot; khi gọi API (sau khi deploy): - Kiểm tra API Key Required: true và API Key StudentApiKey hợp lệ. - Đảm bảo API Key được liên kết với Usage Plan (mục 4.3, 4.9). - Nếu gặp lỗi 500 từ Lambda, kiểm tra log trong CloudWatch (log group /aws/lambda/getStudentData) để gỡ lỗi. Tối ưu hóa - Thêm header Access-Control-Allow-Origin trong Method Response để đảm bảo CORS hoạt động đúng: - Trong Method Response của GET /students, thêm Status Code 200 với header Access-Control-Allow-Origin: '*'. - Trong Integration Response, ánh xạ phản hồi từ Lambda để trả về JSON đúng định dạng. - Cân nhắc sử dụng AWS WAF với API Gateway để bảo vệ khỏi các cuộc tấn công DDoS hoặc lạm dụng API Key. - Nếu bảng studentData lớn, đảm bảo hàm getStudentData xử lý phân trang (như trong mã cải tiến ở mục 3.1) để tránh vượt giới hạn Scan. Kiểm tra sớm - Sau khi tạo phương thức GET, xác minh cấu hình trong Resources \u0026gt; GET /students (Integration Request, Method Request). - Sau khi deploy API (mục 4.8), kiểm tra phương thức GET bằng Postman hoặc curl. - Nếu nhận lỗi 403 \u0026quot;Forbidden\u0026quot;, kiểm tra API Key hoặc cấu hình API Key Required. - Nếu nhận lỗi 500, kiểm tra log CloudWatch của hàm getStudentData. Kiểm tra tích hợp với giao diện web Sau khi deploy API (mục 4.8) và liên kết Usage Plan (mục 4.9), sử dụng API Key trong giao diện web (sử dụng Tailwind CSS, chạy trên CloudFront) để gọi endpoint GET /students. Mẹo thực tiễn: Xác minh cấu hình Integration Request và API Key Required trước khi triển khai API. Kiểm tra phản hồi JSON từ hàm getStudentData bằng Postman để đảm bảo dữ liệu sinh viên được trả về đúng định dạng.\nKết Luận Phương thức GET /students đã được tạo thành công trong API student, tích hợp với hàm Lambda getStudentData và yêu cầu API Key StudentApiKey, sẵn sàng để triển khai và sử dụng trong giao diện web.\nBước tiếp theo: Chuyển đến Tạo phương thức POST để lưu dữ liệu để tiếp tục!\n"
},
{
	"uri": "/vi/6-configuring-s3-buckets/6.5-updating-bucket-policy-to-support-backup/",
	"title": "Cập Nhật Bucket Policy để Hỗ Trợ Sao Lưu Dữ Liệu (Backup)",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo S3 Bucket student-backup-20250706 (nếu chưa được tạo ở mục 2.4) và cấu hình Bucket Policy để cho phép hàm Lambda BackupDynamoDBAndSendEmail (với vai trò DynamoDBBackupRole, mục 3.3) ghi tệp backup (JSON/CSV) vào bucket thông qua endpoint POST /backup (mục 4.6). Bucket này lưu trữ dữ liệu sao lưu từ bảng DynamoDB studentData và tích hợp với SES để gửi email thông báo. Bucket không cần truy cập công khai, chỉ cần quyền s3:PutObject cho vai trò DynamoDBBackupRole, đảm bảo bảo mật và tích hợp mượt mà với hệ thống serverless.\nTổng Quan về Bucket Sao Lưu Vai trò của bucket student-backup-20250706: Lưu trữ các tệp backup (JSON/CSV) được tạo bởi hàm Lambda BackupDynamoDBAndSendEmail khi gọi endpoint POST /backup. Được cấu hình để chỉ cho phép vai trò DynamoDBBackupRole ghi tệp (s3:PutObject, s3:PutObjectAcl), không cho phép truy cập công khai. Tích hợp với API student (stage prod, mục 4.8) và SES để gửi email thông báo sau khi sao lưu. Tích hợp với hệ thống: Hàm Lambda BackupDynamoDBAndSendEmail (mục 3.3): Đọc dữ liệu từ DynamoDB studentData (dynamodb:Scan, dynamodb:Query). Ghi tệp backup vào student-backup-20250706 (s3:PutObject). Gửi email thông báo qua SES (ses:SendEmail, ses:SendRawEmail). Endpoint POST /backup (mục 4.6) được gọi từ giao diện web (tệp scripts.js, mục 6.2) thông qua Invoke URL (VD: https://abc123.execute-api.us-east-1.amazonaws.com/prod/backup) với header x-api-key: \u0026lt;StudentApiKey\u0026gt; (mục 4.2). CORS được cấu hình (mục 4.7) để hỗ trợ yêu cầu từ domain CloudFront (VD: https://d12345678.cloudfront.net). Lý do không cho phép truy cập công khai: Bucket student-backup-20250706 chỉ cần quyền ghi từ Lambda, không cần truy cập công khai như bucket student-management-website-2025 (mục 6.4). Block all public access được bật để tăng bảo mật, chỉ cho phép vai trò DynamoDBBackupRole truy cập. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 2.4 (tạo bucket student-backup-20250706), mục 3.3 (tạo hàm Lambda BackupDynamoDBAndSendEmail với vai trò DynamoDBBackupRole), mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.6 (tạo resource /backup và phương thức POST /backup), mục 4.7 (kích hoạt CORS), mục 4.8 (triển khai API lên stage prod), mục 4.9 (gắn StudentApiKey vào StudentUsagePlan), mục 5 (xây dựng giao diện web với scripts.js), mục 6.1 (tạo bucket student-management-website-2025). Đảm bảo tài khoản AWS có quyền s3:CreateBucket, s3:PutBucketPolicy, và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn. Trong thanh tìm kiếm ở đầu trang, nhập S3 và chọn dịch vụ Amazon S3 để vào giao diện quản lý bucket. Kiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng us-east-1 (US East (N. Virginia)) để đồng bộ với bucket student-backup-20250706, API student, các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), bảng DynamoDB studentData, và SES. Vùng được hiển thị ở góc trên bên phải AWS Console.\nHình 1: Giao diện AWS Console với thanh tìm kiếm S3. Tạo Bucket student-backup-20250706\nKiểm tra bucket hiện có: Trong S3 \u0026gt; Buckets, tìm bucket student-backup-20250706 (giả định đã tạo ở mục 2.4). Nếu đã tồn tại, bỏ qua bước tạo và chuyển sang Bước 3. Trong giao diện chính của Amazon S3, nhấn nút Create bucket (thường nằm ở góc trên bên phải).\nHình 2: Nút Create bucket trong giao diện S3. Trong giao diện Create bucket, nhập các thông tin sau: Bucket name: Nhập student-backup-20250706. Tên bucket phải duy nhất toàn cầu. Nếu trùng, thử thêm hậu tố ngẫu nhiên (VD: student-backup-20250706-abc123). Tên chỉ chứa chữ cái thường, số, dấu gạch ngang (-), không chứa khoảng trắng hoặc ký tự đặc biệt. AWS Region: Chọn US East (N. Virginia) us-east-1 để đồng bộ với các dịch vụ khác. Bucket type: Chọn General purpose (phù hợp cho lưu trữ tệp backup). Object Ownership: Chọn ACLs disabled (khuyến nghị cho bucket không công khai) để quản lý quyền qua Bucket Policy và IAM. Block Public Access settings for this bucket: Giữ Block all public access được chọn (mặc định) để đảm bảo bucket không cho phép truy cập công khai.\nHình 3: Bỏ chọn Block Public Access. Bucket Versioning: Chọn Disable (theo yêu cầu). Lưu ý: Khuyến nghị bật Enable để lưu trữ các phiên bản của tệp backup, hỗ trợ khôi phục nếu xảy ra lỗi ghi. Nếu bật, sử dụng AWS CLI: aws s3api put-bucket-versioning --bucket student-backup-20250706 --versioning-configuration Status=Enabled Hình 4: Bật Bucket Versioning. Default encryption: Chọn Enable \u0026gt; Server-side encryption with Amazon S3-managed keys (SSE-S3) để mã hóa dữ liệu tại rest, tăng bảo mật. Tags (Tùy chọn): Thêm tag để quản lý chi phí, ví dụ: Project=StudentManagement, Environment=Production. Nhấn Create bucket.\nHình 5: Xem lại và nhấn Create bucket. Kết quả mong đợi: AWS S3 hiển thị thông báo \u0026ldquo;Successfully created bucket \u0026lsquo;student-backup-20250706\u0026rsquo;\u0026rdquo;.\nHình 6: Thông báo trạng thái tạo bucket. Xử lý lỗi: \u0026ldquo;Bucket name already exists\u0026rdquo;: Thay tên bucket (VD: student-backup-20250706-\u0026lt;random-string\u0026gt;). Kiểm tra quyền s3:CreateBucket trong vai trò IAM. \u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra vai trò IAM có quyền s3:CreateBucket: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:CreateBucket\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Truy Cập Tab Permissions của Bucket\nTrong S3 \u0026gt; Buckets, chọn bucket student-backup-20250706. Chọn tab Permissions (thường nằm ở đầu trang, bên cạnh Objects, Properties, v.v.). Cuộn xuống phần Bucket policy để xem trạng thái hiện tại (mặc định là trống nếu chưa cấu hình).\nHình 7: Tab Permissions và phần Bucket policy. Chỉnh Sửa Bucket Policy\nTrong phần Bucket policy, nhấn nút Edit để mở giao diện chỉnh sửa. Dán mã JSON sau để cho phép vai trò DynamoDBBackupRole ghi tệp (s3:PutObject, s3:PutObjectAcl): { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowLambdaPutObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::\u0026lt;AWS_ACCOUNT_ID\u0026gt;:role/DynamoDBBackupRole\u0026#34; }, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:PutObject\u0026#34;, \u0026#34;s3:PutObjectAcl\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-backup-20250706/*\u0026#34; } ] } Giải thích mã JSON: Version: \u0026ldquo;2012-10-17\u0026rdquo; là phiên bản định dạng chính sách IAM mới nhất. Statement: Danh sách các chính sách quyền. Sid: \u0026ldquo;AllowLambdaPutObject\u0026rdquo; là tên tùy chọn để nhận diện chính sách. Effect: \u0026ldquo;Allow\u0026rdquo; cho phép hành động được chỉ định. Principal: \u0026ldquo;arn:aws:iam::\u0026lt;AWS_ACCOUNT_ID\u0026gt;:role/DynamoDBBackupRole\u0026rdquo; chỉ định vai trò IAM của Lambda BackupDynamoDBAndSendEmail. Action: s3:PutObject: Cho phép ghi tệp backup vào bucket. s3:PutObjectAcl: Cho phép đặt quyền ACL trên tệp (nếu cần). Resource: \u0026ldquo;arn:aws:s3:::student-backup-20250706/*\u0026rdquo; chỉ định tất cả các tệp trong bucket student-backup-20250706. Thay \u0026lt;AWS_ACCOUNT_ID\u0026gt;: Tìm ID tài khoản AWS trong IAM \u0026gt; Users hoặc Account (VD: 123456789012). Thay vào ARN: arn:aws:iam::123456789012:role/DynamoDBBackupRole. Kiểm tra mã: Đảm bảo ARN trong Resource và Principal đúng cú pháp và khớp với bucket/role thực tế.\nHình 8: Cấu hình Bucket Policy. Lưu Thay Đổi\nNhấn Save changes để áp dụng Bucket Policy. Kết quả mong đợi: AWS S3 hiển thị thông báo \u0026ldquo;Successfully edited bucket policy\u0026rdquo;.\nHình 9: Nhấn Save changes. Xử lý lỗi: \u0026ldquo;Policy has invalid resource\u0026rdquo;: Kiểm tra ARN trong Resource đúng cú pháp (arn:aws:s3:::student-backup-20250706/*). \u0026ldquo;Invalid principal in policy\u0026rdquo;: Xác minh ARN của DynamoDBBackupRole đúng và vai trò tồn tại trong IAM. \u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra vai trò IAM của tài khoản có quyền s3:PutBucketPolicy: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutBucketPolicy\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-backup-20250706\u0026#34; } ] } Kiểm Tra Quyền Lambda\nXác minh vai trò DynamoDBBackupRole: Trong IAM \u0026gt; Roles, tìm DynamoDBBackupRole (tạo ở mục 3.3). Đảm bảo vai trò có quyền s3:PutObject và s3:PutObjectAcl cho bucket student-backup-20250706: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:PutObject\u0026#34;, \u0026#34;s3:PutObjectAcl\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-backup-20250706/*\u0026#34; } ] } Kiểm tra endpoint POST /backup: Gọi endpoint bằng curl để xác minh hàm Lambda ghi tệp backup: curl -X POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/backup \\ -H \u0026#34;x-api-key: xxxxxxxxxxxxxxxxxxxx\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; Kết quả mong đợi: Tệp backup (JSON/CSV) được tạo trong S3 \u0026gt; student-backup-20250706 \u0026gt; Objects (VD: backup-20250706.json). Email thông báo được gửi qua SES (kiểm tra hộp thư, bao gồm Spam/Junk). Xử lý lỗi: Lỗi 403 Forbidden: Kiểm tra ARN trong Bucket Policy (Resource và Principal) khớp với bucket và vai trò. Xác minh DynamoDBBackupRole có quyền s3:PutObject và được gắn vào Lambda BackupDynamoDBAndSendEmail. Tệp backup không xuất hiện: Kiểm tra log CloudWatch của Lambda (/aws/lambda/BackupDynamoDBAndSendEmail) để tìm lỗi. Xác minh endpoint POST /backup trả về mã 200 và không có lỗi CORS. Lỗi CORS: Kiểm tra header Access-Control-Allow-Origin trong Lambda (mục 3.3) và API Gateway (mục 4.7). Đảm bảo CORS hỗ trợ domain CloudFront (VD: https://d12345678.cloudfront.net). Lưu Ý Quan Trọng Yếu Tố Chi Tiết Bảo mật Giữ Block all public access bật để đảm bảo bucket student-backup-20250706 không bị truy cập công khai. Chỉ vai trò DynamoDBBackupRole được phép ghi tệp. Tránh nhúng StudentApiKey trong scripts.js; sử dụng AWS Secrets Manager hoặc CloudFront Functions: function handler(event) { var request = event.request; request.headers[\u0026lsquo;x-api-key\u0026rsquo;] = { value: \u0026lsquo;xxxxxxxxxxxxxxxxxxxx\u0026rsquo; }; return request; } Tối ưu hóa Bật S3 Access Logs: Trong S3 \u0026gt; student-backup-20250706 \u0026gt; Properties \u0026gt; Server access logging, chọn Enable, chỉ định bucket log (VD: student-backup-logs-20250706). Sử dụng AWS CLI để tự động hóa: aws s3api put-bucket-policy \u0026ndash;bucket student-backup-20250706 \u0026ndash;policy file://policy.json Tích hợp với hệ thống Đảm bảo endpoint POST /backup hoạt động với Invoke URL và StudentApiKey. Cập nhật CORS trong API Gateway (mục 4.7) với Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Tích hợp với CloudFront (mục 7) để gọi API từ giao diện web. Kiểm tra tích hợp Gọi POST /backup từ giao diện web (https://d12345678.cloudfront.net) hoặc curl. Kiểm tra: - Tệp backup xuất hiện trong student-backup-20250706. - Email SES được gửi. Sử dụng Developer Tools \u0026gt; Network để kiểm tra yêu cầu API. Xử lý lỗi 403 Forbidden: Kiểm tra ARN trong Bucket Policy, quyền s3:PutObject của DynamoDBBackupRole. Tệp không xuất hiện: Kiểm tra log CloudWatch, mã Lambda. CORS: Kiểm tra header Access-Control-Allow-Origin trong Lambda (mục 3.3) và API Gateway (mục 4.7). 429: Kiểm tra giới hạn Rate/Burst/Quota trong StudentUsagePlan (mục 4.3). Mẹo thực tiễn: Kiểm tra Bucket Policy và quyền IAM của DynamoDBBackupRole trước khi gọi POST /backup. Sử dụng AWS CLI để tự động hóa nếu cần áp dụng chính sách cho nhiều bucket. Chuẩn bị cho mục 7 (cấu hình CloudFront) để hoàn thiện tích hợp.\nKết Luận Bucket student-backup-20250706 đã được tạo và cấu hình Bucket Policy để cho phép hàm Lambda BackupDynamoDBAndSendEmail ghi tệp backup. Bucket sẵn sàng tích hợp với endpoint POST /backup và CloudFront (mục 7).\nBước tiếp theo: Chuyển đến Cấu hình CloudFront để phân phối nội dung để tiếp tục cấu hình!\n"
},
{
	"uri": "/vi/2-preparation-steps/2.5-configureses/",
	"title": "Cấu hình Amazon SES",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Cấu hình Amazon SES để gửi email xác nhận cho hàm Lambda insertStudentData (xác nhận khi lưu dữ liệu sinh viên) và BackupDynamoDBAndSendEmail (thông báo link tải tệp backup). Xác minh địa chỉ email (ví dụ: nguyentribaothang@gmail.com) và thoát chế độ sandbox để gửi email đến các địa chỉ chưa xác minh.\nAmazon SES là dịch vụ gửi email của AWS với độ tin cậy cao và chi phí thấp, dùng để:\nGửi email xác nhận khi thêm sinh viên vào bảng DynamoDB studentData. Gửi email thông báo chứa pre-signed URL của tệp backup từ S3. Lưu ý: Tài khoản SES mặc định ở chế độ sandbox, chỉ cho phép gửi email đến địa chỉ đã xác minh. Thoát sandbox là cần thiết để gửi email đến địa chỉ sinh viên (chưa xác minh).\nHành Động Chi Tiết Dưới đây là các bước chi tiết để cấu hình SES:\n1. Truy Cập AWS Management Console Mở trình duyệt và đăng nhập vào AWS Management Console.\nTrong thanh tìm kiếm, nhập SES và chọn Amazon Simple Email Service (SES).\nĐảm bảo bạn ở vùng AWS hỗ trợ SES (ví dụ: us-east-1), kiểm tra ở góc trên bên phải.\nHình 1: Giao diện AWS Console với thanh tìm kiếm SES.\n2. Điều Hướng Đến Mục Verified Identities Trong giao diện SES, tìm menu điều hướng bên trái.\nChọn Verified identities (Danh tính đã xác minh) để xem danh sách email hoặc domain đã xác minh. Nếu chưa có, danh sách sẽ trống.\nHình 2: Menu điều hướng với tùy chọn Verified identities.\n3. Khởi Tạo Quá Trình Tạo Danh Tính Trong giao diện Verified identities, nhấn Create identity (Tạo danh tính) ở góc trên bên phải.\nHình 3: Nút Create Identity trong giao diện Verified identities.\n4. Cấu Hình Địa Chỉ Email Trong mục Identity type, chọn Email address.\nTrong trường Email address, nhập địa chỉ email nguồn (ví dụ: nguyentribaothang@gmail.com).\nLưu ý: Dùng email bạn có quyền truy cập để nhận email xác minh. Tránh sử dụng email mẫu như example@gmail.com.\nGiữ các thiết lập mặc định (không cần Feedback notifications hoặc DKIM settings).\nNhấn Create identity để gửi yêu cầu xác minh.\nHình 4: Giao diện cấu hình địa chỉ email.\n5. Kiểm Tra và Xác Minh Email AWS SES gửi email xác minh đến địa chỉ đã nhập (ví dụ: nguyentribaothang@gmail.com).\nĐăng nhập vào tài khoản email, kiểm tra Inbox hoặc Spam/Junk để tìm email từ AWS (tiêu đề như \u0026ldquo;Amazon Web Services - Email Address Verification Request\u0026rdquo;).\nNhấp vào đường dẫn xác minh trong email để hoàn tất.\nQuay lại SES, làm mới trang Verified identities. Xác nhận trạng thái là Verified.\nHình 5: Kiểm tra trạng thái Verified của email.\n6. Kiểm Tra Chế Độ Sandbox và Yêu Cầu Thoát Sandbox Kiểm tra sandbox: Trong SES, vào Account dashboard hoặc Sending statistics. Kiểm tra mục Account status. Nếu hiển thị \u0026ldquo;Your account is in the sandbox\u0026rdquo;, tài khoản đang giới hạn gửi email đến địa chỉ đã xác minh. Yêu cầu thoát sandbox: Trong Account dashboard, nhấn Edit your account details hoặc Request production access. Điền biểu mẫu: Use case description: \u0026ldquo;Gửi email xác nhận khi lưu thông tin sinh viên và thông báo sao lưu dữ liệu từ DynamoDB.\u0026rdquo; Mail type: Chọn Transactional. Website URL: Nhập URL ứng dụng (nếu có) hoặc ghi \u0026ldquo;Website đang phát triển.\u0026rdquo; Sender email address: Nhập email đã xác minh (ví dụ: nguyentribaothang@gmail.com). Additional information: \u0026ldquo;Cần gửi email đến địa chỉ sinh viên chưa xác minh cho hệ thống quản lý thông tin sinh viên.\u0026rdquo; Gửi yêu cầu. AWS phê duyệt trong 24-48 giờ, thông báo qua email. Giải pháp tạm thời: Trong sandbox, xác minh thêm email nhận (theo bước 4–5) hoặc sửa mã Lambda để chỉ gửi đến email đã xác minh. 7. Xác Minh và Thử Nghiệm SES Quay lại Verified identities, kiểm tra trạng thái email (ví dụ: nguyentribaothang@gmail.com) là Verified.\nTrong SES, chọn Send a test email (nếu có), gửi email thử đến email đã xác minh để kiểm tra hoạt động.\nNếu trạng thái vẫn là Pending, kiểm tra lại email (Inbox/Spam) hoặc tạo lại danh tính.\nHình 6: Xác nhận trạng thái Verified và thử nghiệm gửi email.\nLưu Ý Quan Trọng Yếu Tố Chi Tiết Email hợp lệ Sử dụng email bạn có quyền truy cập (ví dụ: nguyentribaothang@gmail.com). Nếu không nhận được email xác minh trong 5-10 phút, kiểm tra Spam/Junk hoặc liên hệ AWS Support. Chế độ sandbox Trong sandbox, chỉ gửi email đến địa chỉ đã xác minh. Thoát sandbox để gửi đến email sinh viên (chưa xác minh), hoặc hàm insertStudentData sẽ báo lỗi AccessDenied. Vùng AWS Cấu hình SES trong vùng hỗ trợ (ví dụ: us-east-1), khớp với Lambda. Kiểm tra danh sách vùng hỗ trợ SES trong AWS SES Documentation. Xử lý lỗi Nếu không nhận email xác minh, kiểm tra cấu hình DNS hoặc liên hệ nhà cung cấp email. Nếu Lambda báo lỗi \u0026ldquo;Email address is not verified\u0026rdquo;, kiểm tra trạng thái xác minh trong SES hoặc CloudWatch logs. Tối ưu hóa Cân nhắc xác minh domain hoặc cấu hình DKIM cho bảo mật. Xem AWS SES Documentation - DKIM. Kiểm tra sớm Thử gửi email test từ SES trước khi tích hợp với Lambda để đảm bảo hoạt động đúng. Mẹo thực tiễn: Sau khi xác minh email, gửi email thử từ SES để kiểm tra trước khi chạy các hàm Lambda.\nKết Luận Cấu hình SES với email đã xác minh (ví dụ: nguyentribaothang@gmail.com) và thoát sandbox (nếu cần) đảm bảo các hàm Lambda insertStudentData và BackupDynamoDBAndSendEmail gửi email xác nhận và thông báo thành công. SES đã sẵn sàng tích hợp vào ứng dụng serverless.\nBước tiếp theo: Chuyển đến Cấu hình Lambda Functions để thiết lập các hàm Lambda!\n"
},
{
	"uri": "/vi/4-creating-a-restful-api/4.5-creating-a-post-method/",
	"title": "Tạo phương thức POST để lưu dữ liệu",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo phương thức POST trên resource /students trong API student (tạo ở mục 4.1) để tích hợp với hàm Lambda insertStudentData (tạo ở mục 3.2), cho phép lưu thông tin sinh viên vào bảng DynamoDB studentData và gửi email xác nhận qua SES. Phương thức sẽ yêu cầu API Key (StudentApiKey, tạo ở mục 4.2) trong header x-api-key để bảo mật, và chuẩn bị cho việc kích hoạt CORS (mục 4.7) để giao diện web (chạy trên CloudFront) có thể gửi yêu cầu.\nTổng Quan về Phương Thức POST Phương thức POST /students sẽ gọi hàm Lambda insertStudentData để lưu một bản ghi sinh viên (các trường: studentid, name, class, birthdate, email) vào bảng DynamoDB studentData và gửi email xác nhận qua SES. Hàm insertStudentData trả về phản hồi JSON với header Access-Control-Allow-Origin: '*' để hỗ trợ CORS, phù hợp với giao diện web. API Key Required đảm bảo chỉ các yêu cầu có StudentApiKey hợp lệ mới được xử lý. Sau khi tạo, API cần được triển khai (mục 4.8) để phương thức POST có hiệu lực. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), và mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập API Gateway và chọn dịch vụ Amazon API Gateway để vào giao diện quản lý.\nKiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng AWS chính (giả định us-east-1 để đồng bộ với các mục trước), kiểm tra vùng ở góc trên bên phải AWS Console. Vùng này phải khớp với API student, hàm Lambda insertStudentData, bảng DynamoDB studentData, bucket S3 student-backup-20250706, và SES.\nHình 1: Giao diện AWS Console với thanh tìm kiếm API Gateway.\nĐiều Hướng Đến Mục APIs\nTrong giao diện chính của Amazon API Gateway, nhìn vào menu điều hướng bên trái.\nChọn APIs để xem danh sách các API hiện có.\nDanh sách sẽ hiển thị API student (tạo ở mục 4.1). Nếu không thấy, kiểm tra lại vùng AWS hoặc làm mới trang.\nHình 2: Menu điều hướng với tùy chọn APIs.\nChọn API student\nTrong danh sách APIs, tìm và chọn API có tên student.\nBạn sẽ được chuyển đến trang quản lý API student, hiển thị các mục như Resources, Stages, API Keys, v.v.\nChọn Resources từ menu bên trái để tiếp tục cấu hình resource và method.\nHình 3: Trang quản lý API student với tùy chọn Resources.\nSử Dụng Resource /students\nTrong giao diện Resources, bạn sẽ thấy cây tài nguyên với gốc là / và resource /students (đã tạo ở mục 4.4 cho phương thức GET).\nNếu resource /students chưa tồn tại:\nNhấn Actions \u0026gt; Create Resource. Cấu hình resource: Resource Name: Nhập students. Resource Path: Nhập /students (hoặc để mặc định, sẽ tự động là /students). Enable API Gateway CORS: Chọn để chuẩn bị cho việc kích hoạt CORS (mục 4.7). Nhấn Create Resource để tạo. Chọn resource /students trong cây tài nguyên để tạo phương thức POST.\nHình 4: Giao diện sử dụng resource /students.\nTạo Phương Thức POST\nTrong cây tài nguyên, chọn resource /students.\nNhấn Actions \u0026gt; Create Method.\nTrong dropdown dưới /students, chọn POST và nhấn biểu tượng check (✔) để xác nhận.\nLưu ý: Nếu dropdown không hiển thị POST, đảm bảo bạn đã chọn đúng resource /students.\nTrong giao diện cấu hình phương thức POST:\nIntegration Type: Chọn Lambda Function để tích hợp với hàm Lambda. Use Lambda Proxy integration: Chọn (để gửi toàn bộ yêu cầu HTTP, bao gồm headers và body, đến hàm Lambda và nhận phản hồi JSON với headers). Lambda Region: Chọn us-east-1 (hoặc vùng AWS của bạn, phải khớp với vùng của hàm insertStudentData). Lambda Function: Nhập insertStudentData. Lưu ý: Nếu hàm insertStudentData không xuất hiện trong danh sách gợi ý, nhập thủ công và đảm bảo hàm tồn tại trong Lambda (mục 3.2). Nhấn Save để lưu cấu hình. Nếu AWS yêu cầu cấp quyền, nhấn OK để cho phép API Gateway gọi hàm Lambda insertStudentData. AWS sẽ tự động thêm chính sách IAM vào vai trò của hàm Lambda (thường là LambdaInsertStudentRole từ mục 3.2) với quyền lambda:InvokeFunction.\nHình 5: Giao diện tạo phương thức POST.\nBật API Key Required\nTrong giao diện Method Request của POST /students:\nNhấn Edit bên cạnh Authorization. Chọn NONE (API Key sẽ xử lý xác thực, không cần Cognito hoặc IAM Authorizer). Trong API Key Required, chọn true để yêu cầu API Key trong header x-api-key. Giải thích: Điều này đảm bảo mọi yêu cầu gửi đến POST /students phải chứa StudentApiKey (tạo ở mục 4.2) trong header x-api-key. Nhấn Save hoặc biểu tượng check (✔) để lưu cấu hình. Hình 6: Giao diện bật API Key Required.\nKiểm Tra Trạng Thái Tạo Phương Thức\nSau khi cấu hình và nhấn Save, bạn sẽ thấy thông báo: \u0026ldquo;Successfully created method ‘POST’. Redeploy your API for the update to take effect.\u0026rdquo;\nLưu ý quan trọng: Phương thức POST sẽ không hoạt động cho đến khi bạn triển khai API vào một stage (mục 4.8).\nĐể kiểm tra cấu hình:\nTrong Resources, chọn POST dưới /students. Xác minh: Integration Request: Hiển thị Lambda Function: insertStudentData. Method Request: API Key Required: true. Nếu gặp lỗi: \u0026ldquo;Lambda function not found\u0026rdquo;: Kiểm tra hàm insertStudentData tồn tại trong Lambda \u0026gt; Functions và vùng AWS khớp (us-east-1). \u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra vai trò IAM của tài khoản AWS có quyền apigateway:PUT để tạo method. \u0026ldquo;Permission denied\u0026rdquo;: Đảm bảo API Gateway có quyền gọi insertStudentData (AWS tự động thêm quyền khi bạn nhấn OK). Hình 7: Thông báo thành công sau khi tạo phương thức POST. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Tích hợp Lambda Proxy Lambda Proxy integration cho phép gửi toàn bộ yêu cầu HTTP (headers, body) đến hàm insertStudentData và nhận phản hồi JSON với headers (như Access-Control-Allow-Origin: '*'). Đảm bảo mã của insertStudentData (mục 3.2) xử lý đúng định dạng JSON đầu vào và trả về phản hồi hợp lệ. Bảo mật API Key Với API Key Required: true, yêu cầu gửi đến POST /students phải chứa header x-api-key: \u0026lt;StudentApiKey\u0026gt;. Để tăng cường bảo mật, lưu API Key trong AWS Secrets Manager (xem mục 4.2). CORS Phương thức POST cần hỗ trợ CORS để giao diện web có thể gửi yêu cầu cross-origin. Điều này sẽ được cấu hình chi tiết ở mục 4.7 (kích hoạt CORS với phương thức OPTIONS). Đảm bảo hàm insertStudentData trả về header Access-Control-Allow-Origin: '*' (hoặc domain CloudFront cụ thể, ví dụ: https://d12345678.cloudfront.net). Vùng AWS Đảm bảo vùng us-east-1 khớp với hàm insertStudentData, bảng DynamoDB studentData, SES, và API student. Nếu sử dụng vùng khác (ví dụ: us-west-2), chọn đúng vùng trong Lambda Region. Xử lý lỗi - Nếu gặp lỗi \u0026ldquo;Lambda function not found\u0026rdquo;: - Kiểm tra hàm insertStudentData tồn tại trong Lambda \u0026gt; Functions. - Đảm bảo vùng AWS khớp (us-east-1). - Nếu gặp lỗi 403 \u0026quot;Forbidden\u0026quot; khi gọi API (sau khi deploy): - Kiểm tra API Key Required: true và API Key StudentApiKey hợp lệ. - Đảm bảo API Key được liên kết với Usage Plan (mục 4.3, 4.9). - Nếu gặp lỗi 400, 409, hoặc 500 từ Lambda, kiểm tra log trong CloudWatch (log group /aws/lambda/insertStudentData) để gỡ lỗi: - 400: Body JSON không đúng định dạng (thiếu studentid, name, v.v.). - 409: studentid đã tồn tại (do ConditionExpression). - 500: Lỗi DynamoDB hoặc SES (ví dụ: email chưa xác minh trong SES). Tối ưu hóa - Thêm header Access-Control-Allow-Origin trong Method Response để đảm bảo CORS hoạt động đúng: - Trong Method Response của POST /students, thêm Status Code 200, 400, 409, 500 với header Access-Control-Allow-Origin: '*'. - Trong Integration Response, ánh xạ phản hồi từ Lambda để xử lý các mã trạng thái. - Cân nhắc sử dụng AWS WAF với API Gateway để bảo vệ khỏi các cuộc tấn công DDoS hoặc lạm dụng API Key. - Nếu cần xác minh dữ liệu đầu vào, thêm Request Validator trong Method Request để kiểm tra body JSON có các trường bắt buộc (studentid, name, class, birthdate, email). Kiểm tra sớm - Sau khi tạo phương thức POST, xác minh cấu hình trong Resources \u0026gt; POST /students (Integration Request, Method Request). - Sau khi deploy API (mục 4.8), kiểm tra phương thức POST bằng Postman hoặc curl. - Kiểm tra bảng DynamoDB studentData (vào DynamoDB \u0026gt; Tables \u0026gt; studentData \u0026gt; Explore items) để xác minh bản ghi mới. - Kiểm tra hộp thư (bao gồm Spam/Junk) của email nhận (ví dụ: student4@example.com) để xác minh email xác nhận từ SES. - Nếu nhận lỗi 403 \u0026quot;Forbidden\u0026quot;, kiểm tra API Key và cấu hình API Key Required. - Nếu nhận lỗi 400, 409, hoặc 500, kiểm tra log CloudWatch của hàm insertStudentData. Kiểm tra tích hợp với giao diện web Sau khi deploy API (mục 4.8) và liên kết Usage Plan (mục 4.9), sử dụng API Key trong giao diện web (sử dụng Tailwind CSS, chạy trên CloudFront) để gọi endpoint POST /students. Mẹo thực tiễn: Xác minh cấu hình Integration Request và API Key Required trước khi triển khai API. Kiểm tra dữ liệu trong bảng studentData và email xác nhận từ SES bằng Postman để đảm bảo hàm insertStudentData hoạt động đúng.\nKết Luận Phương thức POST /students đã được tạo thành công trong API student, tích hợp với hàm Lambda insertStudentData và yêu cầu API Key StudentApiKey, sẵn sàng để triển khai và sử dụng trong giao diện web.\nBước tiếp theo: Chuyển đến Tạo Resource \u0026amp; Method cho tính năng Backup dữ liệu để tiếp tục!\n"
},
{
	"uri": "/vi/5-designing-the-website-interface/",
	"title": "Viết giao diện cho Website",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Xây dựng giao diện web cho ứng dụng Quản Lý Dữ Liệu Sinh Viên sử dụng HTML, Tailwind CSS, và JavaScript (với jQuery) để:\nCho phép người dùng nhập và lưu thông tin sinh viên (mã sinh viên, họ tên, lớp, ngày sinh, email) qua endpoint POST /students. Hiển thị danh sách sinh viên từ endpoint GET /students. Kích hoạt sao lưu dữ liệu qua endpoint POST /backup.\nGiao diện sẽ được triển khai trên Amazon S3 (bucket tĩnh, mục 2.4) và phân phối qua CloudFront (mục 6), tích hợp với API student (stage prod, mục 4.8) sử dụng Invoke URL và API Key StudentApiKey (mục 4.2) với bảo mật CORS (mục 4.7). Tổng Quan về Giao Diện Web index.html: Cung cấp cấu trúc giao diện với biểu mẫu nhập liệu, các nút chức năng (Lưu Dữ Liệu Sinh Viên, Xem Tất Cả Sinh Viên, Backup Dữ Liệu), và bảng hiển thị danh sách sinh viên. styles.css: Sử dụng Tailwind CSS và tùy chỉnh với font Poppins, gradient màu sắc, hiệu ứng động, và thiết kế responsive. scripts.js: Xử lý logic gọi API (GET /students, POST /students, POST /backup) với jQuery, bao gồm kiểm tra dữ liệu đầu vào, mã hóa HTML để ngăn XSS, và xử lý phản hồi/lỗi từ API. Tích hợp AWS: Thay thế API_ENDPOINT bằng Invoke URL (ví dụ: https://abc123.execute-api.us-east-1.amazonaws.com/prod) từ mục 4.8. Thay thế API_KEY bằng giá trị StudentApiKey từ mục 4.2, lưu trữ an toàn trong AWS Secrets Manager hoặc biến môi trường. Cải tiến: Tăng cường bảo mật bằng cách lưu API_KEY trong AWS Secrets Manager. Cải thiện trải nghiệm người dùng với thông báo giao diện (thay vì alert). Thêm kiểm tra dữ liệu đầu vào chặt chẽ hơn. Tối ưu hóa responsive và hiệu ứng động. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 2.4 (tạo bucket S3 tĩnh), mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), mục 4.6 (tạo resource /backup và phương thức POST /backup), mục 4.7 (kích hoạt CORS), mục 4.8 (triển khai API lên stage prod), mục 4.9 (gắn StudentApiKey vào StudentUsagePlan và liên kết với API student stage prod), và mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1. Cần có quyền truy cập S3, CloudFront, và API Gateway.\nHành Động Chi Tiết Cấu Hình Tệp index.html Tệp index.html định nghĩa giao diện với biểu mẫu nhập liệu, các nút chức năng, và bảng hiển thị sinh viên. \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;vi\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Quản Lý Dữ Liệu Sinh Viên\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.tailwindcss.com\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;min-h-screen flex items-center justify-center p-6\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-container card\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;text-4xl font-bold text-center mb-8\u0026#34;\u0026gt;Quản Lý Sinh Viên\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;space-y-6\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid grid-cols-1 md:grid-cols-2 gap-6\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;studentid\u0026#34; class=\u0026#34;block text-sm mb-1\u0026#34;\u0026gt;Mã Sinh Viên\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;studentid\u0026#34; id=\u0026#34;studentid\u0026#34; class=\u0026#34;w-full\u0026#34; placeholder=\u0026#34;Nhập mã sinh viên\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34; class=\u0026#34;block text-sm mb-1\u0026#34;\u0026gt;Họ Tên\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; class=\u0026#34;w-full\u0026#34; placeholder=\u0026#34;Nhập họ tên\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;class\u0026#34; class=\u0026#34;block text-sm mb-1\u0026#34;\u0026gt;Lớp\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;class\u0026#34; id=\u0026#34;class\u0026#34; class=\u0026#34;w-full\u0026#34; placeholder=\u0026#34;Nhập lớp\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;birthdate\u0026#34; class=\u0026#34;block text-sm mb-1\u0026#34;\u0026gt;Ngày Sinh\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;date\u0026#34; name=\u0026#34;birthdate\u0026#34; id=\u0026#34;birthdate\u0026#34; class=\u0026#34;w-full\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;md:col-span-2\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;email\u0026#34; class=\u0026#34;block text-sm mb-1\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; class=\u0026#34;w-full\u0026#34; placeholder=\u0026#34;Nhập email\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button id=\u0026#34;savestudent\u0026#34; class=\u0026#34;btn-primary w-full\u0026#34;\u0026gt;Lưu Dữ Liệu Sinh Viên\u0026lt;/button\u0026gt; \u0026lt;p id=\u0026#34;studentSaved\u0026#34; class=\u0026#34;text-center text-green-600 font-medium text-lg\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;button id=\u0026#34;getstudents\u0026#34; class=\u0026#34;btn-primary btn-secondary w-full\u0026#34;\u0026gt;Xem Tất Cả Sinh Viên\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;backupstudents\u0026#34; class=\u0026#34;btn-primary w-full bg-green-600 text-white p-3 rounded-xl font-semibold hover:bg-green-700\u0026#34;\u0026gt;Backup Dữ Liệu\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;showStudents\u0026#34; class=\u0026#34;mt-8 overflow-x-auto\u0026#34;\u0026gt; \u0026lt;table id=\u0026#34;studentTable\u0026#34; class=\u0026#34;w-full\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th class=\u0026#34;text-sm font-semibold\u0026#34;\u0026gt;Mã Sinh Viên\u0026lt;/th\u0026gt; \u0026lt;th class=\u0026#34;text-sm font-semibold\u0026#34;\u0026gt;Họ Tên\u0026lt;/th\u0026gt; \u0026lt;th class=\u0026#34;text-sm font-semibold\u0026#34;\u0026gt;Lớp\u0026lt;/th\u0026gt; \u0026lt;th class=\u0026#34;text-sm font-semibold\u0026#34;\u0026gt;Ngày Sinh\u0026lt;/th\u0026gt; \u0026lt;th class=\u0026#34;text-sm font-semibold\u0026#34;\u0026gt;Email\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt;\u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://ajax.googleapis.com/ajax/libs/jquery/1.6.0/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;scripts.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Lưu ý: Đảm bảo tệp được tải lên bucket S3 tĩnh (mục 2.4) và phân phối qua CloudFront (mục 6). Cấu Hình Tệp styles.css Tệp styles.css tùy chỉnh giao diện với Tailwind CSS, font Poppins, và hiệu ứng động. @import url(\u0026#39;https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700\u0026amp;display=swap\u0026#39;); body { background: linear-gradient(135deg, #4c1d95 0%, #ec4899 100%); font-family: \u0026#39;Poppins\u0026#39;, sans-serif; color: #1f2937; } .form-container { background: rgba(255, 255, 255, 0.97); backdrop-filter: blur(12px); border-radius: 2rem; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2); padding: 2.5rem; max-width: 48rem; margin: 2rem auto; } h1 { background: linear-gradient(to right, #7c3aed, #db2777); -webkit-background-clip: text; -webkit-text-fill-color: transparent; font-weight: 700; letter-spacing: -0.025em; } input { background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 0.75rem; padding: 0.75rem 1rem; transition: all 0.3s ease; } input:focus { outline: none; border-color: #7c3aed; box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.2); } .btn-primary { background: linear-gradient(90deg, #7c3aed, #db2777); border-radius: 0.75rem; padding: 0.75rem; font-weight: 600; color: white; transition: all 0.3s ease; } .btn-primary:hover { transform: translateY(-2px); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); background: linear-gradient(90deg, #6d28d9, #be185d); } .btn-secondary { background: linear-gradient(90deg, #6b7280, #4b5563); } .btn-secondary:hover { background: linear-gradient(90deg, #4b5563, #374151); } table { border-radius: 1rem; overflow: hidden; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); } thead { background: linear-gradient(to right, #ede9fe, #fce7f3); } th, td { padding: 1rem; text-align: left; border-bottom: 1px solid #e5e7eb; } tbody tr { transition: background-color 0.3s ease; } tbody tr:hover { background-color: #f5f3ff; } .card { animation: slideUp 0.5s ease-out; } @keyframes slideUp { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } } label { font-weight: 500; color: #374151; } Lưu ý: Nén tệp styles.css trước khi tải lên S3 để tăng tốc độ tải. Cấu Hình Tệp scripts.js Tệp scripts.js xử lý logic gọi API với jQuery, bao gồm kiểm tra dữ liệu, mã hóa HTML, và xử lý phản hồi/lỗi. var API_ENDPOINT = \u0026#34;https://710o05k9b6.execute-api.us-east-1.amazonaws.com/prod\u0026#34;; var API_KEY = \u0026#34;hWKpVcoY6246mLB7DdrYb3nWRsYqnLBp35zIxZcd\u0026#34;; // Hàm mã hóa HTML để ngăn XSS function escapeHTML(str) { return String(str) .replace(/\u0026amp;/g, \u0026#39;\u0026amp;amp;\u0026#39;) .replace(/\u0026lt;/g, \u0026#39;\u0026amp;lt;\u0026#39;) .replace(/\u0026gt;/g, \u0026#39;\u0026amp;gt;\u0026#39;) .replace(/\u0026#34;/g, \u0026#39;\u0026amp;quot;\u0026#39;) .replace(/\u0026#39;/g, \u0026#39;\u0026amp;apos;\u0026#39;); } // Xử lý lưu dữ liệu sinh viên (POST) document.getElementById(\u0026#34;savestudent\u0026#34;).onclick = function () { var inputData = { studentid: $(\u0026#39;#studentid\u0026#39;).val(), name: $(\u0026#39;#name\u0026#39;).val(), class: $(\u0026#39;#class\u0026#39;).val(), birthdate: $(\u0026#39;#birthdate\u0026#39;).val(), email: $(\u0026#39;#email\u0026#39;).val() }; // Kiểm tra rỗng và định dạng email const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; if (!inputData.studentid || !inputData.name || !inputData.class || !inputData.birthdate || !inputData.email) { alert(\u0026#34;Vui lòng nhập đầy đủ thông tin.\u0026#34;); return; } if (!emailPattern.test(inputData.email)) { alert(\u0026#34;Email không hợp lệ.\u0026#34;); return; } console.log(\u0026#34;Dữ liệu gửi POST:\u0026#34;, { body: JSON.stringify(inputData) }); $.ajax({ url: API_ENDPOINT, type: \u0026#39;POST\u0026#39;, data: JSON.stringify({ body: JSON.stringify(inputData) }), contentType: \u0026#39;application/json\u0026#39;, headers: { \u0026#39;x-api-key\u0026#39;: API_KEY }, success: function (response) { console.log(\u0026#34;Phản hồi POST:\u0026#34;, response); let message = \u0026#34;Dữ liệu sinh viên đã được lưu!\u0026#34;; if (response \u0026amp;\u0026amp; response.statusCode === 400) { try { const error = JSON.parse(response.body || \u0026#34;{}\u0026#34;); message = `Lỗi: ${escapeHTML(error.message || \u0026#34;Không xác định\u0026#34;)}`; } catch (e) { console.error(\u0026#34;Lỗi phân tích body:\u0026#34;, e); message = \u0026#34;Lỗi: Không xác định\u0026#34;; } } else if (response \u0026amp;\u0026amp; typeof response.body === \u0026#39;string\u0026#39;) { try { const data = JSON.parse(response.body); if (data \u0026amp;\u0026amp; data.name \u0026amp;\u0026amp; data.studentid) { message = `Đã lưu sinh viên: ${escapeHTML(data.name)} (${escapeHTML(data.studentid)})`; } else { console.warn(\u0026#34;Dữ liệu body không chứa name hoặc studentid:\u0026#34;, data); } } catch (e) { console.error(\u0026#34;Lỗi phân tích body:\u0026#34;, e); } } else { console.warn(\u0026#34;Phản hồi không có body hoặc body không phải chuỗi:\u0026#34;, response); } document.getElementById(\u0026#34;studentSaved\u0026#34;).textContent = message; }, error: function (xhr) { let errorMessage = \u0026#34;Không xác định\u0026#34;; try { const error = JSON.parse(xhr.responseText || \u0026#34;{}\u0026#34;); errorMessage = error.message || errorMessage; } catch (e) { errorMessage = xhr.responseText || errorMessage; } alert(\u0026#34;Lỗi khi lưu: \u0026#34; + errorMessage); } }); }; // Xử lý lấy danh sách sinh viên (GET) document.getElementById(\u0026#34;getstudents\u0026#34;).onclick = function () { $.ajax({ url: API_ENDPOINT, type: \u0026#39;GET\u0026#39;, contentType: \u0026#39;application/json\u0026#39;, headers: { \u0026#39;x-api-key\u0026#39;: API_KEY }, success: function (response) { console.log(\u0026#34;Phản hồi GET:\u0026#34;, response); // Ghi log để kiểm tra $(\u0026#39;#studentTable tbody\u0026#39;).empty(); let students = response; // Kiểm tra nếu response là đối tượng chứa body if (response \u0026amp;\u0026amp; typeof response.body === \u0026#39;string\u0026#39;) { try { students = JSON.parse(response.body); } catch (e) { console.error(\u0026#34;Lỗi phân tích body:\u0026#34;, e); alert(\u0026#34;Dữ liệu trả về không đúng định dạng JSON.\u0026#34;); return; } } // Kiểm tra nếu students là mảng if (Array.isArray(students)) { if (students.length === 0) { alert(\u0026#34;Không có dữ liệu sinh viên.\u0026#34;); } else { jQuery.each(students, function (i, data) { $(\u0026#34;#studentTable tbody\u0026#34;).append( `\u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#39;p-4\u0026#39;\u0026gt;${escapeHTML(data.studentid)}\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#39;p-4\u0026#39;\u0026gt;${escapeHTML(data.name)}\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#39;p-4\u0026#39;\u0026gt;${escapeHTML(data.class)}\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#39;p-4\u0026#39;\u0026gt;${escapeHTML(data.birthdate)}\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#39;p-4\u0026#39;\u0026gt;${escapeHTML(data.email)}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt;` ); }); } } else { console.warn(\u0026#34;Dữ liệu trả về không phải mảng:\u0026#34;, students); alert(\u0026#34;Dữ liệu trả về không đúng định dạng.\u0026#34;); } }, error: function (xhr) { let errorMessage = \u0026#34;Không xác định\u0026#34;; try { const error = JSON.parse(xhr.responseText || \u0026#34;{}\u0026#34;); errorMessage = error.message || errorMessage; } catch (e) { errorMessage = xhr.responseText || errorMessage; } alert(\u0026#34;Lỗi khi lấy dữ liệu sinh viên: \u0026#34; + errorMessage); } }); }; document.getElementById(\u0026#34;backupstudents\u0026#34;).onclick = function(){ $.ajax({ url: API_ENDPOINT + \u0026#34;/backup\u0026#34;, type: \u0026#39;POST\u0026#39;, data: JSON.stringify({}), contentType: \u0026#39;application/json; charset=utf-8\u0026#39;, headers: { \u0026#39;x-api-key\u0026#39;: API_KEY }, success: function (response) { alert(\u0026#34;Backup dữ liệu thành công! Kiểm tra email để tải file backup.\u0026#34;); }, error: function () { alert(\u0026#34;Lỗi khi thực hiện backup dữ liệu.\u0026#34;); } }); }; Lưu ý: Đảm bảo thay API_ENDPOINT và API_KEY bằng giá trị thực từ mục 4.8 và 4.2. Thay Thế API_ENDPOINT và API_KEY API_ENDPOINT: Thay https://abc123.execute-api.us-east-1.amazonaws.com/prod bằng Invoke URL từ mục 4.8 (lấy từ API Gateway \u0026gt; Stages \u0026gt; prod \u0026gt; Invoke URL). API_KEY: Thay xxxxxxxxxxxxxxxxxxxx bằng giá trị StudentApiKey từ mục 4.2. Để tăng bảo mật, lưu StudentApiKey trong AWS Secrets Manager và truy xuất trong môi trường serverless (ví dụ: Lambda hoặc CloudFront Functions). Ví dụ truy xuất API Key từ AWS Secrets Manager: const AWS = require(\u0026#39;aws-sdk\u0026#39;); const secretsManager = new AWS.SecretsManager({ region: \u0026#39;us-east-1\u0026#39; }); async function getApiKey() { const data = await secretsManager.getSecretValue({ SecretId: \u0026#39;student-api-key\u0026#39; }).promise(); return JSON.parse(data.SecretString).apiKey; } Trong môi trường client-side, lưu API_KEY trong biến môi trường (ví dụ: .env với Vite/React) hoặc cấu hình CloudFront để thêm header x-api-key tự động. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Bảo mật API Key Không nhúng API_KEY trực tiếp trong scripts.js. Sử dụng AWS Secrets Manager hoặc CloudFront Functions để thêm header x-api-key tự động. CORS Đảm bảo CORS được kích hoạt đúng (mục 4.7) với Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Nếu gặp lỗi CORS, kiểm tra header trong Method Response và Lambda (mục 3.1, 3.2, 3.3). Vùng AWS Đảm bảo vùng us-east-1 khớp với API student, stage prod, các hàm Lambda, DynamoDB studentData, S3 student-backup-20250706, SES, và CloudFront. Tối ưu hóa - Nén tệp styles.css và scripts.js trước khi tải lên S3 để tăng tốc độ tải. - Sử dụng CloudFront cache để lưu trữ nội dung tĩnh, đặt TTL hợp lý (VD: 86400 giây). - Thêm Request Validator trong API Gateway (mục 4.5) để kiểm tra JSON body của POST /students. - Bật CloudWatch Logs cho API Gateway (mục 4.8): Trong API Gateway \u0026gt; Stages \u0026gt; prod \u0026gt; Logs/Tracing, chọn Enable CloudWatch Logs. Kiểm tra lỗi - Nếu giao diện không tải: Kiểm tra quyền S3 public và CloudFront origin. - Nếu API trả lỗi 403: Kiểm tra StudentApiKey và StudentUsagePlan (mục 4.9). - Nếu API trả lỗi 429: Kiểm tra giới hạn trong StudentUsagePlan (mục 4.3). - Nếu API trả lỗi 500: Kiểm tra log CloudWatch của Lambda. - Nếu bảng rỗng hoặc dữ liệu không hiển thị: Kiểm tra phản hồi từ GET /students trong Developer Tools \u0026gt; Network. Kiểm tra tích hợp với API - Sử dụng Developer Tools để kiểm tra yêu cầu API. - Kiểm tra DynamoDB studentData để xác minh bản ghi mới. - Kiểm tra S3 student-backup-20250706 để xác minh tệp backup. - Kiểm tra email (bao gồm Spam/Junk) để xác minh thông báo từ SES. Mẹo thực tiễn: Trước khi triển khai lên S3, kiểm tra giao diện cục bộ bằng npx serve hoặc server tĩnh để đảm bảo các yêu cầu API hoạt động đúng. Sử dụng Developer Tools \u0026gt; Network để xác minh header x-api-key và phản hồi từ API. Kiểm tra dữ liệu trong DynamoDB, S3, và SES sau mỗi hành động.\nKết Luận Giao diện web đã được xây dựng với index.html, styles.css, và scripts.js, tích hợp thành công với API student (stage prod) thông qua Invoke URL và StudentApiKey. Ứng dụng hỗ trợ nhập liệu, hiển thị danh sách sinh viên, và sao lưu dữ liệu, sẵn sàng triển khai trên S3 và phân phối qua CloudFront.\nBước tiếp theo: Chuyển đến Cấu hình CloudFront và triển khai giao diện web để hoàn thiện tích hợp!\n"
},
{
	"uri": "/vi/6-configuring-s3-buckets/",
	"title": "Cấu Hình S3 Bucket để Lưu Trữ và Phục Vụ Website",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Cấu hình hai Amazon S3 Bucket để:\nLưu trữ và phục vụ giao diện web: Tạo bucket student-management-website-2025 để lưu trữ các tệp tĩnh (index.html, styles.css, scripts.js từ mục 5), bật tính năng Static Website Hosting, và cấu hình quyền truy cập công khai để phục vụ giao diện qua CloudFront (mục 7). Sao lưu dữ liệu: Cấu hình bucket student-backup-20250706 (tạo ở mục 2.4) để lưu trữ tệp backup từ endpoint POST /backup (mục 4.6), đảm bảo hàm Lambda BackupDynamoDBAndSendEmail có quyền ghi vào bucket.\nCấu hình này tích hợp với API student (stage prod, mục 4.8) và đảm bảo giao diện web (sử dụng Tailwind CSS) hoạt động mượt mà với các endpoint GET /students, POST /students, và POST /backup. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 2.4 (tạo bucket student-backup-20250706), mục 3.3 (tạo hàm Lambda BackupDynamoDBAndSendEmail với vai trò DynamoDBBackupRole), mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), mục 4.6 (tạo resource /backup và phương thức POST /backup), mục 4.7 (kích hoạt CORS), mục 4.8 (triển khai API lên stage prod), mục 4.9 (gắn StudentApiKey vào StudentUsagePlan và liên kết với API student stage prod), và mục 5 (xây dựng giao diện web với index.html, styles.css, scripts.js). Đảm bảo tài khoản AWS có quyền truy cập S3 (s3:CreateBucket, s3:PutBucketPolicy, s3:PutBucketWebsite), Lambda, API Gateway, và vùng AWS là us-east-1.\nCác Bước Cấu Hình Dưới đây là các bước cụ thể để cấu hình S3 Bucket:\nBước Nội Dung Mô Tả 6.1 Khởi tạo S3 Bucket mới Tạo bucket student-management-website-2025 để lưu trữ các tệp tĩnh (index.html, styles.css, scripts.js). 6.2 Tải tài nguyên giao diện lên S3 (HTML/CSS/JS) Tải các tệp tĩnh từ mục 5 lên bucket student-management-website-2025. 6.3 Bật tính năng Static Website Hosting Kích hoạt Static Website Hosting trong bucket student-management-website-2025 để phục vụ giao diện web. 6.4 Cấu hình Bucket Policy để cho phép truy cập công khai Cập nhật Bucket Policy của student-management-website-2025 để cho phép CloudFront truy xuất nội dung (s3:GetObject). 6.5 Cập nhật Bucket Policy để hỗ trợ sao lưu dữ liệu (Backup) Cập nhật Bucket Policy của student-backup-20250706 để cho phép hàm Lambda BackupDynamoDBAndSendEmail ghi tệp (s3:PutObject). Lưu ý: Thực hiện các bước theo thứ tự để đảm bảo cấu hình S3 Bucket chính xác. Mỗi bước được hướng dẫn chi tiết trong các tài liệu tương ứng.\nKết Luận Hoàn thành các bước cấu hình này, bạn sẽ có:\nBucket student-management-website-2025 lưu trữ và phục vụ giao diện web tĩnh, sẵn sàng tích hợp với CloudFront. Bucket student-backup-20250706 hỗ trợ lưu trữ tệp backup từ endpoint POST /backup, tích hợp với hàm Lambda BackupDynamoDBAndSendEmail. Hệ thống tích hợp đầy đủ với API student (stage prod) và giao diện web sử dụng Tailwind CSS. Sẵn sàng tiếp tục?\nChuyển đến Khởi tạo S3 Bucket mới để bắt đầu cấu hình bucket student-management-website-2025!\n"
},
{
	"uri": "/vi/4-creating-a-restful-api/4.6-creating-a-backup-resource-and-method/",
	"title": "Tạo Resource và Method cho Backup dữ liệu",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo resource /backup và phương thức POST trong API student (tạo ở mục 4.1) để tích hợp với hàm Lambda BackupDynamoDBAndSendEmail (tạo ở mục 3.3), cho phép sao lưu toàn bộ dữ liệu từ bảng DynamoDB studentData vào bucket S3 student-backup-20250706 và gửi email thông báo qua SES. Phương thức sẽ yêu cầu API Key (StudentApiKey, tạo ở mục 4.2) trong header x-api-key để bảo mật, và chuẩn bị cho việc kích hoạt CORS (mục 4.7) để giao diện web (chạy trên CloudFront) có thể gửi yêu cầu.\nTổng Quan về Resource và Phương Thức POST Resource /backup và phương thức POST /backup sẽ gọi hàm Lambda BackupDynamoDBAndSendEmail để: Sao lưu tất cả bản ghi từ bảng DynamoDB studentData (các trường: studentid, name, class, birthdate, email) vào tệp JSON trong bucket S3 student-backup-20250706. Gửi email thông báo qua SES đến một địa chỉ được chỉ định (ví dụ: admin hoặc người dùng). Hàm BackupDynamoDBAndSendEmail trả về phản hồi JSON với header Access-Control-Allow-Origin: '*' để hỗ trợ CORS, phù hợp với giao diện web. API Key Required đảm bảo chỉ các yêu cầu có StudentApiKey hợp lệ mới được xử lý. Sau khi tạo, API cần được triển khai (mục 4.8) để phương thức POST có hiệu lực. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), và mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập API Gateway và chọn dịch vụ Amazon API Gateway để vào giao diện quản lý.\nKiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng AWS chính (giả định us-east-1 để đồng bộ với các mục trước), kiểm tra vùng ở góc trên bên phải AWS Console. Vùng này phải khớp với API student, hàm Lambda BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, và SES.\nHình 1: Giao diện AWS Console với thanh tìm kiếm API Gateway.\nĐiều Hướng Đến Mục APIs\nTrong giao diện chính của Amazon API Gateway, nhìn vào menu điều hướng bên trái.\nChọn APIs để xem danh sách các API hiện có.\nDanh sách sẽ hiển thị API student (tạo ở mục 4.1). Nếu không thấy, kiểm tra lại vùng AWS hoặc làm mới trang.\nHình 2: Menu điều hướng với tùy chọn APIs.\nChọn API student\nTrong danh sách APIs, tìm và chọn API có tên student.\nBạn sẽ được chuyển đến trang quản lý API student, hiển thị các mục như Resources, Stages, API Keys, v.v.\nChọn Resources từ menu bên trái để bắt đầu cấu hình resource và method.\nHình 3: Trang quản lý API student với tùy chọn Resources.\nTạo Resource /backup\nTrong giao diện Resources, bạn sẽ thấy cây tài nguyên với gốc là / và resource /students (tạo ở mục 4.4).\nNhấn Actions \u0026gt; Create Resource để tạo resource mới.\nCấu hình resource:\nResource Name: Nhập backup. Resource Path: Nhập /backup (hoặc để mặc định, sẽ tự động là /backup). Enable API Gateway CORS: Chọn để chuẩn bị cho việc kích hoạt CORS (mục 4.7). Nhấn Create Resource để tạo.\nKiểm tra: Resource /backup sẽ xuất hiện dưới gốc / trong cây tài nguyên.\nHình 4: Nhấn nút Create.\nHình 5: Giao diện cấu hình resource /backup.\nTạo Phương Thức POST\nTrong cây tài nguyên, chọn resource /backup.\nNhấn Actions \u0026gt; Create Method.\nTrong dropdown dưới /backup, chọn POST và nhấn biểu tượng check (✔) để xác nhận.\nLưu ý: Nếu dropdown không hiển thị POST, đảm bảo bạn đã chọn đúng resource /backup.\nHình 6: Giao diện tạo phương thức POST. Cấu Hình Tích Hợp Lambda\nTrong giao diện cấu hình phương thức POST:\nIntegration Type: Chọn Lambda Function để tích hợp với hàm Lambda. Use Lambda Proxy integration: Chọn (để gửi toàn bộ yêu cầu HTTP, bao gồm headers và body, đến hàm Lambda và nhận phản hồi JSON với headers). Lambda Region: Chọn us-east-1 (hoặc vùng AWS của bạn, phải khớp với vùng của hàm BackupDynamoDBAndSendEmail). Lambda Function: Nhập BackupDynamoDBAndSendEmail. Lưu ý: Nếu hàm BackupDynamoDBAndSendEmail không xuất hiện trong danh sách gợi ý, nhập thủ công và đảm bảo hàm tồn tại trong Lambda (mục 3.3). Nhấn Save để lưu cấu hình. Nếu AWS yêu cầu cấp quyền, nhấn OK để cho phép API Gateway gọi hàm Lambda BackupDynamoDBAndSendEmail. AWS sẽ tự động thêm chính sách IAM vào vai trò của hàm Lambda (thường là DynamoDBBackupRole từ mục 3.3) với quyền lambda:InvokeFunction.\nHình 7: Giao diện cấu hình tích hợp Lambda. Hình 8: Nhấn nút Save sau khi cấu hình. Bật API Key Required\nTrong giao diện Method Request của POST /backup:\nNhấn Edit bên cạnh Authorization. Chọn NONE (API Key sẽ xử lý xác thực, không cần Cognito hoặc IAM Authorizer). Trong API Key Required, chọn true để yêu cầu API Key trong header x-api-key. Giải thích: Điều này đảm bảo mọi yêu cầu gửi đến POST /backup phải chứa StudentApiKey (tạo ở mục 4.2) trong header x-api-key. Nhấn Save hoặc biểu tượng check (✔) để lưu cấu hình. Hình 9: Giao diện bật API Key Required. Kiểm Tra Trạng Thái Tạo Phương Thức\nSau khi cấu hình và nhấn Save, bạn sẽ thấy thông báo: \u0026ldquo;Successfully created method ‘POST’. Redeploy your API for the update to take effect.\u0026rdquo;\nLưu ý quan trọng: Phương thức POST sẽ không hoạt động cho đến khi bạn triển khai API vào một stage (mục 4.8).\nĐể kiểm tra cấu hình:\nTrong Resources, chọn POST dưới /backup. Xác minh: Integration Request: Hiển thị Lambda Function: BackupDynamoDBAndSendEmail. Method Request: API Key Required: true. Nếu gặp lỗi: \u0026ldquo;Lambda function not found\u0026rdquo;: Kiểm tra hàm BackupDynamoDBAndSendEmail tồn tại trong Lambda \u0026gt; Functions và vùng AWS khớp (us-east-1). \u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra vai trò IAM của tài khoản AWS có quyền apigateway:PUT để tạo method. \u0026ldquo;Permission denied\u0026rdquo;: Đảm bảo API Gateway có quyền gọi BackupDynamoDBAndSendEmail (AWS tự động thêm quyền khi bạn nhấn OK). Hình 10: Thông báo thành công sau khi tạo phương thức POST. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Tích hợp Lambda Proxy Lambda Proxy integration cho phép gửi toàn bộ yêu cầu HTTP (headers, body) đến hàm BackupDynamoDBAndSendEmail và nhận phản hồi JSON với headers (như Access-Control-Allow-Origin: '*'). Đảm bảo mã của BackupDynamoDBAndSendEmail (mục 3.3) xử lý sao lưu và gửi email đúng cách. Bảo mật API Key Với API Key Required: true, yêu cầu gửi đến POST /backup phải chứa header x-api-key: \u0026lt;StudentApiKey\u0026gt;. Để tăng cường bảo mật, lưu API Key trong AWS Secrets Manager (xem mục 4.2). CORS Phương thức POST cần hỗ trợ CORS để giao diện web có thể gửi yêu cầu cross-origin. Điều này sẽ được cấu hình chi tiết ở mục 4.7 (kích hoạt CORS với phương thức OPTIONS). Đảm bảo hàm BackupDynamoDBAndSendEmail trả về header Access-Control-Allow-Origin: '*' (hoặc domain CloudFront cụ thể, ví dụ: https://d12345678.cloudfront.net). Vùng AWS Đảm bảo vùng us-east-1 khớp với hàm BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, SES, và API student. Nếu sử dụng vùng khác (ví dụ: us-west-2), chọn đúng vùng trong Lambda Region. Xử lý lỗi - Nếu gặp lỗi \u0026ldquo;Lambda function not found\u0026rdquo;: - Kiểm tra hàm BackupDynamoDBAndSendEmail tồn tại trong Lambda \u0026gt; Functions. - Đảm bảo vùng AWS khớp (us-east-1). - Nếu gặp lỗi 403 \u0026quot;Forbidden\u0026quot; khi gọi API (sau khi deploy): - Kiểm tra API Key Required: true và API Key StudentApiKey hợp lệ. - Đảm bảo API Key được liên kết với Usage Plan (mục 4.3, 4.9). - Nếu gặp lỗi 500 từ Lambda, kiểm tra log trong CloudWatch (log group /aws/lambda/BackupDynamoDBAndSendEmail) để gỡ lỗi: - NoSuchBucket: Kiểm tra bucket S3 student-backup-20250706 tồn tại. - AccessDenied: Kiểm tra vai trò DynamoDBBackupRole có quyền s3:PutObject, dynamodb:Scan, và ses:SendEmail. - Email address not verified: Kiểm tra email nguồn (no-reply@system.edu.vn) và email nhận (admin@system.edu.vn) đã được xác minh trong SES (mục 2.5). Tối ưu hóa - Thêm header Access-Control-Allow-Origin trong Method Response để đảm bảo CORS hoạt động đúng: - Trong Method Response của POST /backup, thêm Status Code 200, 500 với header Access-Control-Allow-Origin: '*'. - Trong Integration Response, ánh xạ phản hồi từ Lambda để xử lý các mã trạng thái. - Cân nhắc sử dụng AWS WAF với API Gateway để bảo vệ khỏi các cuộc tấn công DDoS hoặc lạm dụng API Key. - Nếu bảng studentData lớn, đảm bảo hàm BackupDynamoDBAndSendEmail xử lý phân trang cho Scan (ví dụ: sử dụng LastEvaluatedKey) để tránh vượt giới hạn. Kiểm tra sớm - Sau khi tạo phương thức POST, xác minh cấu hình trong Resources \u0026gt; POST /backup (Integration Request, Method Request). - Sau khi deploy API (mục 4.8), kiểm tra phương thức POST bằng Postman hoặc curl. - Kiểm tra bucket S3 student-backup-20250706 (vào S3 \u0026gt; Buckets \u0026gt; student-backup-20250706 \u0026gt; Objects) để xác minh tệp backup (ví dụ: backup-20250707-124500.json). - Kiểm tra hộp thư (bao gồm Spam/Junk) của email nhận (ví dụ: admin@system.edu.vn) để xác minh email thông báo từ SES. - Nếu nhận lỗi 403 \u0026quot;Forbidden\u0026quot;, kiểm tra API Key và cấu hình API Key Required. - Nếu nhận lỗi 500, kiểm tra log CloudWatch của hàm BackupDynamoDBAndSendEmail. Kiểm tra tích hợp với giao diện web Sau khi deploy API (mục 4.8) và liên kết Usage Plan (mục 4.9), sử dụng API Key trong giao diện web (sử dụng Tailwind CSS, chạy trên CloudFront) để gọi endpoint POST /backup. Mẹo thực tiễn: Xác minh cấu hình Integration Request và API Key Required trước khi triển khai API. Kiểm tra tệp backup trong bucket S3 student-backup-20250706 và email thông báo từ SES bằng Postman để đảm bảo hàm BackupDynamoDBAndSendEmail hoạt động đúng.\nKết Luận Resource /backup và phương thức POST /backup đã được tạo thành công trong API student, tích hợp với hàm Lambda BackupDynamoDBAndSendEmail và yêu cầu API Key StudentApiKey, sẵn sàng để triển khai và sử dụng trong giao diện web.\nBước tiếp theo: Chuyển đến Kích hoạt CORS để hỗ trợ giao diện web để tiếp tục!\n"
},
{
	"uri": "/vi/4-creating-a-restful-api/4.7-enabling-cors/",
	"title": "Kích hoạt CORS để hỗ trợ frontend truy cập",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Kích hoạt CORS (Cross-Origin Resource Sharing) trên API student (tạo ở mục 4.1) để cho phép giao diện web (chạy trên CloudFront, sử dụng Tailwind CSS) gửi yêu cầu đến các endpoint GET /students, POST /students, và POST /backup. CORS sẽ được cấu hình trên các resource /students và /backup bằng cách thêm phương thức OPTIONS và thiết lập các header cần thiết (Access-Control-Allow-Methods, Access-Control-Allow-Headers, Access-Control-Allow-Origin), đảm bảo tích hợp mượt mà và an toàn với frontend.\nTổng Quan về CORS trong API Gateway CORS là cơ chế bảo mật của trình duyệt, yêu cầu server (API Gateway) cho phép các yêu cầu cross-origin từ domain khác (ví dụ: https://d12345678.cloudfront.net) so với domain của API (ví dụ: https://api-id.execute-api.us-east-1.amazonaws.com). Trong hệ thống này, CORS cần được kích hoạt cho các resource /students (GET, POST) và /backup (POST) để giao diện web có thể: Gửi yêu cầu GET /students để lấy danh sách sinh viên (hàm getStudentData, mục 4.4). Gửi yêu cầu POST /students để lưu thông tin sinh viên (hàm insertStudentData, mục 4.5). Gửi yêu cầu POST /backup để sao lưu dữ liệu (hàm BackupDynamoDBAndSendEmail, mục 4.6). Kích hoạt CORS yêu cầu: Thêm phương thức OPTIONS cho mỗi resource để xử lý yêu cầu preflight từ trình duyệt. Thiết lập các header CORS (Access-Control-Allow-Origin, Access-Control-Allow-Methods, Access-Control-Allow-Headers) trong phản hồi của OPTIONS, GET, và POST. Đảm bảo các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail) trả về header Access-Control-Allow-Origin: '*'. Sau khi kích hoạt CORS, API cần được triển khai (mục 4.8) để các thay đổi có hiệu lực. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), mục 4.6 (tạo resource /backup và phương thức POST /backup), và mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập API Gateway và chọn dịch vụ Amazon API Gateway để vào giao diện quản lý.\nKiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng AWS chính (giả định us-east-1 để đồng bộ với các mục trước), kiểm tra vùng ở góc trên bên phải AWS Console. Vùng này phải khớp với API student, các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), bảng DynamoDB studentData, bucket S3 student-backup-20250706, và SES.\nHình 1: Giao diện AWS Console với thanh tìm kiếm API Gateway.\nĐiều Hướng Đến Mục APIs\nTrong giao diện chính của Amazon API Gateway, nhìn vào menu điều hướng bên trái.\nChọn APIs để xem danh sách các API hiện có.\nDanh sách sẽ hiển thị API student (tạo ở mục 4.1). Nếu không thấy, kiểm tra lại vùng AWS hoặc làm mới trang.\nHình 2: Menu điều hướng với tùy chọn APIs.\nChọn API student\nTrong danh sách APIs, tìm và chọn API có tên student.\nBạn sẽ được chuyển đến trang quản lý API student, hiển thị các mục như Resources, Stages, API Keys, v.v.\nChọn Resources từ menu bên trái để bắt đầu cấu hình CORS.\nHình 3: Trang quản lý API student với tùy chọn Resources.\nKích Hoạt CORS cho Resource /students\nTrong giao diện Resources, bạn sẽ thấy cây tài nguyên với gốc là / và resource /students (tạo ở mục 4.4).\nChọn resource /students.\nNhấn Actions \u0026gt; Enable CORS.\nTrong giao diện Enable CORS:\nAccess-Control-Allow-Methods: Chọn GET, POST, và OPTIONS. Giải thích: GET và POST tương ứng với các phương thức đã tạo (mục 4.4, 4.5). OPTIONS là phương thức preflight mà trình duyệt gửi để kiểm tra CORS trước khi gửi yêu cầu thực tế (GET hoặc POST). Access-Control-Allow-Headers: Giữ mặc định hoặc đảm bảo bao gồm Content-Type, x-api-key (do các phương thức yêu cầu API Key trong header x-api-key, mục 4.4, 4.5). Ví dụ: Content-Type,x-api-key,Authorization. Access-Control-Allow-Origin: Nhập '*' (cho phép mọi domain) hoặc domain CloudFront cụ thể (ví dụ: https://d12345678.cloudfront.net) để tăng cường bảo mật. Access-Control-Max-Age: Giữ mặc định (600 giây) để trình duyệt lưu cache phản hồi preflight. Nhấn Enable CORS and replace existing CORS headers để áp dụng.\nAWS sẽ tự động:\nTạo phương thức OPTIONS cho resource /students. Cấu hình Mock Integration cho OPTIONS với phản hồi chứa các header CORS cần thiết. Cập nhật Method Response của GET và POST để bao gồm header Access-Control-Allow-Origin. Nhấn Save để lưu cấu hình.\nHình 4: Giao diện kích hoạt CORS cho resource /students.\nKích Hoạt CORS cho Resource /backup\nTrong giao diện Resources, chọn resource /backup (tạo ở mục 4.6).\nNhấn Actions \u0026gt; Enable CORS.\nTrong giao diện Enable CORS:\nAccess-Control-Allow-Methods: Chọn POST, OPTIONS. Giải thích: POST tương ứng với phương thức đã tạo (mục 4.6). OPTIONS xử lý yêu cầu preflight cho /backup. Access-Control-Allow-Headers: Đảm bảo bao gồm Content-Type, x-api-key. Access-Control-Allow-Origin: Nhập '*' hoặc domain CloudFront cụ thể (ví dụ: https://d12345678.cloudfront.net). Access-Control-Max-Age: Giữ mặc định (600 giây). Nhấn Enable CORS and replace existing CORS headers để áp dụng.\nAWS sẽ tự động tạo phương thức OPTIONS cho /backup và cập nhật Method Response của POST.\nNhấn Save để lưu cấu hình.\nHình 5: Giao diện kích hoạt CORS cho resource /backup.\nKiểm Tra Trạng Thái Kích Hoạt CORS\nSau khi kích hoạt CORS, bạn sẽ thấy thông báo: \u0026ldquo;Successfully enabled CORS\u0026rdquo; cho từng resource (/students, /backup).\nĐể kiểm tra cấu hình:\nTrong Resources, chọn resource /students: Xác minh phương thức OPTIONS xuất hiện với Mock Integration. Trong Method Response của GET, POST, và OPTIONS, kiểm tra header Access-Control-Allow-Origin: '*'. Trong Integration Response của OPTIONS, kiểm tra phản hồi trả về: { \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,POST,OPTIONS\u0026#34;, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Content-Type,x-api-key,Authorization\u0026#34; } Lặp lại kiểm tra cho resource /backup (chỉ có POST và OPTIONS). Nếu gặp lỗi:\n\u0026ldquo;CORS headers already exist\u0026rdquo;: Chọn Replace existing CORS headers để ghi đè. \u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra vai trò IAM của tài khoản AWS có quyền apigateway:PUT để chỉnh sửa method. \u0026ldquo;OPTIONS method not found\u0026rdquo;: Đảm bảo bạn đã nhấn Enable CORS đúng cách. Lưu ý quan trọng: CORS sẽ không hoạt động cho đến khi bạn triển khai API vào một stage (mục 4.8).\nHình 6: Thông báo thành công sau khi kích hoạt CORS.\nLưu Ý Quan Trọng Yếu Tố Chi Tiết Cấu hình CORS chính xác - Access-Control-Allow-Origin: Sử dụng '*' cho phép mọi domain (phù hợp khi thử nghiệm). Trong môi trường production, chỉ định domain CloudFront cụ thể (ví dụ: https://d12345678.cloudfront.net) để tăng bảo mật. - Access-Control-Allow-Headers: Đảm bảo bao gồm x-api-key vì các phương thức yêu cầu API Key (StudentApiKey, mục 4.2). - Access-Control-Allow-Methods: Bao gồm OPTIONS để xử lý yêu cầu preflight. Tích hợp với Lambda Các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail) phải trả về header Access-Control-Allow-Origin: '*' trong phản hồi để tránh lỗi CORS. Đã được cấu hình trong mã Lambda ở các mục 3.1, 3.2, 3.3. Bảo mật API Key Yêu cầu gửi đến các endpoint (GET /students, POST /students, POST /backup) phải chứa header x-api-key: \u0026lt;StudentApiKey\u0026gt;. Lưu API Key trong AWS Secrets Manager để tăng cường bảo mật (xem mục 4.2). Vùng AWS Đảm bảo vùng us-east-1 khớp với API student, các hàm Lambda, bảng DynamoDB studentData, bucket S3 student-backup-20250706, và SES. Xử lý lỗi - Nếu giao diện web báo lỗi CORS (ví dụ: \u0026ldquo;No \u0026lsquo;Access-Control-Allow-Origin\u0026rsquo; header\u0026rdquo;): - Kiểm tra Method Response của GET, POST, và OPTIONS có header Access-Control-Allow-Origin. - Kiểm tra Integration Response của OPTIONS trả về đúng headers CORS. - Đảm bảo các hàm Lambda trả về Access-Control-Allow-Origin: '*'. - Nếu gặp lỗi 403 \u0026quot;Forbidden\u0026quot; khi gọi API: - Kiểm tra API Key StudentApiKey hợp lệ và được liên kết với Usage Plan (mục 4.3, 4.9). - Đảm bảo API Key Required: true trong Method Request (mục 4.4, 4.5, 4.6). - Nếu gặp lỗi 500 từ Lambda, kiểm tra log trong CloudWatch (log groups /aws/lambda/getStudentData, /aws/lambda/insertStudentData, /aws/lambda/BackupDynamoDBAndSendEmail). Tối ưu hóa - Chỉ định domain CloudFront cụ thể trong Access-Control-Allow-Origin thay vì '*' để tăng bảo mật. - Cân nhắc sử dụng AWS WAF với API Gateway để bảo vệ khỏi các cuộc tấn công DDoS hoặc lạm dụng API Key. - Nếu cần kiểm tra yêu cầu preflight chi tiết, bật CloudWatch Logs cho API Gateway: - Trong API Gateway \u0026gt; Settings \u0026gt; CloudWatch Logs, chọn Enable CloudWatch Logs và đặt mức log (ví dụ: INFO). - Thêm Request Validator cho POST /students và POST /backup để kiểm tra body JSON (xem mục 4.5). Kiểm tra sớm - Sau khi kích hoạt CORS, xác minh phương thức OPTIONS xuất hiện trong Resources cho /students và /backup. - Sau khi deploy API (mục 4.8), kiểm tra CORS bằng cách gọi endpoint từ giao diện web hoặc sử dụng Postman/curl. - Kiểm tra từ giao diện web (mở Developer Tools \u0026gt; Network trong trình duyệt) để xác minh không có lỗi CORS khi gọi GET /students, POST /students, hoặc POST /backup. - Nếu nhận lỗi CORS, kiểm tra headers trong Method Response và Integration Response, hoặc log CloudWatch của API Gateway. Kiểm tra tích hợp với giao diện web Sau khi deploy API (mục 4.8) và liên kết Usage Plan (mục 4.9), gọi các endpoint (GET /students, POST /students, POST /backup) từ giao diện web (sử dụng Tailwind CSS, chạy trên CloudFront). Mẹo thực tiễn: Xác minh cấu hình Method Response và Integration Response của OPTIONS trước khi triển khai API. Kiểm tra các endpoint từ giao diện web bằng Developer Tools để đảm bảo không có lỗi CORS và dữ liệu được trả về đúng.\nKết Luận CORS đã được kích hoạt thành công trên các resource /students và /backup trong API student, cho phép giao diện web gọi các endpoint GET /students, POST /students, và POST /backup mà không gặp lỗi CORS.\nBước tiếp theo: Chuyển đến Triển khai API để sử dụng thực tế để tiếp tục!\n"
},
{
	"uri": "/vi/7-deploying-cloudfront/",
	"title": "Triển Khai CloudFront để Tăng Tốc Website",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Triển khai Amazon CloudFront, một dịch vụ CDN (Content Delivery Network), để tăng tốc độ tải và bảo mật giao diện web tĩnh lưu trữ trên S3 Bucket student-management-website-2025 (mục 6). CloudFront sẽ:\nPhân phối nội dung từ S3 qua HTTPS, cải thiện hiệu suất với các edge locations toàn cầu. Phục vụ tệp index.html (mục 6.2) làm trang mặc định thông qua Default Root Object. Làm mới nội dung cache khi cần cập nhật giao diện.\nCloudFront tích hợp với API student (stage prod, mục 4.8) để hỗ trợ các endpoint GET /students, POST /students, và POST /backup, sử dụng StudentApiKey (mục 4.2) với CORS được cấu hình (mục 4.7) để gọi từ domain CloudFront. Tổng Quan về CloudFront trong Ứng Dụng Vai trò của CloudFront: Cung cấp HTTPS cho giao diện web (S3 chỉ hỗ trợ HTTP qua Static Website Hosting, mục 6.3). Tăng tốc độ tải bằng cách lưu cache nội dung tại các edge locations gần người dùng. Tích hợp với S3 Bucket student-management-website-2025 (mục 6.1–6.4) để phục vụ các tệp index.html, styles.css, scripts.js. Hỗ trợ bảo mật API Key bằng CloudFront Functions (khuyến nghị) để thêm header x-api-key mà không nhúng trong scripts.js. Tích hợp với hệ thống: Giao diện web (phân phối qua CloudFront) gọi API student (mục 4.8) với Invoke URL (VD: https://abc123.execute-api.us-east-1.amazonaws.com/prod) và StudentApiKey. Các chức năng: POST /students: Lưu bản ghi vào DynamoDB studentData và gửi email qua SES. GET /students: Hiển thị dữ liệu trong bảng. POST /backup: Tạo tệp backup trong S3 Bucket student-backup-20250706 (mục 6.5) và gửi email thông báo qua SES. CORS được cấu hình (mục 4.7) để hỗ trợ yêu cầu từ domain CloudFront (VD: https://d12345678.cloudfront.net). Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 6.1 (tạo bucket student-management-website-2025), mục 6.2 (tải lên index.html, styles.css, scripts.js), mục 6.3 (bật Static Website Hosting), mục 6.4 (cấu hình Bucket Policy), mục 6.5 (cấu hình bucket student-backup-20250706), mục 5 (xây dựng giao diện web), mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), mục 4.6 (tạo resource /backup và phương thức POST /backup), mục 4.7 (kích hoạt CORS), mục 4.8 (triển khai API lên stage prod), mục 4.9 (gắn StudentApiKey vào StudentUsagePlan), mục 3 (tạo các hàm Lambda, bảng DynamoDB studentData, bucket student-backup-20250706, SES). Đảm bảo tài khoản AWS có quyền cloudfront:CreateDistribution, cloudfront:CreateInvalidation, và vùng AWS là us-east-1 cho các dịch vụ liên quan.\nCác Bước Cấu Hình Dưới đây là các bước cụ thể để triển khai CloudFront:\nBước Nội Dung Mô Tả 7.1 Tạo CloudFront Distribution Tạo một CloudFront distribution để phân phối nội dung từ bucket student-management-website-2025 qua HTTPS. 7.2 Cấu hình Default Root Object Đặt index.html làm Default Root Object để phục vụ trang chính khi truy cập domain CloudFront. 7.3 Tạo Invalidation để làm mới nội dung cache Tạo invalidation để làm mới cache CloudFront, đảm bảo nội dung mới nhất từ S3 được phục vụ. Lưu ý: Thực hiện các bước theo thứ tự để đảm bảo CloudFront được cấu hình chính xác. Mỗi bước được hướng dẫn chi tiết trong các tài liệu tương ứng.\nKết Luận Hoàn thành các bước cấu hình này, bạn sẽ có:\nMột CloudFront distribution phân phối nội dung từ bucket student-management-website-2025 qua HTTPS, cải thiện tốc độ và bảo mật. Giao diện web tích hợp với API student (stage prod), hỗ trợ các chức năng GET /students, POST /students, và POST /backup. Hệ thống sẵn sàng để kiểm tra và triển khai sản xuất. Sẵn sàng tiếp tục?\nChuyển đến Tạo CloudFront Distribution để bắt đầu triển khai CloudFront!\n"
},
{
	"uri": "/vi/8-setting-up-system-backup/",
	"title": "Thiết Lập Backup Hệ Thống Tự Động",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Thiết lập hệ thống backup tự động cho bảng DynamoDB studentData bằng cách chỉnh sửa Lambda function BackupDynamoDBAndSendEmail (tích hợp với endpoint POST /backup, mục 4.8) và tạo Amazon EventBridge Rule để kích hoạt backup định kỳ. Backup sẽ lưu dữ liệu vào S3 Bucket student-backup-20250706 (mục 6.5) và gửi email thông báo qua Amazon SES. Hệ thống đảm bảo:\nTự động hóa quy trình backup để giảm thiểu can thiệp thủ công. Tích hợp với giao diện web (phân phối qua CloudFront, mục 7.1–7.3) và API student (stage prod, mục 4.8). Bảo mật với StudentApiKey (mục 4.2) và vai trò IAM DynamoDBBackupRole (mục 6.5). Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 7.1–7.3 (tạo và cấu hình CloudFront StudentWebsiteDistribution), mục 6.1–6.5 (cấu hình S3 Buckets student-management-website-2025 và student-backup-20250706), mục 5 (xây dựng giao diện web), mục 4.1–4.9 (tạo và triển khai API student, StudentApiKey, StudentUsagePlan, endpoint GET /students, POST /students, POST /backup, CORS, stage prod), mục 3.3 (tạo Lambda function BackupDynamoDBAndSendEmail với vai trò DynamoDBBackupRole), mục 3 (tạo bảng DynamoDB studentData, SES email xác minh). Đảm bảo tài khoản AWS có quyền lambda:UpdateFunctionConfiguration, events:PutRule, events:PutTargets, iam:PassRole, và vùng AWS là us-east-1.\nCác Bước Cấu Hình Dưới đây là các bước cụ thể để thiết lập backup tự động:\nBước Nội Dung Mô Tả 8.1 Chỉnh sửa cấu hình trong Lambda Backup Cập nhật Lambda function BackupDynamoDBAndSendEmail để hỗ trợ kích hoạt từ EventBridge, đảm bảo lưu dữ liệu từ DynamoDB studentData vào S3 student-backup-20250706 và gửi email qua SES. 8.2 Tạo EventBridge Rule để tự động hóa Backup Tạo Amazon EventBridge Rule StudentDataBackupRule để kích hoạt Lambda function BackupDynamoDBAndSendEmail định kỳ (VD: hàng ngày). Lưu ý: Thực hiện các bước theo thứ tự để đảm bảo cấu hình backup tự động chính xác. Mỗi bước được hướng dẫn chi tiết trong các tài liệu tương ứng.\nKết Luận Hoàn thành các bước cấu hình này, bạn sẽ có:\nLambda function BackupDynamoDBAndSendEmail được cập nhật để hỗ trợ cả API Gateway và EventBridge. EventBridge Rule StudentDataBackupRule kích hoạt backup định kỳ, lưu dữ liệu từ DynamoDB studentData vào S3 student-backup-20250706 với thông báo qua SES. Hệ thống tích hợp đầy đủ với API student (stage prod) và giao diện web qua CloudFront StudentWebsiteDistribution. Sẵn sàng tiếp tục?\nChuyển đến Chỉnh sửa cấu hình trong Lambda Backup để bắt đầu cấu hình Lambda function!\n"
},
{
	"uri": "/vi/4-creating-a-restful-api/4.8-deploying-the-api/",
	"title": "Triển khai API lên một Stage cụ thể",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Triển khai API student (tạo ở mục 4.1) lên stage prod trong AWS API Gateway để kích hoạt các phương thức GET /students (mục 4.4), POST /students (mục 4.5), và POST /backup (mục 4.6), cùng với cấu hình CORS (mục 4.7). Sau khi triển khai, sao chép Invoke URL (ví dụ: https://abc123.execute-api.us-east-1.amazonaws.com/prod) để sử dụng trong giao diện web (chạy trên CloudFront, sử dụng Tailwind CSS) khi gọi các endpoint với API Key StudentApiKey (mục 4.2).\nTổng Quan về Triển Khai API trong API Gateway Stage là một môi trường triển khai (ví dụ: prod, dev, test) trong API Gateway, đại diện cho phiên bản hoạt động của API tại một thời điểm. Triển khai API lên stage prod sẽ: Kích hoạt các phương thức GET /students, POST /students, và POST /backup, tích hợp với các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail). Áp dụng cấu hình CORS (mục 4.7) để giao diện web gửi yêu cầu cross-origin. Yêu cầu API Key StudentApiKey trong header x-api-key cho các phương thức (do bật API Key Required ở mục 4.4, 4.5, 4.6). Invoke URL là URL gốc của stage (ví dụ: https://abc123.execute-api.us-east-1.amazonaws.com/prod), được kết hợp với các resource path (/students, /backup) để tạo endpoint hoàn chỉnh: GET https://abc123.execute-api.us-east-1.amazonaws.com/prod/students POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/students POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/backup Sau khi triển khai, Invoke URL sẽ được sử dụng trong giao diện web để gọi API với API Key. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), mục 4.6 (tạo resource /backup và phương thức POST /backup), mục 4.7 (kích hoạt CORS), và mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập API Gateway và chọn dịch vụ Amazon API Gateway để vào giao diện quản lý.\nKiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng AWS chính (giả định us-east-1 để đồng bộ với các mục trước), kiểm tra vùng ở góc trên bên phải AWS Console. Vùng này phải khớp với API student, các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), bảng DynamoDB studentData, bucket S3 student-backup-20250706, và SES.\nHình 1: Giao diện AWS Console với thanh tìm kiếm API Gateway.\nĐiều Hướng Đến Mục APIs\nTrong giao diện chính của Amazon API Gateway, nhìn vào menu điều hướng bên trái.\nChọn APIs để xem danh sách các API hiện có.\nDanh sách sẽ hiển thị API student (tạo ở mục 4.1). Nếu không thấy, kiểm tra lại vùng AWS hoặc làm mới trang.\nHình 2: Menu điều hướng với tùy chọn APIs.\nChọn API student\nTrong danh sách APIs, tìm và chọn API có tên student.\nBạn sẽ được chuyển đến trang quản lý API student, hiển thị các mục như Resources, Stages, API Keys, v.v.\nHình 3: Trang quản lý API student.\nTriển Khai API\nTrong trang quản lý API student, chọn Resources từ menu bên trái. Nhấn Actions \u0026gt; Deploy API để mở giao diện triển khai. Hình 4: Nhấn vào nút Deploy API.\nTrong giao diện Deploy API:\nDeployment stage: Chọn New Stage. Stage name: Nhập prod (viết thường, không chứa ký tự đặc biệt). Stage description: (Tùy chọn) Nhập Production stage for StudentManagementAPI để mô tả rõ ràng mục đích. Deployment description: (Tùy chọn) Nhập Initial deployment for prod stage để ghi chú phiên bản triển khai. Nhấn Deploy để triển khai API lên stage prod.\nLưu ý:\nNếu stage prod đã tồn tại (từ lần triển khai trước), chọn prod trong dropdown Deployment stage thay vì tạo mới, rồi nhấn Deploy để cập nhật. Mỗi lần thay đổi cấu hình API (method, CORS, v.v.), bạn phải triển khai lại để áp dụng. Hình 5: Giao diện triển khai API lên stage prod.\nKiểm Tra Trạng Thái Triển Khai\nSau khi nhấn Deploy, bạn sẽ thấy thông báo: \u0026ldquo;Successfully created deployment for student. This deployment is active for prod.\u0026rdquo;\nTrong menu bên trái, chọn Stages để xem danh sách stage.\nChọn stage prod để kiểm tra chi tiết:\nXác minh Invoke URL hiển thị ở đầu trang (ví dụ: https://abc123.execute-api.us-east-1.amazonaws.com/prod). Kiểm tra các resource (/students, /backup) và phương thức (GET, POST, OPTIONS) đã được triển khai. Nếu không thấy thông báo hoặc gặp lỗi:\n\u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra vai trò IAM của tài khoản AWS có quyền apigateway:POST để triển khai API. \u0026ldquo;Stage already exists\u0026rdquo;: Nếu stage prod đã tồn tại, chọn stage hiện có và triển khai lại. \u0026ldquo;No methods deployed\u0026rdquo;: Đảm bảo các phương thức GET /students, POST /students, POST /backup, và OPTIONS đã được tạo (mục 4.4, 4.5, 4.6, 4.7). Hình 6: Thông báo trạng thái triển khai và chi tiết stage prod.\nSao Chép Invoke URL\nTrong Stages \u0026gt; prod, sao chép Invoke URL (ví dụ: https://abc123.execute-api.us-east-1.amazonaws.com/prod). Lưu Invoke URL ở nơi an toàn (ví dụ: tệp cấu hình, biến môi trường, hoặc AWS Secrets Manager) để sử dụng trong giao diện web. Sử dụng Invoke URL: Kết hợp Invoke URL với resource path để tạo endpoint hoàn chỉnh: GET https://abc123.execute-api.us-east-1.amazonaws.com/prod/students POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/students POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/backup Các endpoint này sẽ được gọi từ giao diện web với header x-api-key: \u0026lt;StudentApiKey\u0026gt;. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Bảo mật API Key Mỗi yêu cầu đến các endpoint phải chứa header x-api-key với giá trị StudentApiKey (tạo ở mục 4.2). Lưu API Key trong AWS Secrets Manager để tăng cường bảo mật, tránh nhúng trực tiếp trong mã JavaScript. CORS Đảm bảo CORS đã được kích hoạt đúng cách (mục 4.7) với phương thức OPTIONS và header Access-Control-Allow-Origin: '*' (hoặc domain CloudFront cụ thể). Các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail) phải trả về header Access-Control-Allow-Origin: '*' trong phản hồi (đã cấu hình ở mục 3.1, 3.2, 3.3). Vùng AWS Đảm bảo vùng us-east-1 khớp với API student, các hàm Lambda, bảng DynamoDB studentData, bucket S3 student-backup-20250706, và SES. Xử lý lỗi - Nếu gặp lỗi 403 \u0026quot;Forbidden\u0026quot; khi gọi endpoint: - Kiểm tra API Key StudentApiKey hợp lệ và được liên kết với Usage Plan (mục 4.3, 4.9). - Đảm bảo API Key Required: true trong Method Request (mục 4.4, 4.5, 4.6). - Nếu gặp lỗi 404 \u0026quot;Not Found\u0026quot;: - Kiểm tra Invoke URL đúng và resource path (/students, /backup) được cấu hình. - Đảm bảo API đã được triển khai lên stage prod. - Nếu gặp lỗi CORS: - Kiểm tra cấu hình CORS (mục 4.7) và header Access-Control-Allow-Origin trong Method Response và Lambda. - Nếu gặp lỗi 500 từ Lambda, kiểm tra log trong CloudWatch (log groups /aws/lambda/getStudentData, /aws/lambda/insertStudentData, /aws/lambda/BackupDynamoDBAndSendEmail). Tối ưu hóa - Bật CloudWatch Logs cho stage prod để theo dõi yêu cầu API: - Trong Stages \u0026gt; prod \u0026gt; Logs/Tracing, chọn Enable CloudWatch Logs và đặt mức log (ví dụ: INFO). - Kiểm tra log trong CloudWatch \u0026gt; Log groups \u0026gt; /aws/apigateway/student-prod. - Cân nhắc sử dụng AWS WAF với API Gateway để bảo vệ khỏi các cuộc tấn công DDoS hoặc lạm dụng API Key. - Nếu cần nhiều stage (ví dụ: dev, test), tạo thêm stage trong Stages và triển khai riêng biệt để thử nghiệm. Kiểm tra sớm - Sau khi triển khai, xác minh stage prod xuất hiện trong Stages với Invoke URL đúng. - Kiểm tra các endpoint bằng Postman hoặc curl. - Kết quả mong đợi: - GET /students: Trả về danh sách sinh viên từ DynamoDB studentData. - POST /students: Lưu bản ghi mới vào DynamoDB và gửi email xác nhận qua SES. - POST /backup: Tạo tệp backup trong S3 student-backup-20250706 và gửi email thông báo. - Kiểm tra từ giao diện web (mở Developer Tools \u0026gt; Network trong trình duyệt) để xác minh không có lỗi CORS hoặc 403. - Nếu nhận lỗi, kiểm tra API Key, cấu hình CORS, hoặc log CloudWatch. Kiểm tra tích hợp với giao diện web Sử dụng Invoke URL trong giao diện web để gọi các endpoint, đảm bảo header x-api-key được gửi đúng (sử dụng Tailwind CSS, chạy trên CloudFront). Mẹo thực tiễn: Sau khi triển khai, kiểm tra Invoke URL bằng Postman trước khi tích hợp với giao diện web. Xác minh dữ liệu trong DynamoDB studentData, bucket S3 student-backup-20250706, và email SES để đảm bảo các endpoint hoạt động đúng.\nKết Luận API student đã được triển khai thành công lên stage prod với Invoke URL sẵn sàng để sử dụng trong giao diện web, hỗ trợ các phương thức GET /students, POST /students, và POST /backup.\nBước tiếp theo: Chuyển đến Liên kết API Key với Usage Plan để tiếp tục!\n"
},
{
	"uri": "/vi/4-creating-a-restful-api/4.9-linking-api-key-to-usage-plan-and-stage/",
	"title": "Gắn API Key vào Usage Plan &amp; Liên kết với REST API và Stage",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Gắn API Key StudentApiKey (tạo ở mục 4.2) vào Usage Plan StudentUsagePlan (tạo ở mục 4.3) và liên kết với API student (tạo ở mục 4.1) trên stage prod (tạo ở mục 4.8). Điều này đảm bảo các yêu cầu đến các endpoint (GET /students, POST /students, POST /backup) phải sử dụng StudentApiKey trong header x-api-key và tuân theo giới hạn của StudentUsagePlan (Rate: 5 yêu cầu/giây, Burst: 10 yêu cầu, Quota: 1000 yêu cầu/ngày). Cấu hình này cho phép giao diện web (chạy trên CloudFront, sử dụng Tailwind CSS) truy cập API một cách an toàn và kiểm soát.\nTổng Quan về API Key và Usage Plan trong API Gateway API Key (StudentApiKey) là một chuỗi xác thực dùng để kiểm soát truy cập vào các phương thức API (GET /students, POST /students, POST /backup), yêu cầu header x-api-key trong mỗi yêu cầu. Usage Plan (StudentUsagePlan) quản lý giới hạn truy cập (Rate, Burst, Quota) và liên kết API Key với API/stage cụ thể. Liên kết StudentApiKey với StudentUsagePlan và API student trên stage prod đảm bảo: Chỉ các yêu cầu có StudentApiKey hợp lệ mới được xử lý. Các yêu cầu tuân theo giới hạn: 5 yêu cầu/giây (Rate), 10 yêu cầu đồng thời (Burst), và 1000 yêu cầu/ngày (Quota). Giao diện web có thể gọi các endpoint một cách an toàn với CORS (mục 4.7) và Invoke URL (mục 4.8). Sau khi hoàn tất, các endpoint sẽ sẵn sàng để sử dụng trong giao diện web với bảo mật API Key. Yêu Cầu Ban Đầu Bạn cần hoàn thành mục 4.1 (tạo API student), mục 4.2 (tạo API Key StudentApiKey), mục 4.3 (tạo Usage Plan StudentUsagePlan), mục 4.4 (tạo phương thức GET /students), mục 4.5 (tạo phương thức POST /students), mục 4.6 (tạo resource /backup và phương thức POST /backup), mục 4.7 (kích hoạt CORS), mục 4.8 (triển khai API lên stage prod), và mục 3 (tạo các hàm Lambda getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, bảng DynamoDB studentData, bucket S3 student-backup-20250706, SES email xác minh). Đảm bảo tài khoản AWS đã sẵn sàng và vùng AWS là us-east-1.\nHành Động Chi Tiết Truy Cập AWS Management Console\nMở trình duyệt và đăng nhập vào AWS Management Console bằng tài khoản AWS của bạn.\nTrong thanh tìm kiếm ở đầu trang, nhập API Gateway và chọn dịch vụ Amazon API Gateway để vào giao diện quản lý.\nKiểm tra vùng AWS: Đảm bảo bạn đang làm việc trong vùng AWS chính (giả định us-east-1 để đồng bộ với các mục trước), kiểm tra vùng ở góc trên bên phải AWS Console. Vùng này phải khớp với API student, các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), bảng DynamoDB studentData, bucket S3 student-backup-20250706, và SES.\nHình 1: Giao diện AWS Console với thanh tìm kiếm API Gateway.\nĐiều Hướng Đến Mục API Keys\nTrong giao diện chính của Amazon API Gateway, nhìn vào menu điều hướng bên trái.\nChọn API Keys để xem danh sách các API Key hiện có.\nDanh sách sẽ hiển thị StudentApiKey (tạo ở mục 4.2). Nếu không thấy, kiểm tra lại vùng AWS hoặc làm mới trang.\nHình 2: Menu điều hướng với tùy chọn API Keys.\nChọn API Key StudentApiKey\nTrong danh sách API Keys, tìm và chọn StudentApiKey.\nBạn sẽ được chuyển đến trang chi tiết của StudentApiKey, hiển thị thông tin như Value (giá trị API Key, có thể ẩn), Usage Plans, và các tùy chọn cấu hình.\nHình 3: Trang chi tiết của StudentApiKey.\nGắn StudentApiKey vào Usage Plan\nTrong trang chi tiết của StudentApiKey, nhấn Add to Usage Plan (hoặc Actions \u0026gt; Add to Usage Plan tùy phiên bản Console).\nTrong mục Add key to usage plan:\nUsage Plan: Chọn StudentUsagePlan từ dropdown (tạo ở mục 4.3). Lưu ý: Nếu StudentUsagePlan không xuất hiện, kiểm tra xem Usage Plan đã được tạo trong cùng vùng AWS (us-east-1). Nhấn Save để gắn StudentApiKey vào StudentUsagePlan.\nKiểm tra: Sau khi lưu, trong trang chi tiết của StudentApiKey, phần Usage Plans sẽ hiển thị StudentUsagePlan.\nHình 4: Giao diện gắn StudentApiKey vào StudentUsagePlan.\nKiểm Tra Trạng Thái Gắn API Key\nSau khi nhấn Save, bạn sẽ thấy thông báo: \u0026ldquo;Successfully added \u0026lsquo;StudentApiKey\u0026rsquo; to \u0026lsquo;StudentUsagePlan\u0026rsquo;.\u0026rdquo;\nNếu không thấy thông báo hoặc gặp lỗi:\n\u0026ldquo;Usage Plan not found\u0026rdquo;: Kiểm tra StudentUsagePlan tồn tại trong Usage Plans (mục 4.3). \u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra vai trò IAM của tài khoản AWS có quyền apigateway:PUT để gắn API Key. \u0026ldquo;API Key already added\u0026rdquo;: Nếu StudentApiKey đã được gắn trước đó, thông báo này có thể xuất hiện; bỏ qua và tiếp tục bước tiếp theo. Hình 5: Thông báo trạng thái gắn API Key.\nĐiều Hướng Đến Mục Usage Plans\nTrong menu bên trái của Amazon API Gateway, chọn Usage Plans để xem danh sách các Usage Plan.\nDanh sách sẽ hiển thị StudentUsagePlan (tạo ở mục 4.3). Nếu không thấy, kiểm tra lại vùng AWS hoặc làm mới trang.\nHình 6: Menu điều hướng với tùy chọn Usage Plans. Chọn Usage Plan StudentUsagePlan\nTrong danh sách Usage Plans, tìm và chọn StudentUsagePlan.\nBạn sẽ được chuyển đến trang chi tiết của StudentUsagePlan, hiển thị thông tin như Throttling (Rate: 5, Burst: 10), Quota (1000 yêu cầu/ngày), API Keys, và Associated APIs and Stages.\nHình 7: Trang chi tiết của StudentUsagePlan. Liên Kết API và Stage\nTrong trang chi tiết của StudentUsagePlan, nhấn Add API Stage (hoặc Actions \u0026gt; Add API Stage tùy phiên bản Console). Hình 8: Nhấn vào nút Add API Stage.\nTrong giao diện Add API Stage:\nAPI: Chọn student từ dropdown (tạo ở mục 4.1). Stage: Chọn prod từ dropdown (tạo ở mục 4.8). Lưu ý: Nếu student hoặc prod không xuất hiện, kiểm tra xem API student và stage prod đã được tạo trong cùng vùng AWS (us-east-1). Nhấn Add to Usage Plan để liên kết.\nKiểm tra: Trong trang chi tiết của StudentUsagePlan, phần Associated APIs and Stages sẽ hiển thị student:prod.\nHình 9: Giao diện liên kết API và Stage.\nKiểm Tra Trạng Thái Liên Kết API và Stage\nSau khi nhấn Add to Usage Plan, bạn sẽ thấy thông báo: \u0026ldquo;Successfully added stage \u0026lsquo;prod\u0026rsquo; to usage plan.\u0026rdquo;\nĐể xác minh:\nTrong Usage Plans \u0026gt; StudentUsagePlan: Kiểm tra API Keys hiển thị StudentApiKey. Kiểm tra Associated APIs and Stages hiển thị student:prod. Nếu không thấy thông báo hoặc gặp lỗi: \u0026ldquo;API or Stage not found\u0026rdquo;: Kiểm tra API student và stage prod tồn tại (mục 4.1, 4.8). \u0026ldquo;AccessDenied\u0026rdquo;: Kiểm tra vai trò IAM có quyền apigateway:PUT để liên kết API/stage. \u0026ldquo;Stage already associated\u0026rdquo;: Nếu student:prod đã được liên kết trước đó, thông báo này có thể xuất hiện; bỏ qua. Hình 10: Thông báo trạng thái liên kết API và Stage. Lưu Ý Quan Trọng Yếu Tố Chi Tiết Kiểm tra toàn bộ cấu hình - API Key: StudentApiKey đã được gắn vào StudentUsagePlan. - Usage Plan: StudentUsagePlan áp dụng giới hạn Rate (5 yêu cầu/giây), Burst (10 yêu cầu), Quota (1000 yêu cầu/ngày). - API/Stage: student:prod đã được liên kết, áp dụng giới hạn của StudentUsagePlan cho các endpoint (GET /students, POST /students, POST /backup). - API Key Required: Các phương thức đã bật API Key Required: true (mục 4.4, 4.5, 4.6). Bảo mật API Key Yêu cầu đến các endpoint phải chứa header x-api-key: \u0026lt;StudentApiKey\u0026gt;. Lưu API Key trong AWS Secrets Manager để tăng cường bảo mật. CORS Đảm bảo CORS đã được kích hoạt (mục 4.7) với phương thức OPTIONS và header Access-Control-Allow-Origin: '*' (hoặc domain CloudFront cụ thể). Các hàm Lambda (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail) phải trả về header Access-Control-Allow-Origin: '*' (đã cấu hình ở mục 3.1, 3.2, 3.3). Vùng AWS Đảm bảo vùng us-east-1 khớp với API student, stage prod, StudentApiKey, StudentUsagePlan, các hàm Lambda, bảng DynamoDB studentData, bucket S3 student-backup-20250706, và SES. Xử lý lỗi - Nếu gặp lỗi 403 \u0026quot;Forbidden\u0026quot; khi gọi endpoint: - Kiểm tra StudentApiKey hợp lệ và được gắn vào StudentUsagePlan. - Đảm bảo student:prod được liên kết với StudentUsagePlan. - Xác minh API Key Required: true trong Method Request (mục 4.4, 4.5, 4.6). - Nếu gặp lỗi 429 \u0026quot;Too Many Requests\u0026quot;: - Kiểm tra giới hạn Rate (5 yêu cầu/giây), Burst (10 yêu cầu), hoặc Quota (1000 yêu cầu/ngày) trong StudentUsagePlan. - Xem thống kê sử dụng trong Usage Plans \u0026gt; StudentUsagePlan \u0026gt; Usage. - Nếu gặp lỗi 500 từ Lambda, kiểm tra log trong CloudWatch (log groups /aws/lambda/getStudentData, /aws/lambda/insertStudentData, /aws/lambda/BackupDynamoDBAndSendEmail). - Nếu không thấy thông báo thành công, kiểm tra vùng AWS hoặc làm mới trang Console. Tối ưu hóa - Bật CloudWatch Metrics cho StudentUsagePlan để theo dõi số lượng yêu cầu: - Trong Usage Plans \u0026gt; StudentUsagePlan, chọn Enable usage plan metrics. - Kiểm tra trong CloudWatch \u0026gt; Metrics \u0026gt; API Gateway \u0026gt; UsagePlanId. - Cân nhắc sử dụng AWS WAF với API Gateway để bảo vệ khỏi các cuộc tấn công DDoS hoặc lạm dụng API Key. - Nếu cần nhiều API Key (ví dụ: cho nhiều ứng dụng web), tạo thêm API Key và gắn vào StudentUsagePlan. Kiểm tra sớm - Sau khi gắn StudentApiKey và liên kết student:prod, kiểm tra cấu hình trong Usage Plans \u0026gt; StudentUsagePlan. - Kiểm tra các endpoint bằng Postman hoặc curl với StudentApiKey. - Kết quả mong đợi: - GET /students: Trả về danh sách sinh viên từ DynamoDB studentData. - POST /students: Lưu bản ghi mới vào DynamoDB và gửi email xác nhận qua SES. - POST /backup: Tạo tệp backup trong S3 student-backup-20250706 và gửi email thông báo. - Kiểm tra từ giao diện web (mở Developer Tools \u0026gt; Network trong trình duyệt) để xác minh không có lỗi CORS, 403, hoặc 429. Kiểm tra tích hợp với giao diện web Sử dụng Invoke URL và StudentApiKey trong giao diện web (sử dụng Tailwind CSS, chạy trên CloudFront) để gọi các endpoint (GET /students, POST /students, POST /backup). Mẹo thực tiễn: Sau khi gắn StudentApiKey và liên kết student:prod, kiểm tra các endpoint bằng Postman với header x-api-key trước khi tích hợp với giao diện web. Xác minh dữ liệu trong DynamoDB studentData, bucket S3 student-backup-20250706, và email SES để đảm bảo các endpoint hoạt động đúng.\nKết Luận StudentApiKey đã được gắn thành công vào StudentUsagePlan và liên kết với API student trên stage prod, đảm bảo các endpoint (GET /students, POST /students, POST /backup) được bảo mật và tuân theo giới hạn truy cập, sẵn sàng để sử dụng trong giao diện web.\nBước tiếp theo: Chuyển đến Tiếp tục cấu hình hoặc tích hợp giao diện web để hoàn thiện hệ thống!\n"
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]