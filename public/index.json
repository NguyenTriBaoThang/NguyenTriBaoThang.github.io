[
{
	"uri": "//localhost:1313/4-creating-a-restful-api/4.1-creating-a-rest-api/",
	"title": "Creating a REST API",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "//localhost:1313/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Explore the future of web development!\nThis workshop will guide you through the journey of building an advanced serverless web application, leveraging the power of AWS to manage student information in a secure, efficient, and cost-effective way.\nIn the context of modern technology, building efficient, flexible, and cost-effective web applications is the primary goal of developers. The workshop \u0026ldquo;Deploying a Serverless Website for Managing Student Information with AWS Services\u0026rdquo; will guide you step by step in developing a serverless website, utilizing the powerful AWS services to manage student information securely and optimally.\nThe application supports:\nEntering and retrieving student data with fields like: Student ID, Full Name, Class, Date of Birth, and Email. Intuitive user interface designed with Tailwind CSS, providing a smooth user experience. Serverless architecture, eliminating the need for server management. Advanced features: Security, email notifications, and automatic backups to meet real-world needs. Benefits of Serverless Applications The serverless architecture of AWS offers outstanding advantages, helping you build a student information management system that is not only efficient but also scalable and maintainable. Here are the key benefits:\n1. Automatic Scaling AWS Lambda automatically adjusts resources based on traffic, ensuring smooth application performance even during traffic spikes.\nReal-world example: When hundreds of students access the system simultaneously to view or update their information, Lambda automatically allocates resources without requiring your intervention, helping to:\nOptimize operating costs. Prevent resource waste during periods of low usage. 2. Optimal Security API Gateway uses API Keys to authenticate requests, ensuring that only authorized users can access the data. The system integrates IAM (Identity and Access Management) with distinct roles such as:\nLambdaGetStudentRole LambdaInsertStudentRole DynamoDBBackupRole Real-world example: The Lambda function that fetches data is only allowed to read from DynamoDB, while the backup function only writes to S3, adhering to the least privilege principle.\nBenefits:\nProtects sensitive data. Reduces the risk of attacks or data breaches. 3. Email Notifications AWS SES (Simple Email Service) provides automatic notifications:\nData saving confirmation: Sends an email containing details like Student ID, Full Name, Class, and Date of Birth when data is saved into DynamoDB. Data backup: Sends an email with a pre-signed URL (expires after 1 hour) when data is backed up to S3. Benefits: Instant system updates, ensuring reliable and professional notifications.\n4. Cost Savings The serverless model charges based on actual resource usage:\nLambda: Charges by execution count and runtime. S3: Charges by storage size. CloudFront: Charges based on data transfer. Real-world example: Ideal for applications with variable traffic, significantly reducing operational costs compared to traditional server models.\n5. High Performance AWS CloudFront, a CDN (Content Delivery Network) service, delivers static content (HTML, JavaScript) from S3 to users worldwide with low latency.\nHow it works: Stores content at Edge Locations close to users.\nReal-world example: Students accessing the site from Vietnam, the US, or Europe will have a smooth, fast experience.\nBenefits: Faster page loading, enhancing user experience.\n6. Automatic Backups The system automatically backs up data from DynamoDB to S3 on a schedule set through EventBridge (default: 7:00 AM +07 daily).\nProcess: The Lambda function BackupDynamoDBAndSendEmail creates a JSON file with all student data, stores it in an S3 bucket, and sends a pre-signed URL (expires after 1 hour).\nReal-world example: Easily recover data after an incident, ensuring data safety.\nBenefits:\nLong-term data protection. Automated backup process, saving time. Workshop Goals This workshop will not only help you deploy a student information management website, but also provide practical knowledge about integrating AWS services into a serverless architecture. You will learn how to:\nGoal Technology Outcome Design a modern web interface Tailwind CSS Intuitive, user-friendly interface Create and secure APIs API Gateway, API Key Secure, easy-to-integrate, and scalable API Process and store data Lambda, DynamoDB Efficient, reliable data management Send email notifications SES Instant, professional notifications Distribute content globally CloudFront Fast access, low latency from all regions Automate data backup S3, EventBridge Safe, easily recoverable data Monitor system activity CloudWatch System performance monitoring and optimization Start Your Journey! By completing this workshop, you will gain:\nA fully functional serverless application, ready for real-world use. In-depth skills to develop serverless applications with AWS. Confidence in integrating cloud services into personal or business projects. Ready to join?\nHead over to Preparation Steps to explore the detailed setup process!\n"
},
{
	"uri": "//localhost:1313/3-creating-lambda-functions/3.1-create-the-getstudentdata-function/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to create 1 Linux instance on the public subnet and 1 Window instance on the private subnet to perform this lab.\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC In order to use System Manager to manage our window instances in particular and our instances in general on AWS, we need to give permission to our instances to be able to work with System Manager. In this preparation, we will also proceed to create an IAM Role to grant permissions to instances that can work with System Manager.\nContent Prepare VPC and EC2 Create IAM Role "
},
{
	"uri": "//localhost:1313/6-configuring-s3-buckets/6.1-creating-a-new-s3-bucket/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/",
	"title": "Website Serverless",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/2-preparation-steps/2.1-create-iam-role-for-lambda-get/",
	"title": "Create IAM Role for Lambda Get",
	"tags": [],
	"description": "",
	"content": " Objective: Create the IAM role LambdaGetStudentRole for the Lambda function getStudentData, granting permissions to read data from the DynamoDB table studentData, log data to CloudWatch, and support potential interactions with S3 and CloudFront.\nThe function getStudentData performs a Scan operation to retrieve all student data (Student ID, Full Name, Class, Date of Birth, Email) from the DynamoDB table studentData. This role needs to include:\nPermissions to log data to CloudWatch (AWSLambdaBasicExecutionRole). Permissions to read data from DynamoDB (AmazonDynamoDBReadOnlyAccess). Permissions for S3 and CloudFront (AmazonS3FullAccess, CloudFrontFullAccess) for potential future features. Note: AmazonS3FullAccess and CloudFrontFullAccess are not currently used in the code, but are retained for future functionalities (e.g., saving files to S3 or managing CloudFront).\nDetailed Steps Below are the detailed steps to create the IAM role LambdaGetStudentRole:\n1. Access the AWS Management Console Open your browser and log in to the AWS Management Console with your AWS account.\nIn the search bar at the top of the page, type IAM and select Identity and Access Management (IAM).\nFigure 1: AWS Console interface with the IAM search bar.\n2. Navigate to the Roles Section In the IAM interface, find the left-hand navigation menu.\nSelect Roles to view the list of IAM roles. If no roles exist, the list will be empty.\nFigure 2: Navigation menu with the Roles option.\n3. Start the Role Creation Process In the Roles interface, click the Create Role button in the top-right corner.\nFigure 3: Create Role button in the Roles interface.\n4. Choose Trusted Entity Type In the Select trusted entity section, choose AWS Service to specify that the role is for an AWS service.\nIn the Use case section, select Lambda from the list of services.\nClick Next to move to the permission configuration step.\nFigure 4: Choosing AWS Service and Lambda in Use case.\n5. Grant Permissions to the Role In the Permissions section, add the following four policies:\nAWSLambdaBasicExecutionRole:\nType AWSLambdaBasicExecutionRole in the search bar. Select the AWSLambdaBasicExecutionRole policy. Description: Allows Lambda functions to log to CloudWatch for monitoring and debugging.\nFigure 5: Selecting the AWSLambdaBasicExecutionRole policy.\nAmazonDynamoDBReadOnlyAccess:\nType AmazonDynamoDBReadOnlyAccess in the search bar. Select the AmazonDynamoDBReadOnlyAccess policy. Description: Grants read-only access to DynamoDB, supporting operations like Scan or GetItem.\nFigure 6: Selecting the AmazonDynamoDBReadOnlyAccess policy.\nAmazonS3FullAccess:\nType AmazonS3FullAccess in the search bar. Select the AmazonS3FullAccess policy. Description: Grants read, write, and manage S3 buckets for potential future features (e.g., storing additional files).\nFigure 7: Selecting the AmazonS3FullAccess policy.\nCloudFrontFullAccess:\nType CloudFrontFullAccess in the search bar. Select the CloudFrontFullAccess policy. Description: Grants permission to manage CloudFront distributions for potential future features.\nFigure 8: Selecting the CloudFrontFullAccess policy.\nVerify the list of Permissions policies to ensure it includes:\nAWSLambdaBasicExecutionRole AmazonDynamoDBReadOnlyAccess AmazonS3FullAccess CloudFrontFullAccess Click Next.\n6. Name and Review the Role In the Role details section:\nRole Name: Enter LambdaGetStudentRole. Note: The name must match exactly with the Lambda function configuration for getStudentData.\nDescription (optional): Enter a description, e.g., \u0026ldquo;IAM role for Lambda function getStudentData, granting read access to DynamoDB, CloudWatch logging, and supporting S3/CloudFront.\u0026rdquo; Figure 9: Enter role name and description.\nDouble-check:\nTrusted entity: AWS Service (Lambda). Permissions: AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonS3FullAccess, CloudFrontFullAccess. Click Create Role.\nFigure 10: Create Role button to confirm.\n7. Check Role Creation Status After clicking Create Role, you will return to the Roles list.\nFind the LambdaGetStudentRole role. If successful, you should see the message: \u0026ldquo;Role LambdaGetStudentRole created\u0026rdquo;.\nClick on LambdaGetStudentRole to view details:\nARN: Record the ARN (e.g., arn:aws:iam::your-account-id:role/LambdaGetStudentRole) to use when configuring the Lambda function. Policies: Verify the inclusion of AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonS3FullAccess, CloudFrontFullAccess. If the role does not appear, refresh the page or double-check the steps.\nFigure 11: Role details for LambdaGetStudentRole with ARN and policies.\nImportant Notes Factor Details Role Name Must be LambdaGetStudentRole (case-sensitive) to match the Lambda function. Incorrect names will cause execution errors. S3 and CloudFront AmazonS3FullAccess and CloudFrontFullAccess are not currently used, but kept for future functionality (e.g., storing files in S3 or managing CloudFront). Delete if unnecessary to comply with least privilege. Security Optimization Consider creating a custom policy instead of AmazonDynamoDBReadOnlyAccess to restrict access specifically to the studentData table. Check Early Record the ARN and verify the role in IAM before configuring the Lambda function to ensure proper setup. Error Handling If you encounter an \u0026ldquo;Access Denied\u0026rdquo; error, check AWS account permissions (iam:CreateRole) or contact your administrator. Practical Tip: Always verify the ARN and policies immediately after creating the role to confirm configuration before integrating with Lambda.\nConclusion The IAM role LambdaGetStudentRole ensures that the Lambda function getStudentData has permissions to read data from DynamoDB, log data to CloudWatch, and support potential extensions with S3 and CloudFront. This role is now ready to be integrated into the Lambda function in the next steps.\nNext Step: Proceed to Create IAM Role for Lambda Post to set up the role for the function that stores student data!\n"
},
{
	"uri": "//localhost:1313/2-preparation-steps/2.2-create-iam-role-for-lambda-post/",
	"title": "Create IAM Role for Lambda Post",
	"tags": [],
	"description": "",
	"content": " Objective: Create the IAM role LambdaInsertStudentRole for the Lambda function insertStudentData, granting permissions to write data to the DynamoDB table studentData, send emails via AWS SES, log data to CloudWatch, and support potential interactions with S3 and CloudFront.\nThe function insertStudentData performs:\nStores student information (Student ID, Full Name, Class, Date of Birth, Email) into the DynamoDB table studentData via the PutItem operation. Sends a confirmation email to the student\u0026rsquo;s email address via AWS SES. This role needs:\nPermissions to log data to CloudWatch (AWSLambdaBasicExecutionRole). Permissions to read and write data to DynamoDB (AmazonDynamoDBFullAccess). Permissions to send email via SES (AmazonSESFullAccess). Permissions for S3 and CloudFront (AmazonS3FullAccess, CloudFrontFullAccess) for potential future features. Note: AmazonS3FullAccess and CloudFrontFullAccess are not currently used in the code, but are retained for future functionalities (e.g., saving files to S3 or managing CloudFront).\nDetailed Steps Below are the detailed steps to create the IAM role LambdaInsertStudentRole:\n1. Access the AWS Management Console Open your browser and log in to the AWS Management Console with your AWS account.\nIn the search bar at the top of the page, type IAM and select Identity and Access Management (IAM).\nEnsure you are in the correct AWS region (e.g., us-east-1), check in the top right corner.\nFigure 1: AWS Console interface with the IAM search bar.\n2. Navigate to the Roles Section In the IAM interface, find the left-hand navigation menu.\nSelect Roles to view the list of IAM roles. If no roles exist, the list will be empty.\nFigure 2: Navigation menu with the Roles option.\n3. Start the Role Creation Process In the Roles interface, click the Create Role button in the top-right corner.\nFigure 3: Create Role button in the Roles interface.\n4. Choose Trusted Entity Type In the Select trusted entity section, choose AWS Service to specify that the role is for an AWS service.\nIn the Use case section, select Lambda from the list of services.\nClick Next to move to the permission configuration step.\nFigure 4: Choosing AWS Service and Lambda in Use case.\n5. Grant Permissions to the Role In the Permissions section, add the following policies:\nAWSLambdaBasicExecutionRole:\nType AWSLambdaBasicExecutionRole in the search bar. Select the AWSLambdaBasicExecutionRole policy. Description: Allows the Lambda function to log to CloudWatch for monitoring and debugging.\nFigure 5: Selecting the AWSLambdaBasicExecutionRole policy.\nAmazonDynamoDBFullAccess:\nType AmazonDynamoDBFullAccess in the search bar. Select the AmazonDynamoDBFullAccess policy. Description: Grants read and write access to DynamoDB, including the PutItem operation required for the insertStudentData function.\nFigure 6: Selecting the AmazonDynamoDBFullAccess policy.\nAmazonSESFullAccess:\nType AmazonSESFullAccess in the search bar. Select the AmazonSESFullAccess policy. Description: Grants permission to send emails via SES to send confirmation notifications (e.g., to nguyentribaothang@gmail.com).\nFigure 7: Selecting the AmazonSESFullAccess policy.\nAmazonS3FullAccess (optional):\nType AmazonS3FullAccess in the search bar. Select the AmazonS3FullAccess policy. Description: Grants read, write, and manage S3 buckets for potential future features.\nFigure 8: Selecting the AmazonS3FullAccess policy.\nCloudFrontFullAccess (optional):\nType CloudFrontFullAccess in the search bar. Select the CloudFrontFullAccess policy. Description: Grants permission to manage CloudFront distributions for potential future features.\nFigure 9: Selecting the CloudFrontFullAccess policy.\nVerify the list of Permissions policies to ensure it includes:\nAWSLambdaBasicExecutionRole AmazonDynamoDBFullAccess AmazonSESFullAccess AmazonS3FullAccess CloudFrontFullAccess Click Next.\n6. Name and Review the Role In the Role details section:\nRole Name: Enter LambdaInsertStudentRole. Note: The name must match exactly with the Lambda function configuration for insertStudentData.\nDescription (optional): Enter a description, e.g., \u0026ldquo;IAM role for Lambda function insertStudentData, granting write access to DynamoDB, sending emails via SES, logging to CloudWatch, and supporting S3/CloudFront.\u0026rdquo; Figure 10: Enter role name and description.\nDouble-check:\nTrusted entity: AWS Service (Lambda). Permissions: AWSLambdaBasicExecutionRole, AmazonDynamoDBFullAccess, AmazonSESFullAccess, AmazonS3FullAccess, CloudFrontFullAccess. Click Create Role.\n7. Check Role Creation Status After clicking Create Role, you will return to the Roles list.\nFigure 11: Click Create Role to finalize the creation.\nFind the LambdaInsertStudentRole role. If successful, you should see the message: \u0026ldquo;Role LambdaInsertStudentRole created\u0026rdquo;.\nFigure 12: Success message for the LambdaInsertStudentRole creation.\nClick on LambdaInsertStudentRole to view details:\nARN: Record the ARN (e.g., arn:aws:iam::your-account-id:role/LambdaInsertStudentRole) to use when configuring the Lambda function. Policies: Verify that the correct policies are attached. If the role does not appear, refresh the page or check the steps again.\nImportant Notes Factor Details Role Name Must be LambdaInsertStudentRole (case-sensitive) to match the Lambda function. Incorrect names will cause execution errors. DynamoDB Permissions AmazonDynamoDBReadOnlyAccess does not support PutItem. Use AmazonDynamoDBFullAccess to allow PutItem on the studentData table. S3 and CloudFront AmazonS3FullAccess and CloudFrontFullAccess are not currently used, but are retained for potential future functionalities (e.g., saving files to S3 or managing CloudFront). Delete if unnecessary to comply with least privilege. Check Early Record the ARN and verify the role in IAM before configuring the Lambda function to ensure proper setup. Error Handling If you encounter an \u0026ldquo;Access Denied\u0026rdquo; error, check AWS account permissions (iam:CreateRole, iam:AttachRolePolicy) or contact your administrator. If the function reports AccessDenied, check the DynamoDB policy. Use CloudTrail or IAM Access Advisor to pinpoint the issue. AWS Region Ensure the AWS region (e.g., us-east-1) is consistent with other services (DynamoDB, Lambda, SES). Check in the top right corner of the AWS Console. Practical Tip: Always verify the role and ARN immediately after creation to confirm correct configuration before integrating with the Lambda function.\nConclusion The IAM role LambdaInsertStudentRole ensures that the Lambda function insertStudentData has the necessary permissions to write data to DynamoDB, send emails via SES, and log data to CloudWatch, while supporting future extensions with S3 and CloudFront. With AmazonDynamoDBFullAccess, the function operates efficiently and securely in a serverless application.\nNext Step: Proceed to Create IAM Role for DynamoDB Backup to set up the role for data backup!\n"
},
{
	"uri": "//localhost:1313/4-creating-a-restful-api/4.2-creating-an-api-key/",
	"title": "Manage session logs",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "//localhost:1313/2-preparation-steps/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to create 1 Linux instance on the public subnet and 1 Window instance on the private subnet to perform this lab.\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC In order to use System Manager to manage our window instances in particular and our instances in general on AWS, we need to give permission to our instances to be able to work with System Manager. In this preparation, we will also proceed to create an IAM Role to grant permissions to instances that can work with System Manager.\nContent Prepare VPC and EC2 Create IAM Role "
},
{
	"uri": "//localhost:1313/6-configuring-s3-buckets/6.2-uploading-static-assets-to-s3/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/2-preparation-steps/2.3-create-iam-role-for-dynamodb-backup/",
	"title": "Create IAM Role for DynamoDB Backup",
	"tags": [],
	"description": "",
	"content": " Objective: Create the IAM role DynamoDBBackupRole for the Lambda function BackupDynamoDBAndSendEmail, granting permissions to read and write data to the DynamoDB table studentData, store backup files in S3, send emails via SES, log data to CloudWatch, and support potential interactions with CloudFront.\nThe function BackupDynamoDBAndSendEmail performs:\nReads student data (Student ID, Full Name, Class, Date of Birth, Email) from the DynamoDB table studentData via the Scan operation. Stores a JSON file in an S3 bucket (e.g., student-backup-20250706). Creates a pre-signed URL for the backup file and sends a notification email via SES (e.g., to nguyentribaothang@gmail.com). Logs data to CloudWatch for monitoring. This role needs:\nPermissions to read and write data to DynamoDB (AmazonDynamoDBFullAccess). Permissions to store and create URLs on S3 (AmazonS3FullAccess). Permissions to send emails via SES (AmazonSESFullAccess). Permissions to log data to CloudWatch (AWSLambdaBasicExecutionRole). Permissions for CloudFront (CloudFrontFullAccess) for potential future features. Note: CloudFrontFullAccess is not currently used but is retained for future functionalities (e.g., managing CloudFront distributions).\nDetailed Steps Below are the detailed steps to create the IAM role DynamoDBBackupRole:\n1. Access the AWS Management Console Open your browser and log in to the AWS Management Console with your AWS account.\nIn the search bar, type IAM and select Identity and Access Management (IAM).\nEnsure you are in the correct AWS region (e.g., us-east-1), check in the top right corner.\nFigure 1: AWS Console interface with the IAM search bar.\n2. Navigate to the Roles Section In the IAM interface, find the left-hand navigation menu.\nSelect Roles to view the list of IAM roles. If no roles exist, the list will be empty.\nFigure 2: Navigation menu with the Roles option.\n3. Start the Role Creation Process In the Roles interface, click the Create Role button in the top-right corner.\nFigure 3: Create Role button in the Roles interface.\n4. Choose Trusted Entity Type In the Select trusted entity section, choose AWS Service to specify that the role is for an AWS service.\nIn the Use case section, select Lambda from the list of services.\nClick Next to move to the permission configuration step.\nFigure 4: Choosing AWS Service and Lambda in Use case.\n5. Grant Permissions to the Role In the Permissions section, add the following five policies:\nAmazonDynamoDBFullAccess:\nType AmazonDynamoDBFullAccess in the search bar. Select the AmazonDynamoDBFullAccess policy. Description: Grants read and write access to DynamoDB, supporting operations like Scan and other operations if needed.\nFigure 5: Selecting the AmazonDynamoDBFullAccess policy.\nAmazonS3FullAccess:\nType AmazonS3FullAccess in the search bar. Select the AmazonS3FullAccess policy. Description: Grants permissions to store backup files in S3 (PutObject) and create pre-signed URLs (GeneratePresignedUrl).\nFigure 6: Selecting the AmazonS3FullAccess policy.\nAmazonSESFullAccess:\nType AmazonSESFullAccess in the search bar. Select the AmazonSESFullAccess policy. Description: Grants permission to send emails via SES to notify users with a backup download link (e.g., to nguyentribaothang@gmail.com).\nFigure 7: Selecting the AmazonSESFullAccess policy.\nAWSLambdaBasicExecutionRole:\nType AWSLambdaBasicExecutionRole in the search bar. Select the AWSLambdaBasicExecutionRole policy. Description: Allows the Lambda function to log to CloudWatch for monitoring and debugging.\nFigure 8: Selecting the AWSLambdaBasicExecutionRole policy.\nCloudFrontFullAccess:\nType CloudFrontFullAccess in the search bar. Select the CloudFrontFullAccess policy. Description: Grants permission to manage CloudFront distributions for potential future features.\nFigure 9: Selecting the CloudFrontFullAccess policy.\nVerify the list of Permissions policies to ensure it includes:\nAmazonDynamoDBFullAccess AmazonS3FullAccess AmazonSESFullAccess AWSLambdaBasicExecutionRole CloudFrontFullAccess Click Next.\n6. Name and Review the Role In the Role details section:\nRole Name: Enter DynamoDBBackupRole. Note: The name must match exactly with the Lambda function configuration for BackupDynamoDBAndSendEmail.\nDescription (optional): Enter a description, e.g., \u0026ldquo;IAM role for Lambda function BackupDynamoDBAndSendEmail, granting read and write access to DynamoDB, store backups to S3, send emails via SES, log to CloudWatch, and support CloudFront.\u0026rdquo; Figure 10: Enter role name and description.\nDouble-check:\nTrusted entity: AWS Service (Lambda). Permissions: AmazonDynamoDBFullAccess, AmazonS3FullAccess, AmazonSESFullAccess, AWSLambdaBasicExecutionRole, CloudFrontFullAccess. Click Create Role.\nFigure 11: Create Role button to finalize the creation.\n"
},
{
	"uri": "//localhost:1313/4-creating-a-restful-api/4.3-creating-a-usage-plan/",
	"title": "Manage session logs",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "//localhost:1313/3-creating-lambda-functions/3.3-create-the-backupdynamodbandsendemail-function/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to create 1 Linux instance on the public subnet and 1 Window instance on the private subnet to perform this lab.\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC In order to use System Manager to manage our window instances in particular and our instances in general on AWS, we need to give permission to our instances to be able to work with System Manager. In this preparation, we will also proceed to create an IAM Role to grant permissions to instances that can work with System Manager.\nContent Prepare VPC and EC2 Create IAM Role "
},
{
	"uri": "//localhost:1313/3-creating-lambda-functions/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to create 1 Linux instance on the public subnet and 1 Window instance on the private subnet to perform this lab.\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC In order to use System Manager to manage our window instances in particular and our instances in general on AWS, we need to give permission to our instances to be able to work with System Manager. In this preparation, we will also proceed to create an IAM Role to grant permissions to instances that can work with System Manager.\nContent Prepare VPC and EC2 Create IAM Role "
},
{
	"uri": "//localhost:1313/6-configuring-s3-buckets/6.3-enabling-static-website-hosting/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/4-creating-a-restful-api/",
	"title": "Creating a REST API",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "//localhost:1313/4-creating-a-restful-api/4.4-creating-a-get-method/",
	"title": "Manage session logs",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "//localhost:1313/2-preparation-steps/2.4-createtable-in-dynamodb/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to create 1 Linux instance on the public subnet and 1 Window instance on the private subnet to perform this lab.\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC In order to use System Manager to manage our window instances in particular and our instances in general on AWS, we need to give permission to our instances to be able to work with System Manager. In this preparation, we will also proceed to create an IAM Role to grant permissions to instances that can work with System Manager.\nContent Prepare VPC and EC2 Create IAM Role "
},
{
	"uri": "//localhost:1313/6-configuring-s3-buckets/6.4-setting-bucket-policy-for-public-access/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/testchaper/example/",
	"title": "Example",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "//localhost:1313/testchaper/",
	"title": "TestChaper",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "//localhost:1313/4-creating-a-restful-api/4.5-creating-a-post-method/",
	"title": "Manage session logs",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "//localhost:1313/2-preparation-steps/2.5-configureses/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to create 1 Linux instance on the public subnet and 1 Window instance on the private subnet to perform this lab.\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC In order to use System Manager to manage our window instances in particular and our instances in general on AWS, we need to give permission to our instances to be able to work with System Manager. In this preparation, we will also proceed to create an IAM Role to grant permissions to instances that can work with System Manager.\nContent Prepare VPC and EC2 Create IAM Role "
},
{
	"uri": "//localhost:1313/5-designing-the-website-interface/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/6-configuring-s3-buckets/6.5-updating-bucket-policy-to-support-backup/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/4-creating-a-restful-api/4.6-creating-a-backup-resource-and-method/",
	"title": "Manage session logs",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "//localhost:1313/6-configuring-s3-buckets/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/4-creating-a-restful-api/4.7-enabling-cors/",
	"title": "Manage session logs",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "//localhost:1313/4-creating-a-restful-api/4.8-deploying-the-api/",
	"title": "Manage session logs",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "//localhost:1313/4-creating-a-restful-api/4.9-linking-api-key-to-usage-plan-and-stage/",
	"title": "Manage session logs",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "//localhost:1313/3-creating-lambda-functions/3.2-create-the-insertstudentdata-function/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]