[
{
	"uri": "/3-creating-lambda-functions/3.1-create-the-getstudentdata-function/",
	"title": "Configure Lambda Function getStudentData",
	"tags": [],
	"description": "",
	"content": " Objective: Create and configure the Lambda function getStudentData to retrieve all student data from the DynamoDB studentData table, including fields Student ID (studentid), Full Name (name), Class (class), Date of Birth (birthdate), and Email (email). This function uses the Scan operation to fetch the data and returns the results in JSON format, supporting integration with the web interface via API Gateway.\nThe function will use Python 3.13, architecture x86_64, assigned the IAM role LambdaGetStudentRole (created in section 2.1), and integrated with DynamoDB.\nInitial Requirements You need to complete the preparation steps in section 2 (IAM Role LambdaGetStudentRole, DynamoDB table studentData) before creating the function. Ensure your AWS account is ready and the AWS region is us-east-1.\nOverview of the getStudentData Function The getStudentData function performs the following tasks:\nConnects to the DynamoDB studentData table in the AWS region (default is us-east-1). Performs a Scan operation to retrieve all student data, handling pagination if the table is large. Returns the data in JSON format with a CORS header (Access-Control-Allow-Origin: '*') so that the web interface (running on CloudFront) can access it via API Gateway. Logs to CloudWatch for monitoring and debugging (supported by the AWSLambdaBasicExecutionRole policy). Detailed Steps Access AWS Management Console\nOpen your browser and log in to the AWS Management Console with your AWS account.\nIn the search bar at the top, type Lambda and select AWS Lambda to enter the management interface.\nEnsure the AWS region is us-east-1 (matching the studentData table), check in the top-right corner of the AWS Console.\nFigure 1: AWS Console interface with the Lambda search bar.\nNavigate to Functions Section\nIn the AWS Lambda interface, look at the left-hand navigation menu.\nSelect Functions to see the list of existing Lambda functions. If none exist, the list will be empty.\nFigure 2: Navigation menu with the Functions option.\nStart the Create Function Process\nIn the Functions interface, click the Create function button in the top-right corner to start configuring a new function.\nFigure 3: Create function button in the Functions interface.\nConfigure Basic Function Information\nIn the Function type section, select Author from scratch.\nIn the Function name field, enter getStudentData.\nIn the Runtime section, select Python 3.13. If Python 3.13 is unavailable, select the latest version (e.g., Python 3.12 or 3.11).\nIn the Architecture section, select x86_64.\nFigure 4: Basic function configuration interface.\nIn the Permissions section, choose Use an existing role, and select LambdaGetStudentRole (created in section 2.1, including AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonS3FullAccess, CloudFrontFullAccess).\nNote: AmazonS3FullAccess and CloudFrontFullAccess are not used in the current code but are retained from previous requirements.\nKeep the other settings as defaults and click Create function.\nFigure 5: Select LambdaGetStudentRole and click Create function.\nCheck the Function Creation Status\nAfter clicking Create function, you will be redirected to the getStudentData function details page.\nThe interface will display a message like: \u0026ldquo;Successfully created the function getStudentData. You can now change its code and configuration. To invoke your function with a test event, choose Test.\u0026rdquo;\nIf you don\u0026rsquo;t see this message or encounter an error, check that LambdaGetStudentRole exists and that your AWS account has the lambda:CreateFunction permission.\nFigure 6: Function details page after creating getStudentData.\nConfigure Source Code\nIn the Code tab, scroll down to the Code source section. In the lambda_function.py file, delete the default code and paste the following: import json import boto3 def lambda_handler(event, context): # Connect to DynamoDB in the us-east-1 region dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;, region_name=\u0026#39;us-east-1\u0026#39;) table = dynamodb.Table(\u0026#39;studentData\u0026#39;) # Retrieve all data from the studentData table response = table.scan() data = response[\u0026#39;Items\u0026#39;] # Continue scanning if there is more data (pagination) while \u0026#39;LastEvaluatedKey\u0026#39; in response: response = table.scan(ExclusiveStartKey=response[\u0026#39;LastEvaluatedKey\u0026#39;]) data.extend(response[\u0026#39;Items\u0026#39;]) # Return the data in JSON format return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(data), \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39; } } "
},
{
	"uri": "/4-creating-a-restful-api/4.1-creating-a-rest-api/",
	"title": "Create a New REST API on API Gateway",
	"tags": [],
	"description": "",
	"content": " Objective: Create a new REST API in AWS API Gateway with the name student and the Edge-optimized endpoint type, to integrate with Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail) and the web interface (running on CloudFront). This API will provide endpoints to access, store, and back up student data, while being secured with an API Key and supporting CORS.\nOverview of REST API in API Gateway AWS API Gateway is a serverless service that allows the creation of RESTful or HTTP APIs, connecting the web interface with backend services like Lambda, DynamoDB, or S3. The student API will include the following endpoints: GET /students: Calls the getStudentData function to fetch the student list from the DynamoDB studentData table. POST /students: Calls the insertStudentData function to store student information and send a confirmation email via SES. POST /backup: Calls the BackupDynamoDBAndSendEmail function to back up data to S3 and send an email notification. The Edge-optimized endpoint uses CloudFront to reduce latency, which is suitable for the web interface deployed via CloudFront. Prerequisites You need to complete the steps in section 3 (create Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, DynamoDB table studentData, S3 bucket student-backup-20250706, SES email verification). Ensure your AWS account is set up, and the AWS region is us-east-1.\nDetailed Steps Access the AWS Management Console\nOpen your browser and log in to the AWS Management Console with your AWS account.\nIn the search bar at the top, type API Gateway and select the Amazon API Gateway service to go to the management interface.\nCheck the AWS region: Make sure you are working in the primary AWS region (e.g., us-east-1), and check the region at the top right corner of the AWS Console. This region should match with the Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), DynamoDB table studentData, S3 bucket student-backup-20250706, and SES.\nFigure 1: AWS Console Interface with API Gateway Search Bar.\nNavigate to the APIs Section\nIn the main Amazon API Gateway interface, look at the left navigation menu.\nSelect APIs to view the list of existing APIs. If you haven\u0026rsquo;t created any API, the list will be empty.\nThe interface will show options to create or manage APIs.\nFigure 2: Navigation Menu with APIs Option.\nInitiate the API Creation Process\nIn the APIs interface, click the Create API button at the top right to start creating a new API.\nIf you immediately see the REST API option, move to step 4. If not, the interface will list types of APIs (REST API, HTTP API, WebSocket API).\nFigure 3: Create API Button in the APIs Interface.\nChoose REST API and Build\nIn the Create API interface, find the REST API option (not REST API Private or HTTP API).\nClick Build under REST API to begin creating a RESTful API.\nREST API Notes:\nREST API supports features like API Key, CORS, and Lambda Proxy integration, which are suitable for this system. Compared to HTTP API (lighter, cheaper) and REST API Private (only accessible within a VPC), REST API is the best choice for a public application integrated with CloudFront. Figure 4: Choose REST API and Click Build.\nConfigure the API Details\nIn the API Details section: Choose New API to create a new API from scratch. API name: Enter student (different from StudentManagementAPI in section 4 earlier, I will use student as requested). Description: Enter REST API for student management system, integrated with Lambda and CloudFront. API endpoint Type: Choose Edge-optimized. Explanation: Edge-optimized: The API is distributed via CloudFront, using edge locations to reduce latency for global users. Suitable for a web interface running on CloudFront. Regional: The API only serves within one AWS region, suitable if global latency optimization is not needed. Private: Only accessible within a VPC, not suitable for a public application. Keep other settings at their default values. Figure 5: API Configuration Interface.\nClick Create API to create the API.\nFigure 6: Click Create API Button.\nCheck API Creation Status\nAfter clicking Create API, you will be redirected to the management page for the student API. The interface will display the message: \u0026ldquo;Successfully created REST API ‘student’.\u0026rdquo; If you don\u0026rsquo;t see this message or encounter an error: Check if your AWS account\u0026rsquo;s IAM permissions include apigateway:POST to create APIs. Ensure you have selected REST API and Edge-optimized correctly. In the left menu, select Resources to begin configuring the resources and methods (which will be done in steps 4.4, 4.5, and 4.6). Figure 7: API Management Page for student API after creation.\nImportant Notes Element Details API Name The name student must be entered exactly as it will appear in the Invoke URL (e.g., https://api-id.execute-api.us-east-1.amazonaws.com/prod). Edge-optimized vs Regional Edge-optimized is suitable for this system because the web interface uses CloudFront. The Invoke URL will have the format using CloudFront edge locations. If you need to integrate with a custom domain (e.g., api.system.edu.vn), ensure you configure the domain in API Gateway and CloudFront after the API is created. AWS Region Ensure the region us-east-1 matches with the Lambda functions, DynamoDB studentData table, S3 bucket student-backup-20250706, and SES. If you\u0026rsquo;re using a different region (e.g., us-west-2), you will need to adjust when configuring Lambda integration (steps 4.4, 4.5, 4.6). Error Handling If you encounter an \u0026ldquo;AccessDenied\u0026rdquo; error, check your AWS account IAM permissions. If the API is not showing up, refresh the page or check the AWS region again. Optimization After creating the API, you can add more detailed descriptions in Settings (left menu) or enable API Gateway logging for monitoring: - Go to Settings \u0026gt; CloudWatch Logs \u0026gt; Select Enable CloudWatch Logs and set the log level (e.g., INFO). - This helps debug when integrating with Lambda or the web interface. Early Testing After creating the API, verify that the student API appears in the APIs list and check the Invoke URL after deployment (step 4.8) to ensure the API is ready for integration. Practical Tip: Verify that the student API appears in the APIs list and check the Invoke URL after deployment (step 4.8) to ensure the API is ready for integration.\nConclusion The student REST API has been successfully created in AWS API Gateway with the Edge-optimized endpoint type, ready to configure resources and methods in the next steps.\nNext step: Go to Create API Key to Secure Access to continue!\n"
},
{
	"uri": "/6-configuring-s3-buckets/6.1-creating-a-new-s3-bucket/",
	"title": "Create a New S3 Bucket",
	"tags": [],
	"description": "",
	"content": " Objective: Create a new Amazon S3 Bucket named student-management-website-2025 to store static files (index.html, styles.css, scripts.js from section 5) for the Student Data Management application\u0026rsquo;s web interface. This bucket will be configured to support Static Website Hosting (section 6.3) and serve content via CloudFront (section 7), integrated with the student API (stage prod, section 4.8) to call the GET /students, POST /students, and POST /backup endpoints with API Key security (StudentApiKey, section 4.2) and CORS (section 4.7).\nOverview of the S3 Bucket in the Application Role of the student-management-website-2025 bucket: Store static files (index.html, styles.css, scripts.js) for the web interface using Tailwind CSS. Enable Static Website Hosting to provide an endpoint to access the interface (to be distributed via CloudFront to support HTTPS and high performance). Uncheck Block all public access to allow the configuration of public access permissions (s3:GetObject) in the Bucket Policy (section 6.4), which is required for CloudFront to access the content. Enable Bucket Versioning to store versions of the files, supporting recovery in case of errors when updating the interface. Integration with the system: The web interface calls the student API (section 4.8) using the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey in the x-api-key header. CORS is configured (section 4.7) to support requests from the CloudFront domain (e.g., https://d12345678.cloudfront.net). This bucket differs from the student-backup-20250706 bucket (section 2.4, 6.5), which is used to store backup files from the POST /backup endpoint. Initial Requirements You need to complete section 2.4 (create the student-backup-20250706 bucket), section 3 (create the Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, DynamoDB table studentData, SES email verification), section 4.1 (create the student API), section 4.2 (create the StudentApiKey), section 4.3 (create StudentUsagePlan), section 4.4 (create the GET /students method), section 4.5 (create the POST /students method), section 4.6 (create the /backup resource and POST /backup method), section 4.7 (enable CORS), section 4.8 (deploy the API to the prod stage), section 4.9 (link the StudentApiKey to StudentUsagePlan and associate with the student API in the prod stage), and section 5 (build the web interface with index.html, styles.css, scripts.js). Ensure your AWS account has permissions to access S3 (s3:CreateBucket, s3:PutBucketPolicy) and the AWS region is us-east-1.\nDetailed Actions Access the AWS Management Console\nOpen your browser and log into the AWS Management Console using your AWS account. In the search bar at the top of the page, type S3 and select the Amazon S3 service to enter the bucket management interface. Check the AWS region: Ensure you are working in the us-east-1 (US East (N. Virginia)) region to sync with the student API, Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), DynamoDB table studentData, student-backup-20250706 bucket, and SES. The region is displayed in the top right corner of the AWS Console.\nFigure 1: AWS Console Interface with the S3 search bar. Open the Create Bucket Interface\nIn the main Amazon S3 interface, look at the left navigation menu or the main section. Click the Create bucket button (usually located at the top right) to open the create bucket configuration interface. Note: If the interface shows a list of existing buckets, check if the student-management-website-2025 bucket already exists to avoid duplication.\nFigure 2: Create Bucket Button in the S3 Interface. Configure the student-management-website-2025 Bucket\nIn the Create bucket interface, enter the following information: Bucket name: Enter student-management-website-2025. The bucket name must be globally unique (it cannot be the same as any existing bucket in AWS). If the name is already taken, try adding a random suffix (e.g., student-management-website-20250706-abc123). The name must follow the rules: only lowercase letters, numbers, hyphens (-), and no spaces or other special characters. AWS Region: Select US East (N. Virginia) us-east-1 to sync with other services in the system. Bucket type: Choose General purpose (suitable for storing static content). Object Ownership: Choose ACLs enabled \u0026gt; Bucket owner preferred to support public access permissions via Bucket Policy (section 6.4). This allows managing permissions using Access Control Lists (ACLs) and Bucket Policy, which is necessary for CloudFront to access the files.\nFigure 3: Configure Bucket Name and AWS Region. Block Public Access settings for this bucket: Uncheck Block all public access and all related sub-options: Block public access to buckets and objects granted through new access control lists Block public access to buckets and objects granted through new public bucket or access point policies Block public access from access points Reason: Public access (s3:GetObject) needs to be allowed for CloudFront to serve the web interface. After configuring the Bucket Policy (section 6.4), unrelated options can be enabled again for added security.\nFigure 4: Uncheck Block Public Access. Bucket Versioning: Select Enable to enable Bucket Versioning. Reason: Store versions of the files (index.html, styles.css, scripts.js) to recover them if errors occur while updating the interface (e.g., mistakenly uploading the wrong file).\nFigure 5: Enable Bucket Versioning. Tags (Optional): Add tags to manage costs, e.g., Project=StudentManagement, Environment=Production. Default encryption: Select Enable \u0026gt; Server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt data at rest, enhancing security for the interface files. Advanced settings: Leave the defaults (no need to configure Object Lock or Multi-Region Access Points for static content). Review configuration: Check the information, especially the bucket name, region, and Block Public Access settings. Click Create bucket to finish.\nFigure 6: Review and Click Create Bucket. Create the Bucket\nAfter clicking Create bucket, you should see the message: \u0026ldquo;Successfully created bucket \u0026lsquo;student-management-website-2025\u0026rsquo;.\u0026rdquo; Expected result: In the Buckets list, the student-management-website-2025 bucket should appear with a newly created status. Error handling: If you encounter the \u0026ldquo;Bucket name already exists\u0026rdquo;: Change the bucket name (e.g., student-management-website-20250706-\u0026lt;random-string\u0026gt;). Check if you have permissions to create a bucket (s3:CreateBucket) in the IAM role. If you encounter the \u0026ldquo;AccessDenied\u0026rdquo;: Check if the IAM role for your AWS account has s3:CreateBucket and s3:PutBucketPolicy permissions.\nFigure 7: Bucket Creation Status Notification. Check the Bucket\nIn S3 \u0026gt; Buckets, select student-management-website-2025 to verify: Properties: Check the region (us-east-1), Bucket Versioning (Enabled), Default encryption (SSE-S3). Permissions: Verify that Block all public access is unchecked to support the Bucket Policy (section 6.4). Note: This bucket will be used to upload interface files (section 6.2), enable Static Website Hosting (section 6.3), and configure public access permissions (section 6.4) before integrating with CloudFront. Important Notes Factor Details Bucket Name - The name student-management-website-2025 is recommended for easy identification, but it must be globally unique. If it’s already taken, add a random suffix (e.g., student-management-website-20250706-abc123). - Ensure it does not conflict with the backup bucket (student-backup-20250706, section 2.4). Security - Unchecking Block all public access is temporary to configure Bucket Policy (section 6.4). After configuring, unrelated options can be re-enabled for better security. - For better security, use CloudFront Origin Access Identity (OAI) instead of full public access (section 6.4). - Do not store API_KEY in static files. Use AWS Secrets Manager or CloudFront Functions to add the x-api-key header (section 5). AWS Region - Ensure the region us-east-1 matches with the student-management-website-2025 bucket, student-backup-20250706, student API, prod stage, Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), DynamoDB studentData, SES, and CloudFront. Error Handling - If the bucket does not appear: Refresh the page or check the AWS region. - If unable to create the bucket: Check the bucket limit in the account (default 100 buckets per region, may require AWS to increase the quota). - If encountering AccessDenied: Verify IAM role permissions for s3:CreateBucket and s3:PutBucketPolicy. Optimization - Add S3 Access Logs to track access: In S3 \u0026gt; student-management-website-2025 \u0026gt; Properties \u0026gt; Server access logging, select Enable and specify a log bucket (e.g., student-web-logs-20250706). - Use AWS CLI or SDK to automate bucket creation: Integration Testing - Verify that the student-management-website-2025 bucket exists in S3 \u0026gt; Buckets with the correct region (us-east-1) and Bucket Versioning (Enabled). - Prepare the index.html, styles.css, scripts.js files (section 5) to upload (section 6.2). - After completing section 6, access the interface via the CloudFront URL (e.g., https://d12345678.cloudfront.net) and check the following functionalities: - POST /students: Save records to DynamoDB studentData and send email via SES. - GET /students: Display the student table. - POST /backup: Create backup files in student-backup-20250706 and send notification emails. Best Practice Tip: After creating the bucket, immediately check it in S3 \u0026gt; Buckets to verify the information. Use AWS CLI or SDK to automate if you need to create multiple buckets. Prepare the interface files from section 5 and verify IAM permissions before proceeding with section 6.2 (uploading files to S3).\nConclusion The student-management-website-2025 bucket has been successfully created in the us-east-1 region, with Bucket Versioning and Default encryption enabled, ready for uploading interface files (section 6.2), enabling Static Website Hosting (section 6.3), and integrating with CloudFront.\nNext step: Proceed to Upload the interface assets to S3 to continue configuring!\n"
},
{
	"uri": "/7-deploying-cloudfront/7.1-creating-a-cloudfront-distribution/",
	"title": "Create CloudFront Distribution",
	"tags": [],
	"description": "",
	"content": " Objective: Create a CloudFront Distribution to serve static content from the S3 Bucket student-management-website-2025 (sections 6.1–6.4), using Origin Access Identity (OAI) to restrict bucket access only from CloudFront, enabling Web Application Firewall (WAF) for increased security, and providing HTTPS for the web interface (index.html, styles.css, scripts.js). The distribution will integrate with the student API (stage prod, section 4.8) to support the GET /students, POST /students, and POST /backup endpoints, using StudentApiKey (section 4.2) with CORS (section 4.7).\nOverview of CloudFront Distribution Role of CloudFront: Provides HTTPS for the web interface (S3 Static Website Hosting only supports HTTP, section 6.3). Speeds up load times by caching content at global edge locations. Uses OAI for security, replacing the public access policy (Principal: \u0026quot;*\u0026quot; from section 6.4). Enables WAF to protect against attacks (e.g., SQL injection, DDoS). Integration with the system: Serves static files (index.html, styles.css, scripts.js, section 6.2) from the S3 Bucket student-management-website-2025. The web interface calls the student API (section 4.8) with the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey. The functions include: POST /students: Save records to DynamoDB studentData and send a confirmation email via SES. GET /students: Display data in the table. POST /backup: Create a file in the S3 Bucket student-backup-20250706 (section 6.5) and send notification emails via SES. CORS is configured (section 4.7) to support requests from the CloudFront domain (e.g., https://d12345678.cloudfront.net). Initial Requirements You need to complete section 6.1 (create the student-management-website-2025 bucket), section 6.2 (upload index.html, styles.css, scripts.js), section 6.3 (enable Static Website Hosting), section 6.4 (configure Bucket Policy), section 6.5 (configure the student-backup-20250706 bucket), section 5 (build the web interface), section 4.1 (create the student API), section 4.2 (create the StudentApiKey), section 4.3 (create the StudentUsagePlan), section 4.4 (create the GET /students method), section 4.5 (create the POST /students method), section 4.6 (create the /backup resource and POST /backup method), section 4.7 (enable CORS), section 4.8 (deploy the API to the prod stage), section 4.9 (link the StudentApiKey to StudentUsagePlan). Ensure your AWS account has cloudfront:CreateDistribution, cloudfront:CreateInvalidation, s3:PutBucketPolicy, and the AWS region is us-east-1 for related services.\nDetailed Actions Access the AWS Management Console\nLog in to the AWS Management Console with your AWS account. In the search bar, type CloudFront and select the Amazon CloudFront service. Check the AWS region: CloudFront is a global service, but ensure the S3 Bucket student-management-website-2025, student API, Lambda, DynamoDB, and SES are all in us-east-1.\nFigure 1: AWS Console Interface with CloudFront search bar. Open the Create Distribution Interface\nIn CloudFront \u0026gt; Distributions, click Create distribution.\nFigure 2: Create Distribution Button in CloudFront. Configure Distribution Name and Origin\nDistribution name: Enter StudentWebsiteDistribution. Reason: This name helps identify the distribution in the CloudFront list, and it does not affect the access domain.\nFigure 3: Enter Distribution Name. Click Next to proceed.\nFigure 4: Click Next to Go to the Next Page. Origin: Origin type: Select Amazon S3.\nFigure 5: Select Origin Type Amazon S3. Origin domain: Click Browse S3 and select student-management-website-2025 from the list. Result: AWS automatically fills in student-management-website-2025.s3.amazonaws.com (the REST API endpoint for S3). Note: If the interface displays the Static Website Hosting endpoint (student-management-website-2025.s3-website-us-east-1.amazonaws.com), choose the REST API endpoint (*.s3.amazonaws.com) to be compatible with OAI.\nFigure 6: Select Origin Domain. Origin access: Select Allow private S3 bucket access to CloudFront – Recommended. Choose Create a new OAI or select an existing OAI. OAI Name: Enter StudentWebsiteOAI (or any preferred name). Select Use recommended origin settings to automatically update the Bucket Policy for student-management-website-2025. Result: AWS creates an OAI and adds the policy to the bucket: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowCloudFrontOAI\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EXXXXXX\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-management-website-2025/*\u0026#34; } ] } Note: Remove the old public policy (Principal: \u0026quot;*\u0026quot;, section 6.4) for better security.\nFigure 7: Configure Origin Access Identity. Click Choose to confirm the Origin. Click Next. Configure Cache Behavior and Security\nDefault cache behavior: Viewer protocol policy: Select Redirect HTTP to HTTPS to ensure secure access. Allowed HTTP methods: Select GET, HEAD (suitable for a static website). Cache key and origin requests: Select CachingOptimized to optimize performance. Compress objects automatically: Select Yes to compress content (e.g., CSS, JS). Web Application Firewall (WAF): Select Enable security protections. Choose AWS WAF default web ACL or create a new ACL in AWS WAF (e.g., block SQL injection, XSS). Reason: WAF protects the web interface from common attacks.\nFigure 8: Configure Cache Behavior and WAF. Click Next.\nFigure 9: Click Next to Continue. Configure Settings\nPrice class: Select Use all edge locations (optimal for global performance, or choose another to reduce costs). Alternate domain name (CNAME) (Optional): Enter a custom domain (e.g., www.student-management.com) if available, requires DNS configuration. Default root object: Enter index.html to serve the main file when accessing the CloudFront domain. SSL certificate: Select Default CloudFront Certificate (*.cloudfront.net) for HTTPS. Tags (Optional): Add tags like Project=StudentManagement, Environment=Production.\nFigure 10: Configure Settings for CloudFront. Create Distribution\nReview the configuration: Origin: student-management-website-2025.s3.amazonaws.com. Origin access: OAI (StudentWebsiteOAI). Viewer protocol policy: Redirect HTTP to HTTPS. Default root object: index.html. WAF: Enabled. Click Create distribution. Expected result: CloudFront will show the message \u0026ldquo;Successfully created new distribution\u0026rdquo;. The initial status will be In Progress (takes 5–15 minutes). After completion, the status will change to Enabled, and you will receive the Distribution domain name (e.g., d12345678.cloudfront.net).\nFigure 11: Distribution Creation Status Notification. Test the Distribution\nIn CloudFront \u0026gt; Distributions, select the distribution (StudentWebsiteDistribution). Check that the Status is Enabled and copy the Distribution domain name (e.g., https://d12345678.cloudfront.net). Open your browser and go to this URL. Expected result: The web interface should display with the input form, student table, and functional buttons (Save, View, Backup) using Tailwind CSS and Poppins font.\nFigure 12: Web Interface via CloudFront. Error Handling: 403 Forbidden: Check the Bucket Policy for the correct OAI ARN (arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EXXXXXX). Verify that index.html, styles.css, scripts.js are uploaded to S3 (section 6.2). Ensure the old public policy (Principal: \u0026quot;*\u0026quot;) has been removed (section 6.4). 404 Not Found: Verify that Default root object is index.html (section 7.2). Ensure Static Website Hosting is enabled with index.html as the Index document (section 6.3). Incorrect Interface: Open Developer Tools \u0026gt; Console to check for errors loading styles.css or scripts.js. Check paths in index.html (e.g., \u0026lt;link href=\u0026quot;styles.css\u0026quot;\u0026gt;, \u0026lt;script src=\u0026quot;scripts.js\u0026quot;\u0026gt;). CORS: Check the CORS configuration in API Gateway (section 4.7) with Access-Control-Allow-Origin: https://d12345678.cloudfront.net. API Errors: Check StudentApiKey, StudentUsagePlan (section 4.9), and CloudWatch logs for Lambda. Important Notes Factor Details Security OAI ensures only CloudFront accesses S3. Remove the old public policy (Principal: \u0026quot;*\u0026quot;, section 6.4) and keep Block public access (section 6.1, except Block public access for bucket policies). Use CloudFront Functions to add the x-api-key header: javascript \u0026lt;br\u0026gt; function handler(event) { \u0026lt;br\u0026gt; var request = event.request; \u0026lt;br\u0026gt; request.headers['x-api-key'] = { value: 'xxxxxxxxxxxxxxxxxxxx' }; \u0026lt;br\u0026gt; return request; \u0026lt;br\u0026gt; } \u0026lt;br\u0026gt; Optimization Enable CloudFront Standard Logs to track access: In CloudFront \u0026gt; Distribution \u0026gt; General \u0026gt; Logging, select On, specify a log bucket (e.g., student-web-logs-20250706). Use AWS CLI: bash \u0026lt;br\u0026gt; aws cloudfront create-distribution --distribution-config file://distribution-config.json \u0026lt;br\u0026gt; System Integration Update CORS in API Gateway (section 4.7) with Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Ensure POST /students, GET /students, POST /backup work with Invoke URL and StudentApiKey. Integration Testing Access the CloudFront URL (https://d12345678.cloudfront.net) and check: - POST /students: Save records, send SES email. - GET /students: Display table. - POST /backup: Create file in student-backup-20250706, send email. Use Developer Tools \u0026gt; Network to check API requests. Error Handling 403 Forbidden: Check OAI ARN, Bucket Policy, s3:GetObject permission. 404 Not Found: Verify index.html is Default root object, file exists in S3. Incorrect Interface: Check Developer Tools \u0026gt; Console, paths in index.html. CORS: Check Access-Control-Allow-Origin header in Lambda (section 3) and API Gateway (section 4.7). 429: Check rate/burst/quota limits in StudentUsagePlan (section 4.3). Best Practice Tip: Test the CloudFront URL immediately after the Enabled status. Create invalidation (section 7.3) if updating files in S3. Use AWS CLI to automate configuration.\nConclusion The CloudFront Distribution has been created with OAI and WAF, distributing content from student-management-website-2025 over HTTPS. The system is ready to integrate with the student API and test the interface.\nNext step: Proceed to Configure Default Root Object to continue configuration!\n"
},
{
	"uri": "/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Explore the future of web development!\nThis workshop will guide you through the journey of building an advanced serverless web application, leveraging the power of AWS to manage student information in a secure, efficient, and cost-effective way.\nIn the context of modern technology, building efficient, flexible, and cost-effective web applications is the primary goal of developers. The workshop \u0026ldquo;Deploying a Serverless Website for Managing Student Information with AWS Services\u0026rdquo; will guide you step by step in developing a serverless website, utilizing the powerful AWS services to manage student information securely and optimally.\nThe application supports:\nEntering and retrieving student data with fields like: Student ID, Full Name, Class, Date of Birth, and Email. Intuitive user interface designed with Tailwind CSS, providing a smooth user experience. Serverless architecture, eliminating the need for server management. Advanced features: Security, email notifications, and automatic backups to meet real-world needs. Benefits of Serverless Applications The serverless architecture of AWS offers outstanding advantages, helping you build a student information management system that is not only efficient but also scalable and maintainable. Here are the key benefits:\n1. Automatic Scaling AWS Lambda automatically adjusts resources based on traffic, ensuring smooth application performance even during traffic spikes.\nReal-world example: When hundreds of students access the system simultaneously to view or update their information, Lambda automatically allocates resources without requiring your intervention, helping to:\nOptimize operating costs. Prevent resource waste during periods of low usage. 2. Optimal Security API Gateway uses API Keys to authenticate requests, ensuring that only authorized users can access the data. The system integrates IAM (Identity and Access Management) with distinct roles such as:\nLambdaGetStudentRole LambdaInsertStudentRole DynamoDBBackupRole Real-world example: The Lambda function that fetches data is only allowed to read from DynamoDB, while the backup function only writes to S3, adhering to the least privilege principle.\nBenefits:\nProtects sensitive data. Reduces the risk of attacks or data breaches. 3. Email Notifications AWS SES (Simple Email Service) provides automatic notifications:\nData saving confirmation: Sends an email containing details like Student ID, Full Name, Class, and Date of Birth when data is saved into DynamoDB. Data backup: Sends an email with a pre-signed URL (expires after 1 hour) when data is backed up to S3. Benefits: Instant system updates, ensuring reliable and professional notifications.\n4. Cost Savings The serverless model charges based on actual resource usage:\nLambda: Charges by execution count and runtime. S3: Charges by storage size. CloudFront: Charges based on data transfer. Real-world example: Ideal for applications with variable traffic, significantly reducing operational costs compared to traditional server models.\n5. High Performance AWS CloudFront, a CDN (Content Delivery Network) service, delivers static content (HTML, JavaScript) from S3 to users worldwide with low latency.\nHow it works: Stores content at Edge Locations close to users.\nReal-world example: Students accessing the site from Vietnam, the US, or Europe will have a smooth, fast experience.\nBenefits: Faster page loading, enhancing user experience.\n6. Automatic Backups The system automatically backs up data from DynamoDB to S3 on a schedule set through EventBridge (default: 7:00 AM +07 daily).\nProcess: The Lambda function BackupDynamoDBAndSendEmail creates a JSON file with all student data, stores it in an S3 bucket, and sends a pre-signed URL (expires after 1 hour).\nReal-world example: Easily recover data after an incident, ensuring data safety.\nBenefits:\nLong-term data protection. Automated backup process, saving time. Workshop Goals This workshop will not only help you deploy a student information management website, but also provide practical knowledge about integrating AWS services into a serverless architecture. You will learn how to:\nGoal Technology Outcome Design a modern web interface Tailwind CSS Intuitive, user-friendly interface Create and secure APIs API Gateway, API Key Secure, easy-to-integrate, and scalable API Process and store data Lambda, DynamoDB Efficient, reliable data management Send email notifications SES Instant, professional notifications Distribute content globally CloudFront Fast access, low latency from all regions Automate data backup S3, EventBridge Safe, easily recoverable data Monitor system activity CloudWatch System performance monitoring and optimization Start Your Journey! By completing this workshop, you will gain:\nA fully functional serverless application, ready for real-world use. In-depth skills to develop serverless applications with AWS. Confidence in integrating cloud services into personal or business projects. Ready to join?\nHead over to Preparation Steps to explore the detailed setup process!\n"
},
{
	"uri": "/8-setting-up-system-backup/8.1-modifying-backup-lambda-configuration/",
	"title": "Modify Lambda Backup Configuration",
	"tags": [],
	"description": "",
	"content": " Objective: Update the configuration for the Lambda function BackupDynamoDBAndSendEmail (created in section 3.3, integrated with the POST /backup endpoint, section 4.6) to ensure efficient operation when backing up data from the DynamoDB table studentData to the S3 Bucket student-backup-20250706 (section 6.5) and sending notification emails via Amazon SES. The configuration includes Memory, Ephemeral Storage, Execution Role, and Environment Variables to optimize performance and integrate with the serverless system.\nOverview of Lambda Backup Role of Lambda BackupDynamoDBAndSendEmail: Handles the POST /backup endpoint in the student API (stage prod, section 4.8), reads data from DynamoDB studentData, saves a JSON file to S3 student-backup-20250706, and sends a notification email via SES. Updated to support triggering from both API Gateway and Amazon EventBridge (section 8.2) for manual backup (via web interface) and automatic backup (via schedule). System Integration: The web interface (distributed via CloudFront StudentWebsiteDistribution, sections 7.1–7.3) from S3 Bucket student-management-website-2025 (sections 6.1–6.4) calls the student API with Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey (section 4.2). Functions: POST /students: Save records to DynamoDB studentData and send email via SES. GET /students: Display data in a table. POST /backup: Create a JSON file in student-backup-20250706 and send a notification email. CORS is configured (section 4.7) to support requests from the CloudFront domain (e.g., https://d12345678.cloudfront.net). IAM role DynamoDBBackupRole (section 6.5) grants access to DynamoDB, S3, and SES. Prerequisites You need to complete the following:\nSection 2.4: Create S3 Bucket student-backup-20250706. Section 3.3: Create Lambda function BackupDynamoDBAndSendEmail with role DynamoDBBackupRole. Sections 4.1–4.9: Create and configure the student API, including StudentApiKey, StudentUsagePlan, GET /students, POST /students, POST /backup methods, enable CORS, and deploy the prod stage. Section 5: Build the web interface with index.html, styles.css, scripts.js. Sections 6.1–6.5: Create and configure S3 Buckets student-management-website-2025 and student-backup-20250706. Sections 7.1–7.3: Create and configure CloudFront StudentWebsiteDistribution.\nEnsure your AWS account has permissions for lambda:UpdateFunctionConfiguration, lambda:GetFunction, s3:PutObject, dynamodb:Scan, ses:SendEmail, and the AWS region is us-east-1. Detailed Actions Access AWS Management Console and Lambda\nLog in to AWS Management Console. In the search bar, enter Lambda and select AWS Lambda. Verify AWS region: us-east-1 to synchronize with DynamoDB studentData, S3 (student-management-website-2025, student-backup-20250706), API Gateway, SES, and CloudFront.\nFigure 1: AWS Console interface with Lambda search bar. Select Functions List\nIn Lambda \u0026gt; Functions, view the list of Lambda functions. Check: Ensure the function BackupDynamoDBAndSendEmail (section 3.3) appears. Troubleshooting: If not found, verify the function name and lambda:GetFunction permission: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;lambda:GetFunction\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:\u0026lt;AWS_ACCOUNT_ID\u0026gt;:function:BackupDynamoDBAndSendEmail\u0026#34; } ] } Replace \u0026lt;AWS_ACCOUNT_ID\u0026gt; with your AWS account ID.\nFigure 2: Lambda Functions list. Select the Backup Lambda Function\nClick on BackupDynamoDBAndSendEmail to enter the details page. Identification: The function is linked to the POST /backup endpoint (section 4.6) and the DynamoDBBackupRole (section 6.5).\nFigure 3: Lambda function details interface. Access the Configuration Tab\nIn the details page, select the Configuration tab (next to Code, Test). Update General Configuration\nIn Configuration \u0026gt; General configuration, click Edit. Configure: Memory: 128 MB (sufficient for reading DynamoDB, writing to S3, sending SES email; increase if needed but consider cost). Ephemeral Storage: 512 MB (default, enough for temporary data). Execution Role: Select Use an existing role, choose DynamoDBBackupRole. Verify permissions: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:Scan\u0026#34;, \u0026#34;s3:PutObject\u0026#34;, \u0026#34;ses:SendEmail\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:dynamodb:us-east-1:\u0026lt;AWS_ACCOUNT_ID\u0026gt;:table/studentData\u0026#34;, \u0026#34;arn:aws:s3:::student-backup-20250706/*\u0026#34;, \u0026#34;arn:aws:ses:us-east-1:\u0026lt;AWS_ACCOUNT_ID\u0026gt;:identity/*\u0026#34; ] } ] } Replace \u0026lt;AWS_ACCOUNT_ID\u0026gt; with your AWS account ID. Click Save. Troubleshooting: Role not listed: Check DynamoDBBackupRole (section 6.5) and iam:PassRole permission. Permission error: Ensure the ARNs for studentData, student-backup-20250706, and SES identity are correct.\nFigure 4: Update General configuration. Save Configuration\nClick Save. Result: Notification \u0026ldquo;Successfully updated function configuration\u0026rdquo;. Memory (128 MB), Ephemeral Storage (512 MB), and Execution Role (DynamoDBBackupRole) are updated. Troubleshooting: AccessDenied: Check lambda:UpdateFunctionConfiguration permission: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;lambda:UpdateFunctionConfiguration\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:\u0026lt;AWS_ACCOUNT_ID\u0026gt;:function:BackupDynamoDBAndSendEmail\u0026#34; } ] } Configuration not saved: Check input values and DynamoDBBackupRole.\nFigure 5: Save configuration success notification. Create Environment Variables\nIn Configuration \u0026gt; Environment variables, click Edit. Add variables: Key: S3_BUCKET_NAME, Value: student-backup-20250706 (target bucket for backup JSON). Key: SENDER_EMAIL, Value: no-reply@studentapp.com (SES verified email). Key: RECIPIENT_EMAIL, Value: admin@studentapp.com (SES verified email). Click Save. Reason: Environment variables allow the Lambda code to reference bucket and email dynamically, avoiding hardcoding. Troubleshooting: Save error: Check lambda:UpdateFunctionConfiguration permission. Bucket does not exist: Verify student-backup-20250706 (section 2.4). Invalid email: Verify no-reply@studentapp.com and admin@studentapp.com in SES (section 3).\nFigure 6: Add Environment variables. Test Lambda Configuration\nIn Test, create a test event with content {} (simulate EventBridge). Click Test. Expected results: JSON file (e.g., students-backup-20250708T1236.json) appears in S3 student-backup-20250706. Email sent to admin@studentapp.com with subject Backup Completed: students-backup-20250708T1236.json and body Backup saved to s3://student-backup-20250706/students-backup-20250708T1236.json. Troubleshooting: AccessDenied: Check s3:PutObject, dynamodb:Scan, ses:SendEmail permissions in DynamoDBBackupRole. No items in DynamoDB: Call POST /students (section 4.5) to add data to studentData. SES error: Verify no-reply@studentapp.com, admin@studentapp.com in SES (section 3). Environment variable not found: Check S3_BUCKET_NAME, SENDER_EMAIL, RECIPIENT_EMAIL in Environment variables.\nFigure 7: Lambda test result. Important Notes Factor Details Security - Avoid embedding StudentApiKey in scripts.js. Use CloudFront Functions to add the x-api-key header: javascript \u0026lt;br\u0026gt; function handler(event) { \u0026lt;br\u0026gt; var request = event.request; \u0026lt;br\u0026gt; request.headers['x-api-key'] = { value: 'xxxxxxxxxxxxxxxxxxxx' }; \u0026lt;br\u0026gt; return request; \u0026lt;br\u0026gt; } \u0026lt;br\u0026gt; - Verify SES emails (no-reply@studentapp.com, admin@studentapp.com) before sending. Optimization - Enable CloudWatch Logs for Lambda: In Configuration \u0026gt; Monitoring and operations tools, select Enable CloudWatch Logs. - Use AWS CLI to check configuration: bash \u0026lt;br\u0026gt; aws lambda get-function-configuration --function-name BackupDynamoDBAndSendEmail \u0026lt;br\u0026gt; Integration - CORS: Ensure Access-Control-Allow-Origin: https://d12345678.cloudfront.net in API Gateway (section 4.7). - Verify POST /students, GET /students, POST /backup endpoints work with StudentApiKey. Integration Testing - Access CloudFront URL (https://d12345678.cloudfront.net) and check: - POST /students: Save record, send SES email. - GET /students: Display table. - POST /backup: Create file in student-backup-20250706, send email. - Use Developer Tools \u0026gt; Network to inspect API requests. Error Handling - AccessDenied: Check permissions in DynamoDBBackupRole and bucket policy of student-backup-20250706. - SES error: Verify SES emails. - No data: Add data to studentData via POST /students. - Environment variable error: Check environment variables in Configuration. Best practice tip: Test Lambda after each update using the {} event. Check CloudWatch Logs for debugging. Prepare for section 8.2 by ensuring the function works correctly with the POST /backup endpoint.\nConclusion The Lambda function BackupDynamoDBAndSendEmail has been configured with Memory (128 MB), Ephemeral Storage (512 MB), role DynamoDBBackupRole, and environment variables (S3_BUCKET_NAME, SENDER_EMAIL, RECIPIENT_EMAIL). The function is ready to back up data from DynamoDB studentData to S3 student-backup-20250706 and send emails via SES, integrated with the student API and web interface.\nNext step: Proceed to Create EventBridge Rule for Automated Backup to enable scheduled backups!\n"
},
{
	"uri": "/",
	"title": "Serverless Website",
	"tags": [],
	"description": "",
	"content": "Deploying a Serverless Student Information Management Website with AWS Welcome to the hands-on workshop!\nBuild a serverless web application using modern AWS services to manage student information in a secure, efficient, and cost-effective way.\nOverview This workshop will guide you step by step in building a serverless website using powerful AWS services to manage student information. The application supports:\nInput and output student data with fields: Student ID, Full Name, Class, Birth Date, and Email. A user-friendly interface designed with Tailwind CSS for a smooth user experience. Security: Uses API Key via API Gateway to authenticate requests. Notifications: Sends confirmation emails and backups via AWS SES. Automated Backup: Backs up data from DynamoDB to S3 on a schedule. By using serverless services like S3, DynamoDB, Lambda, API Gateway, CloudFront, and SES, you will learn how to deploy an application that:\nRequires no server management. Saves costs with a pay-per-use model. Scales automatically based on traffic. Optimizes global performance with low latency. System Architecture Overview:\nFigure 1: Overview diagram of the serverless application architecture with AWS services.\nWorkshop Content The workshop includes detailed steps to build a complete serverless application. Below is a list of the content:\nStep Content Description 1 Introduction Overview of the workshop, benefits of serverless architecture, and learning objectives. 2 Preparation Steps Guide to set up your AWS account, install required tools, and prepare the environment. 3 Configuring Lambda Functions Create Lambda functions to handle logic, such as retrieving and storing student data. 4 Create a RESTful API Configure API Gateway to create a secure API, integrate with Lambda. 5 Build the Website Interface Design the web interface with Tailwind CSS to input/output student data. 6 Configure the S3 Bucket Create and configure an S3 bucket to store static content and backup data. 7 Deploy CloudFront Use CloudFront to distribute content globally with low latency. 8 Set up System Backup Automate the backup of data from DynamoDB to S3 using EventBridge. 9 Verify the Results Verify the application’s functionality through test scenarios. 10 View Logs with CloudWatch Monitor and analyze system logs to optimize performance. 11 Demo Video Watch a demo video illustrating how the application works. 12 Cleanup Resources Guide on how to delete AWS resources to avoid unnecessary costs. Note: Each step is designed to let you practice each part of the application, from configuring the database to deploying the interface and monitoring the system. Follow the steps in order for the best results.\nStarting the Journey By completing this workshop, you will:\nHave a complete serverless application, ready for real-world use. Gain practical skills to integrate AWS services like Lambda, DynamoDB, API Gateway, S3, CloudFront, SES, and CloudWatch. Be confident in developing other serverless applications in the future. Ready to get started?\nGo to Introduction to explore more about the application and the benefits of serverless architecture!\n"
},
{
	"uri": "/7-deploying-cloudfront/7.2-configuring-default-root-object/",
	"title": "Configure Default Root Object",
	"tags": [],
	"description": "",
	"content": " Objective: Configure index.html as the Default Root Object for the CloudFront Distribution StudentWebsiteDistribution (section 7.1) so that CloudFront automatically serves the index.html file from the S3 Bucket student-management-website-2025 when users access the CloudFront domain (e.g., https://d12345678.cloudfront.net). This ensures the static web interface (form, student table, functional buttons) displays correctly and integrates with the student API (stage prod, section 4.8) to perform functions like saving, viewing, and backing up data.\nOverview of Default Root Object Role of Default Root Object: Specifies the default file (index.html) that CloudFront returns when users access the root URL of the distribution (e.g., https://d12345678.cloudfront.net). Similar to the Index document in S3 Static Website Hosting (section 6.3), but applied at the CloudFront layer. Ensures the main interface displays without the need for a specific path (e.g., /index.html). Integration with the system: CloudFront distributes static files (index.html, styles.css, scripts.js, section 6.2) from the S3 Bucket student-management-website-2025 (sections 6.1–6.4) via Origin Access Identity (OAI) (section 7.1) to restrict access. The web interface calls the student API (section 4.8) with the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey (section 4.2). The functions include: POST /students: Save records to DynamoDB studentData and send a confirmation email via SES. GET /students: Display data in the table. POST /backup: Create a file in the S3 Bucket student-backup-20250706 (section 6.5) and send notification emails via SES. CORS is configured (section 4.7) to support requests from the CloudFront domain (e.g., https://d12345678.cloudfront.net). Initial Requirements You need to complete section 7.1 (create the CloudFront Distribution StudentWebsiteDistribution), section 6.1 (create the student-management-website-2025 bucket), section 6.2 (upload index.html, styles.css, scripts.js), section 6.3 (enable Static Website Hosting), section 6.4 (configure Bucket Policy), section 6.5 (configure the student-backup-20250706 bucket), section 5 (build the web interface), section 4.1 (create the student API), section 4.2 (create the StudentApiKey), section 4.3 (create the StudentUsagePlan), section 4.4 (create the GET /students method), section 4.5 (create the POST /students method), section 4.6 (create the /backup resource and POST /backup method), section 4.7 (enable CORS), section 4.8 (deploy the API to the prod stage), section 4.9 (link the StudentApiKey to StudentUsagePlan). Ensure your AWS account has cloudfront:UpdateDistribution, s3:GetObject, and the AWS region is us-east-1 for related services.\nDetailed Actions Access the AWS Management Console\nLog in to the AWS Management Console with your AWS account. In the search bar, type CloudFront and select the Amazon CloudFront service. Check the AWS region: CloudFront is a global service, but ensure the S3 Bucket student-management-website-2025, student API, Lambda, DynamoDB, and SES are in us-east-1.\nFigure 1: AWS Console Interface with the CloudFront search bar. Select the CloudFront Distribution\nIn CloudFront \u0026gt; Distributions, find and select the distribution named StudentWebsiteDistribution (created in section 7.1). Identification: The distribution ID starts with E... and the Domain name is of the format d12345678.cloudfront.net. Click the ID or distribution name to enter the distribution details interface. Check the status: Ensure the distribution is in the Enabled state. If it is still In Progress, wait 5–15 minutes for the deployment to complete.\nFigure 2: Select CloudFront Distribution. Edit Default Root Object\nIn the details interface of StudentWebsiteDistribution, select the General tab. Find the Settings section and click the Edit button next to Default root object (usually shows the current value if set).\nFigure 3: Find and Click Edit in the Settings Section. In the Default root object field, enter index.html. Reason: index.html is the main file containing the web interface (input form, student table, save/view/backup functional buttons) uploaded to the S3 Bucket student-management-website-2025 (section 6.2). When users access the CloudFront domain, CloudFront will request index.html from S3 through OAI (section 7.1). Review before saving: Ensure index.html has been uploaded to the root directory of the S3 Bucket student-management-website-2025 (section 6.2). Verify Static Website Hosting is enabled with index.html as the Index document (section 6.3). Check the Bucket Policy (section 7.1) allows OAI access: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowCloudFrontOAI\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EXXXXXX\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-management-website-2025/*\u0026#34; } ] } Save Changes\nClick Save changes to apply the configuration.\nFigure 4: Click Save Changes to Save Configuration. Expected result: CloudFront will start updating the configuration (takes 5–10 minutes). Once completed, the distribution status will return to Enabled, and AWS will display the message \u0026ldquo;Successfully updated distribution settings\u0026rdquo;.\nFigure 5: Update Success Message. Error Handling: \u0026ldquo;AccessDenied\u0026rdquo;: Check if the IAM role has cloudfront:UpdateDistribution permissions: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;cloudfront:UpdateDistribution\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:cloudfront::\u0026lt;AWS_ACCOUNT_ID\u0026gt;:distribution/\u0026lt;DISTRIBUTION_ID\u0026gt;\u0026#34; } ] } Replace \u0026lt;AWS_ACCOUNT_ID\u0026gt; and \u0026lt;DISTRIBUTION_ID\u0026gt; with actual values (found in CloudFront \u0026gt; Distributions). Update not applied: Check the distribution status and wait for it to return to Enabled. Verify that the Default root object field shows index.html in the General tab. Test Default Root Object\nIn CloudFront \u0026gt; Distributions, copy the Distribution domain name (e.g., https://d12345678.cloudfront.net). Open your browser and access this URL. Expected result: The web interface should display with the input form, student table, and functional buttons (Save, View, Backup) using Tailwind CSS and Poppins font. The styles.css and scripts.js files should load correctly over HTTPS, and the interface should display as expected. API requests (GET /students, POST /students, POST /backup) should work if CORS is correctly configured (section 4.7).\n"
},
{
	"uri": "/3-creating-lambda-functions/3.2-create-the-insertstudentdata-function/",
	"title": "Configure Lambda Function insertStudentData",
	"tags": [],
	"description": "",
	"content": " Objective: Create and configure the Lambda function insertStudentData to receive student information from the web interface, store it in the DynamoDB studentData table, and send a confirmation email via SES. This function processes the data for fields Student ID (studentid), Full Name (name), Class (class), Date of Birth (birthdate), and Email (email), while checking for validity and duplicates before saving. The function uses Python 3.13, architecture x86_64, and assigns the IAM role LambdaInsertStudentRole (corrected from LambdaGetStudentRole in the requirements). The function will return a JSON response for integration with the web interface via API Gateway.\nOverview of the insertStudentData Function The insertStudentData function performs the following tasks:\nReceives data from event['body'] (sent from the web interface via API Gateway). Validates the input data (ensuring all required fields are provided). Checks for duplicate studentid using the GetItem operation to avoid storing duplicate data. Saves the data to the studentData table using the PutItem operation. Sends a confirmation email via SES with detailed content (student ID, full name, class, date of birth). Logs details to CloudWatch for monitoring and debugging. Returns a JSON response with the CORS header (Access-Control-Allow-Origin: '*') to support the web interface. Initial Requirements You need to complete the preparation steps in section 2 (IAM Role LambdaInsertStudentRole, DynamoDB studentData table, SES email verification) before creating the function. Ensure your AWS account is ready and the AWS region is us-east-1.\nDetailed Steps Access AWS Management Console\nOpen your browser and log in to the AWS Management Console with your AWS account.\nIn the search bar at the top, type Lambda and select AWS Lambda to enter the management interface.\nEnsure you are working in the primary AWS region (e.g., us-east-1), check the region in the top-right corner of the AWS Console. This region should match the studentData DynamoDB table and SES.\nFigure 1: AWS Console interface with the Lambda search bar.\nNavigate to the Functions Section\nIn the AWS Lambda interface, look at the left-hand navigation menu.\nSelect Functions to see the list of existing Lambda functions. If no functions have been created, the list will be empty.\nFigure 2: Navigation menu with the Functions option.\nStart the Create Function Process\nIn the Functions interface, click the Create function button in the top-right corner to start configuring a new function.\nFigure 3: Create function button in the Functions interface.\nConfigure Basic Function Information\nIn the Function type section, select Author from scratch to write your own code for the function. In the Function name field, enter insertStudentData. This name will be used when integrating with API Gateway. In the Runtime section, select Python 3.13 (the latest required Python version). If Python 3.13 is not available, select the latest supported version (e.g., Python 3.12 or 3.11). In the Architecture section, select x86_64 to ensure compatibility with the standard architecture. Figure 4: Basic function configuration interface.\nIn the Permissions section, select Use an existing role.\nIn the role list, select LambdaInsertStudentRole (created in section 2.2). Important note: The initial requirement specified LambdaGetStudentRole, but this role is not suitable as it lacks the dynamodb:PutItem and ses:SendEmail permissions. The LambdaInsertStudentRole includes AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonSESFullAccess, AmazonS3FullAccess, and CloudFrontFullAccess, but AmazonDynamoDBReadOnlyAccess does not support PutItem. You need to replace it with AmazonDynamoDBFullAccess or a custom policy (see Notes). Keep other settings at their default values and click Create function to create the function.\nFigure 5: Select LambdaInsertStudentRole and click Create function.\nCheck Function Creation Status\nAfter clicking Create function, you will be redirected to the insertStudentData function details page.\nThe interface will display a message like: \u0026ldquo;Successfully created the function insertStudentData. You can now change its code and configuration. To invoke your function with a test event, choose Test.\u0026rdquo;\nIf you do not see this message or encounter an error, check that the LambdaInsertStudentRole exists and that your AWS account has the lambda:CreateFunction permission.\nFigure 6: Function details page after creating insertStudentData.\nConfigure Source Code\nIn the function details page for insertStudentData, go to the Code tab, scroll down to the Code source section. In the lambda_function.py file, delete the default code and paste the following: import json import boto3 import logging # Set up logging logger = logging.getLogger() logger.setLevel(logging.INFO) # Initialize DynamoDB and SES clients dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(\u0026#39;studentData\u0026#39;) ses = boto3.client(\u0026#39;ses\u0026#39;, region_name=\u0026#39;us-east-1\u0026#39;) def lambda_handler(event, context): logger.info(\u0026#34;Received event: %s\u0026#34;, json.dumps(event)) # Process request body try: if isinstance(event.get(\u0026#39;body\u0026#39;), str): body = json.loads(event[\u0026#39;body\u0026#39;]) elif isinstance(event.get(\u0026#39;body\u0026#39;), dict): body = event[\u0026#39;body\u0026#39;] else: body = {} except Exception as e: logger.error(\u0026#34;Error parsing JSON: %s\u0026#34;, str(e)) return _response(400, \u0026#34;Invalid data sent.\u0026#34;) # Extract fields student_id = body.get(\u0026#39;studentid\u0026#39;) name = body.get(\u0026#39;name\u0026#39;) student_class = body.get(\u0026#39;class\u0026#39;) birthdate = body.get(\u0026#39;birthdate\u0026#39;) email = body.get(\u0026#39;email\u0026#39;) # Validate input data if not all([student_id, name, student_class, birthdate, email]): logger.error(\u0026#34;Missing fields: studentid=%s, name=%s, class=%s, birthdate=%s, email=%s\u0026#34;, student_id, name, student_class, birthdate, email) return _response(400, \u0026#34;Missing required student information.\u0026#34;) # Check for duplicate student ID try: existing = table.get_item(Key={\u0026#39;studentid\u0026#39;: student_id}) if \u0026#39;Item\u0026#39; in existing: logger.error(\u0026#34;Student ID %s already exists\u0026#34;, student_id) return _response(409, f\u0026#34;Student ID \u0026#39;{student_id}\u0026#39; already exists.\u0026#34;) except Exception as e: logger.error(\u0026#34;Error checking student ID: %s\u0026#34;, str(e)) return _response(500, \u0026#34;Error checking data.\u0026#34;) # Save data to DynamoDB try: table.put_item( Item={ \u0026#39;studentid\u0026#39;: student_id, \u0026#39;name\u0026#39;: name, \u0026#39;class\u0026#39;: student_class, \u0026#39;birthdate\u0026#39;: birthdate, \u0026#39;email\u0026#39;: email } ) logger.info(\u0026#34;Successfully saved data for studentid: %s\u0026#34;, student_id) except Exception as e: logger.error(\u0026#34;Error saving to DynamoDB: %s\u0026#34;, str(e)) return _response(500, \u0026#34;Error saving data to the system.\u0026#34;) # Send confirmation email email_error = None try: ses.send_email( Source=\u0026#39;baothangvip@gmail.com\u0026#39;, Destination={\u0026#39;ToAddresses\u0026#39;: [email]}, Message={ \u0026#39;Subject\u0026#39;: {\u0026#39;Data\u0026#39;: \u0026#39;Student Data Saved\u0026#39;}, \u0026#39;Body\u0026#39;: { \u0026#39;Text\u0026#39;: { \u0026#39;Data\u0026#39;: ( f\u0026#39;📢 STUDENT MANAGEMENT SYSTEM NOTIFICATION\\n\\n\u0026#39; f\u0026#39;Hello {name},\\n\\n\u0026#39; f\u0026#39;✅ Your student information has been successfully saved to the system.\\n\\n\u0026#39; f\u0026#39;🔹 Student ID: {student_id}\\n\u0026#39; f\u0026#39;🔹 Full Name: {name}\\n\u0026#39; f\u0026#39;🔹 Class: {student_class}\\n\u0026#39; f\u0026#39;🔹 Date of Birth: {birthdate}\\n\\n\u0026#39; f\u0026#39;📬 Please keep this email for reference.\\n\\n\u0026#39; f\u0026#39;Best regards,\\n\u0026#39; f\u0026#39;📘 Student Management System\\n\u0026#39; f\u0026#39;📧 Email: hutech@system.edu.vn\u0026#39; ) } } } ) logger.info(\u0026#34;Successfully sent email to: %s\u0026#34;, email) except Exception as e: email_error = str(e) logger.error(\u0026#34;Error sending email to %s: %s\u0026#34;, email, email_error) # Return result if email_error: return _response(200, f\u0026#34;Student data saved, but email to {email} failed: {email_error}\u0026#34;) return _response(200, \u0026#34;Student data saved and confirmation email sent!\u0026#34;) # Helper function to return response def _response(status_code, message): return { \u0026#39;statusCode\u0026#39;: status_code, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;message\u0026#39;: message}), \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39; } } "
},
{
	"uri": "/4-creating-a-restful-api/4.2-creating-an-api-key/",
	"title": "Create an API Key to Secure Access",
	"tags": [],
	"description": "",
	"content": " Objective: Create an API Key named StudentApiKey in AWS API Gateway to secure the endpoints of the student API (created in section 4.1), ensuring that only requests from the web interface (running on CloudFront) or clients with valid keys can access. The API Key will be used in the x-api-key header when calling endpoints (GET /students, POST /students, POST /backup) and will be linked to a Usage Plan (section 4.3) to manage access limits.\nOverview of API Key in API Gateway An API Key is a string used to authenticate requests sent to API Gateway, preventing unauthorized access. The API Key is sent in the x-api-key header of each HTTP request (e.g., GET https://api-id.execute-api.us-east-1.amazonaws.com/prod/students). In this system, StudentApiKey will secure the endpoints integrated with Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail). The API Key will be integrated into the web interface (using Tailwind CSS, running on CloudFront) to safely call the API. Prerequisites You need to complete section 4.1 (create the student API) and section 3 (create Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, DynamoDB table studentData, S3 bucket student-backup-20250706, SES email verification). Ensure your AWS account is set up, and the AWS region is us-east-1.\nDetailed Steps Access the AWS Management Console\nOpen your browser and log in to the AWS Management Console with your AWS account.\nIn the search bar at the top, type API Gateway and select the Amazon API Gateway service to access the management interface.\nCheck the AWS region: Make sure you are working in the primary AWS region (e.g., us-east-1), and check the region at the top right corner of the AWS Console. This region should match the student API (created in section 4.1) and Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail).\nFigure 1: AWS Console Interface with API Gateway Search Bar.\nNavigate to the API Keys Section\nIn the main Amazon API Gateway interface, look at the left navigation menu.\nSelect API Keys to view the list of existing API Keys. If you haven\u0026rsquo;t created any key, the list will be empty.\nThe interface will show options to create or manage API Keys.\nFigure 2: Navigation Menu with API Keys Option.\nInitiate the API Key Creation Process\nIn the API Keys interface, click the Create API Key button at the top right to start creating a new key.\nFigure 3: Create API Key Button in the API Keys Interface.\nConfigure the API Key\nIn the Create API Key section:\nName: Enter StudentApiKey exactly. This name helps you easily identify the key when linking it with the Usage Plan. Description: Enter API Key to secure access to StudentManagementAPI (or a similar description for clarity). API Key: Select Auto Generate to have AWS create a random string, ensuring security. Note: You can enter a custom key, but Auto Generate is recommended to avoid easily guessable keys. Enabled: Ensure this option is selected so the key can be used immediately after creation. Click Save to create the API Key.\nFigure 4: API Key Configuration Interface.\nCheck the Status and Copy the API Key\nAfter clicking Save, you will see the message: \u0026ldquo;Successfully created API Key ‘StudentApiKey’.\u0026rdquo;\nIn the API Keys list, select StudentApiKey to view details.\nClick Show next to API Key to display the key value (e.g., xxxxxxxxxxxxxxxxxxxx).\nCopy the API Key:\nCopy the key value and store it safely (e.g., in a local security file, AWS Secrets Manager, or a password manager). Important Note: The API Key is shown only once immediately after creation. If lost, you must create a new key and update it in the Usage Plan (section 4.3) and the web interface. This API Key will be used in the web interface to call the endpoints (GET /students, POST /students, POST /backup) by adding it in the x-api-key header.\nFigure 5: Success Message and API Key Details.\nImportant Notes Element Details API Key Security Do not embed the API Key directly in the JavaScript of the web interface (running on CloudFront). Instead, use environment variables or AWS Secrets Manager to securely store and retrieve the key. - Go to AWS Secrets Manager \u0026gt; Store a new secret \u0026gt; Choose Other type of secret \u0026gt; Enter the API Key. - Name the secret (e.g., student-api-key) and retrieve it in the web interface code via the AWS SDK. AWS Region The API Key operates across the entire AWS account, not limited by region. However, ensure that the student API and Lambda functions are in the same region (us-east-1) to avoid integration issues. Error Handling If you do not see the success message or encounter an \u0026ldquo;AccessDenied\u0026rdquo; error: - Check if your AWS account IAM permissions include apigateway:POST to create API Keys. - Ensure you are in the correct AWS region (us-east-1). If the API Key does not show up, refresh the page or check the API Keys list again. Optimization - After creating the key, link the API Key with a Usage Plan (section 4.3) to enforce access limits (rate limiting, quota). - Consider using AWS WAF with API Gateway for additional protection against attacks (e.g., DDoS). - If you need multiple API Keys (for different clients), create additional keys and manage them within the same Usage Plan. Early Testing - After creating the API Key, verify that it appears in the API Keys list and that the key value is safely copied. - Test the key by making a request to the API (after configuring methods and deploying in steps 4.4–4.8) using Postman or curl: curl -X GET https://api-id.execute-api.us-east-1.amazonaws.com/prod/students -H \u0026quot;x-api-key: xxxxxxxxxxxxxxxxxxxx\u0026quot; Web Interface Integration Testing - After creating the API Key, integrate the key into the web interface (using Tailwind CSS, running on CloudFront) to call the endpoints. - Ensure that the API Key is sent in the x-api-key header when calling the endpoints (GET /students, POST /students, POST /backup). Practical Tip: Securely store the API Key immediately after creation and test the integration with a test request (using Postman or curl) before embedding it into the web interface.\nConclusion The StudentApiKey has been successfully created in AWS API Gateway, ready to be linked with a Usage Plan and secure the endpoints of the student API.\nNext step: Go to Set Up Usage Plan (Access Plan) to continue!\n"
},
{
	"uri": "/8-setting-up-system-backup/8.2-creating-eventbridge-rule-for-backup/",
	"title": "Create EventBridge Rule for Automated Backup",
	"tags": [],
	"description": "",
	"content": " Objective: Create an Amazon EventBridge Rule DailyDynamoDBBackup to trigger the Lambda function BackupDynamoDBAndSendEmail (created in section 3.3, configured in section 8.1) on a scheduled basis, automatically backing up data from the DynamoDB table studentData to the S3 Bucket student-backup-20250706 (section 6.5) and sending notification emails via Amazon SES. The schedule runs daily at 07:00 AM +07 (00:00 UTC) with a flexible time window of 5 minutes, ensuring integration with the serverless system and the web interface via CloudFront.\nOverview of the EventBridge Rule Role of the EventBridge Rule: Amazon EventBridge schedules and triggers the Lambda function BackupDynamoDBAndSendEmail periodically (daily at 07:00 AM +07, i.e., 00:00 UTC). Ensures automatic backup, saves a JSON file to S3 student-backup-20250706, and sends notification emails via SES, reducing manual intervention. Uses Cron expression 0 0 * * ? * and a 5-minute Flexible Time Window to optimize performance. System Integration: The web interface (CloudFront StudentWebsiteDistribution, sections 7.1–7.3) from S3 student-management-website-2025 (sections 6.1–6.4) calls the student API (stage prod, section 4.8) with Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey (section 4.2). Functions: POST /students: Save records to DynamoDB studentData and send email via SES. GET /students: Display data in a table. POST /backup: Create a JSON file in student-backup-20250706 and send notification email. CORS configured (section 4.7) to support requests from the CloudFront domain (e.g., https://d12345678.cloudfront.net). IAM role DynamoDBBackupRoleStudent (section 6.5) grants Lambda access to DynamoDB, S3, SES. EventBridge uses the role Amazon_EventBridge_Scheduler_LAMBDA_7e5e967abf to trigger Lambda. Prerequisites You need to complete:\nSection 2.4: Create S3 Bucket student-backup-20250706. Section 3.3: Create Lambda function BackupDynamoDBAndSendEmail with role DynamoDBBackupRoleStudent. Sections 4.1–4.9: Create the student API, StudentApiKey, StudentUsagePlan, GET /students, POST /students, POST /backup methods, enable CORS, deploy the prod stage. Section 5: Build the web interface (index.html, styles.css, scripts.js). Sections 6.1–6.5: Create and configure S3 Buckets student-management-website-2025 and student-backup-20250706. Sections 7.1–7.3: Create CloudFront StudentWebsiteDistribution. Section 8.1: Configure Lambda BackupDynamoDBAndSendEmail with 128 MB Memory, 512 MB Ephemeral Storage, role DynamoDBBackupRoleStudent, and environment variables S3_BUCKET_NAME, SENDER_EMAIL, RECIPIENT_EMAIL.\nEnsure your AWS account has permissions for events:PutRule, events:PutTargets, iam:CreateRole, iam:PassRole, and the AWS region is us-east-1. Detailed Steps Access AWS Management Console and Amazon EventBridge\nLog in to AWS Management Console. Search for EventBridge, select Amazon EventBridge. Verify AWS region: us-east-1 to synchronize with DynamoDB studentData, S3 (student-management-website-2025, student-backup-20250706), Lambda, API Gateway, SES, CloudFront.\nFigure 1: AWS Console interface with EventBridge search bar. Select Rules\nIn EventBridge, select Rules from the left menu. Click Create rule.\nFigure 2: Create rule button in EventBridge interface. Configure the Rule\nIn Create rule: Name: DailyDynamoDBBackup (reflects daily backup purpose). Description: Backup DynamoDB and send email daily at 7:00 AM +07. Event bus: Select default. Rule type: Select Schedule. Click Continue in EventBridge Scheduler.\nFigure 3: Configure rule name and description. Set the Schedule\nIn Schedule pattern: Occurrence: Select Recurring schedule. Schedule type: Select Cron-based schedule. Cron expression: Enter 0 0 * * ? * (runs at 00:00 UTC, i.e., 07:00 AM +07, every day). Explanation: 0 0 * * ? * = minute 0, hour 0, every day/month, any day of week, every year. Option: For weekly on Sunday at 07:00 AM +07, use 0 0 * * SUN. Check your system timezone to avoid confusion. Click Next.\nFigure 4: Configure Cron schedule. Configure Flexible Time Window\nIn Flexible time window: Select Enable flexible time window. Maximum time window: 5 minutes (AWS optimizes execution time within 00:00–00:05 UTC). Reason: Suitable for small backups like studentData, does not affect timeliness. Click Next.\nFigure 5: Configure Flexible Time Window. Select Target API\nIn Target(s): Target type: Select AWS service. Select a target: Select Lambda function. Reason: BackupDynamoDBAndSendEmail is the backup execution target. Click Next.\nFigure 6: Select Target API. Select Lambda Function\nIn Function, select BackupDynamoDBAndSendEmail. Troubleshooting: If the function does not appear, check that it exists in us-east-1 and you have lambda:ListFunctions permission.\nFigure 7: Select Lambda function. Configure Execution Role\nIn Permissions: Select Create new role for this schedule. Role name: Amazon_EventBridge_Scheduler_LAMBDA_7e5e967abf. Reason: This role allows EventBridge to trigger Lambda. Verify permissions: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;lambda:InvokeFunction\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:\u0026lt;AWS_ACCOUNT_ID\u0026gt;:function:BackupDynamoDBAndSendEmail\u0026#34;, \u0026#34;Principal\u0026#34;: {\u0026#34;Service\u0026#34;: \u0026#34;scheduler.amazonaws.com\u0026#34;} } ] } Replace \u0026lt;AWS_ACCOUNT_ID\u0026gt; with your AWS account ID. Click Next.\nFigure 8: Configure Execution Role. Review and Create Schedule\nReview configuration: Name: DailyDynamoDBBackup. Description: Backup DynamoDB and send email daily at 7:00 AM +07. Schedule: cron(0 0 * * ? *). Flexible time window: 5 minutes. Target: BackupDynamoDBAndSendEmail. Click Create Schedule. Result: Notification \u0026ldquo;Your schedule DailyDynamoDBBackup is being created\u0026rdquo;.\nFigure 9: Review and create Schedule. Check the Rule\nIn EventBridge \u0026gt; Rules, verify DailyDynamoDBBackup with: Status: Enabled. Schedule: cron(0 0 * * ? *). Target: BackupDynamoDBAndSendEmail. Test operation: Temporarily set the schedule to every 5 minutes: In EventBridge \u0026gt; Rules, select DailyDynamoDBBackup \u0026gt; Edit \u0026gt; Schedule pattern, enter */5 * * * ? *, click Update rule. After 5 minutes (or at 00:00 UTC the next day): S3: Check student-backup-20250706 for a JSON file (e.g., students-backup-20250708T0700.json). SES: Verify email at admin@studentapp.com with subject Backup Completed: students-backup-20250708T0700.json and body Backup saved to s3://student-backup-20250706/students-backup-20250708T0700.json. CloudWatch Logs: In CloudWatch \u0026gt; Log groups \u0026gt; /aws/lambda/BackupDynamoDBAndSendEmail, check logs: fields @timestamp, @message\r| filter @message like /Backup completed/\r| sort @timestamp desc Troubleshooting: Rule not triggered: Check rule status is Enabled. Verify the role Amazon_EventBridge_Scheduler_LAMBDA_7e5e967abf has lambda:InvokeFunction permission. Lambda error: Check logs in CloudWatch \u0026gt; Log groups \u0026gt; /aws/lambda/BackupDynamoDBAndSendEmail. Ensure DynamoDBBackupRoleStudent has dynamodb:Scan, s3:PutObject, ses:SendEmail permissions (section 8.1). File not appearing in S3: Verify the student-backup-20250706 bucket and Bucket Policy (section 6.5): { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowLambdaPutObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: {\u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::\u0026lt;AWS_ACCOUNT_ID\u0026gt;:role/DynamoDBBackupRoleStudent\u0026#34;}, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-backup-20250706/*\u0026#34; } ] } Replace \u0026lt;AWS_ACCOUNT_ID\u0026gt; with your AWS account ID. Email not sent: Verify no-reply@studentapp.com, admin@studentapp.com in SES (section 3). Check ses:SendEmail permission in DynamoDBBackupRoleStudent. After testing, restore the schedule to 0 0 * * ? *.\nFigure 10: Status notification after rule creation. Important Notes Factor Details Security - Ensure the role Amazon_EventBridge_Scheduler_LAMBDA_7e5e967abf only grants lambda:InvokeFunction permission for BackupDynamoDBAndSendEmail. - Do not embed StudentApiKey in scripts.js. Use CloudFront Functions: javascript \u0026lt;br\u0026gt; function handler(event) { \u0026lt;br\u0026gt; var request = event.request; \u0026lt;br\u0026gt; request.headers['x-api-key'] = { value: 'xxxxxxxxxxxxxxxxxxxx' }; \u0026lt;br\u0026gt; return request; \u0026lt;br\u0026gt; } \u0026lt;br\u0026gt; Optimization - Enable CloudWatch Logs for Lambda (section 8.1). - Check the rule using AWS CLI: bash \u0026lt;br\u0026gt; aws events describe-rule --name DailyDynamoDBBackup \u0026lt;br\u0026gt; Integration - Verify CORS in API Gateway (section 4.7): Access-Control-Allow-Origin: https://d12345678.cloudfront.net. - Test the POST /backup endpoint via CloudFront URL to ensure integration with the web interface. Integration Testing - Access the CloudFront URL (https://d12345678.cloudfront.net): - POST /students: Save record, send SES email. - GET /students: Display table. - POST /backup: Create file in student-backup-20250706, send email. - Use Developer Tools \u0026gt; Network to inspect API requests. Error Handling - Rule not running: Check Enabled status, events:PutRule, events:PutTargets permissions. - Lambda error: Check CloudWatch logs, DynamoDBBackupRoleStudent permissions. - File not appearing: Verify student-backup-20250706 bucket policy. - Email not sent: Verify SES email and ses:SendEmail permission. Best practice tip: Test the rule immediately with schedule */5 * * * ? *, then revert to 0 0 * * ? *. Check CloudWatch Logs and S3 to verify backup. Configure S3 Lifecycle Rule for student-backup-20250706 to manage old files.\nConclusion The DailyDynamoDBBackup rule is created to trigger the Lambda BackupDynamoDBAndSendEmail daily at 07:00 AM +07, saving data from DynamoDB studentData to S3 student-backup-20250706 and sending email via SES. The system is integrated with the student API and the web interface via CloudFront.\nNext step: Monitor backups in S3 and SES emails,\n"
},
{
	"uri": "/2-preparation-steps/2.1-create-iam-role-for-lambda-get/",
	"title": "Create IAM Role for Lambda Get",
	"tags": [],
	"description": "",
	"content": " Objective: Create the IAM role LambdaGetStudentRole for the Lambda function getStudentData, granting permissions to read data from the DynamoDB table studentData, log data to CloudWatch, and support potential interactions with S3 and CloudFront.\nThe function getStudentData performs a Scan operation to retrieve all student data (Student ID, Full Name, Class, Date of Birth, Email) from the DynamoDB table studentData. This role needs to include:\nPermissions to log data to CloudWatch (AWSLambdaBasicExecutionRole). Permissions to read data from DynamoDB (AmazonDynamoDBReadOnlyAccess). Permissions for S3 and CloudFront (AmazonS3FullAccess, CloudFrontFullAccess) for potential future features. Note: AmazonS3FullAccess and CloudFrontFullAccess are not currently used in the code, but are retained for future functionalities (e.g., saving files to S3 or managing CloudFront).\nDetailed Steps Below are the detailed steps to create the IAM role LambdaGetStudentRole:\n1. Access the AWS Management Console Open your browser and log in to the AWS Management Console with your AWS account.\nIn the search bar at the top of the page, type IAM and select Identity and Access Management (IAM).\nFigure 1: AWS Console interface with the IAM search bar.\n2. Navigate to the Roles Section In the IAM interface, find the left-hand navigation menu.\nSelect Roles to view the list of IAM roles. If no roles exist, the list will be empty.\nFigure 2: Navigation menu with the Roles option.\n3. Start the Role Creation Process In the Roles interface, click the Create Role button in the top-right corner.\nFigure 3: Create Role button in the Roles interface.\n4. Choose Trusted Entity Type In the Select trusted entity section, choose AWS Service to specify that the role is for an AWS service.\nIn the Use case section, select Lambda from the list of services.\nClick Next to move to the permission configuration step.\nFigure 4: Choosing AWS Service and Lambda in Use case.\n5. Grant Permissions to the Role In the Permissions section, add the following four policies:\nAWSLambdaBasicExecutionRole:\nType AWSLambdaBasicExecutionRole in the search bar. Select the AWSLambdaBasicExecutionRole policy. Description: Allows Lambda functions to log to CloudWatch for monitoring and debugging.\nFigure 5: Selecting the AWSLambdaBasicExecutionRole policy.\nAmazonDynamoDBReadOnlyAccess:\nType AmazonDynamoDBReadOnlyAccess in the search bar. Select the AmazonDynamoDBReadOnlyAccess policy. Description: Grants read-only access to DynamoDB, supporting operations like Scan or GetItem.\nFigure 6: Selecting the AmazonDynamoDBReadOnlyAccess policy.\nAmazonS3FullAccess:\nType AmazonS3FullAccess in the search bar. Select the AmazonS3FullAccess policy. Description: Grants read, write, and manage S3 buckets for potential future features (e.g., storing additional files).\nFigure 7: Selecting the AmazonS3FullAccess policy.\nCloudFrontFullAccess:\nType CloudFrontFullAccess in the search bar. Select the CloudFrontFullAccess policy. Description: Grants permission to manage CloudFront distributions for potential future features.\nFigure 8: Selecting the CloudFrontFullAccess policy.\nVerify the list of Permissions policies to ensure it includes:\nAWSLambdaBasicExecutionRole AmazonDynamoDBReadOnlyAccess AmazonS3FullAccess CloudFrontFullAccess Click Next.\n6. Name and Review the Role In the Role details section:\nRole Name: Enter LambdaGetStudentRole. Note: The name must match exactly with the Lambda function configuration for getStudentData.\nDescription (optional): Enter a description, e.g., \u0026ldquo;IAM role for Lambda function getStudentData, granting read access to DynamoDB, CloudWatch logging, and supporting S3/CloudFront.\u0026rdquo; Figure 9: Enter role name and description.\nDouble-check:\nTrusted entity: AWS Service (Lambda). Permissions: AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonS3FullAccess, CloudFrontFullAccess. Click Create Role.\nFigure 10: Create Role button to confirm.\n7. Check Role Creation Status After clicking Create Role, you will return to the Roles list.\nFind the LambdaGetStudentRole role. If successful, you should see the message: \u0026ldquo;Role LambdaGetStudentRole created\u0026rdquo;.\nClick on LambdaGetStudentRole to view details:\nARN: Record the ARN (e.g., arn:aws:iam::your-account-id:role/LambdaGetStudentRole) to use when configuring the Lambda function. Policies: Verify the inclusion of AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonS3FullAccess, CloudFrontFullAccess. If the role does not appear, refresh the page or double-check the steps.\nFigure 11: Role details for LambdaGetStudentRole with ARN and policies.\nImportant Notes Factor Details Role Name Must be LambdaGetStudentRole (case-sensitive) to match the Lambda function. Incorrect names will cause execution errors. S3 and CloudFront AmazonS3FullAccess and CloudFrontFullAccess are not currently used, but kept for future functionality (e.g., storing files in S3 or managing CloudFront). Delete if unnecessary to comply with least privilege. Security Optimization Consider creating a custom policy instead of AmazonDynamoDBReadOnlyAccess to restrict access specifically to the studentData table. Check Early Record the ARN and verify the role in IAM before configuring the Lambda function to ensure proper setup. Error Handling If you encounter an \u0026ldquo;Access Denied\u0026rdquo; error, check AWS account permissions (iam:CreateRole) or contact your administrator. Practical Tip: Always verify the ARN and policies immediately after creating the role to confirm configuration before integrating with Lambda.\nConclusion The IAM role LambdaGetStudentRole ensures that the Lambda function getStudentData has permissions to read data from DynamoDB, log data to CloudWatch, and support potential extensions with S3 and CloudFront. This role is now ready to be integrated into the Lambda function in the next steps.\nNext Step: Proceed to Create IAM Role for Lambda Post to set up the role for the function that stores student data!\n"
},
{
	"uri": "/2-preparation-steps/2.2-create-iam-role-for-lambda-post/",
	"title": "Create IAM Role for Lambda Post",
	"tags": [],
	"description": "",
	"content": " Objective: Create the IAM role LambdaInsertStudentRole for the Lambda function insertStudentData, granting permissions to write data to the DynamoDB table studentData, send emails via AWS SES, log data to CloudWatch, and support potential interactions with S3 and CloudFront.\nThe function insertStudentData performs:\nStores student information (Student ID, Full Name, Class, Date of Birth, Email) into the DynamoDB table studentData via the PutItem operation. Sends a confirmation email to the student\u0026rsquo;s email address via AWS SES. This role needs:\nPermissions to log data to CloudWatch (AWSLambdaBasicExecutionRole). Permissions to read and write data to DynamoDB (AmazonDynamoDBFullAccess). Permissions to send email via SES (AmazonSESFullAccess). Permissions for S3 and CloudFront (AmazonS3FullAccess, CloudFrontFullAccess) for potential future features. Note: AmazonS3FullAccess and CloudFrontFullAccess are not currently used in the code, but are retained for future functionalities (e.g., saving files to S3 or managing CloudFront).\nDetailed Steps Below are the detailed steps to create the IAM role LambdaInsertStudentRole:\n1. Access the AWS Management Console Open your browser and log in to the AWS Management Console with your AWS account.\nIn the search bar at the top of the page, type IAM and select Identity and Access Management (IAM).\nEnsure you are in the correct AWS region (e.g., us-east-1), check in the top right corner.\nFigure 1: AWS Console interface with the IAM search bar.\n2. Navigate to the Roles Section In the IAM interface, find the left-hand navigation menu.\nSelect Roles to view the list of IAM roles. If no roles exist, the list will be empty.\nFigure 2: Navigation menu with the Roles option.\n3. Start the Role Creation Process In the Roles interface, click the Create Role button in the top-right corner.\nFigure 3: Create Role button in the Roles interface.\n4. Choose Trusted Entity Type In the Select trusted entity section, choose AWS Service to specify that the role is for an AWS service.\nIn the Use case section, select Lambda from the list of services.\nClick Next to move to the permission configuration step.\nFigure 4: Choosing AWS Service and Lambda in Use case.\n5. Grant Permissions to the Role In the Permissions section, add the following policies:\nAWSLambdaBasicExecutionRole:\nType AWSLambdaBasicExecutionRole in the search bar. Select the AWSLambdaBasicExecutionRole policy. Description: Allows the Lambda function to log to CloudWatch for monitoring and debugging.\nFigure 5: Selecting the AWSLambdaBasicExecutionRole policy.\nAmazonDynamoDBFullAccess:\nType AmazonDynamoDBFullAccess in the search bar. Select the AmazonDynamoDBFullAccess policy. Description: Grants read and write access to DynamoDB, including the PutItem operation required for the insertStudentData function.\nFigure 6: Selecting the AmazonDynamoDBFullAccess policy.\nAmazonSESFullAccess:\nType AmazonSESFullAccess in the search bar. Select the AmazonSESFullAccess policy. Description: Grants permission to send emails via SES to send confirmation notifications (e.g., to nguyentribaothang@gmail.com).\nFigure 7: Selecting the AmazonSESFullAccess policy.\nAmazonS3FullAccess (optional):\nType AmazonS3FullAccess in the search bar. Select the AmazonS3FullAccess policy. Description: Grants read, write, and manage S3 buckets for potential future features.\nFigure 8: Selecting the AmazonS3FullAccess policy.\nCloudFrontFullAccess (optional):\nType CloudFrontFullAccess in the search bar. Select the CloudFrontFullAccess policy. Description: Grants permission to manage CloudFront distributions for potential future features.\nFigure 9: Selecting the CloudFrontFullAccess policy.\nVerify the list of Permissions policies to ensure it includes:\nAWSLambdaBasicExecutionRole AmazonDynamoDBFullAccess AmazonSESFullAccess AmazonS3FullAccess CloudFrontFullAccess Click Next.\n6. Name and Review the Role In the Role details section:\nRole Name: Enter LambdaInsertStudentRole. Note: The name must match exactly with the Lambda function configuration for insertStudentData.\nDescription (optional): Enter a description, e.g., \u0026ldquo;IAM role for Lambda function insertStudentData, granting write access to DynamoDB, sending emails via SES, logging to CloudWatch, and supporting S3/CloudFront.\u0026rdquo; Figure 10: Enter role name and description.\nDouble-check:\nTrusted entity: AWS Service (Lambda). Permissions: AWSLambdaBasicExecutionRole, AmazonDynamoDBFullAccess, AmazonSESFullAccess, AmazonS3FullAccess, CloudFrontFullAccess. Click Create Role.\n7. Check Role Creation Status After clicking Create Role, you will return to the Roles list.\nFigure 11: Click Create Role to finalize the creation.\nFind the LambdaInsertStudentRole role. If successful, you should see the message: \u0026ldquo;Role LambdaInsertStudentRole created\u0026rdquo;.\nFigure 12: Success message for the LambdaInsertStudentRole creation.\nClick on LambdaInsertStudentRole to view details:\nARN: Record the ARN (e.g., arn:aws:iam::your-account-id:role/LambdaInsertStudentRole) to use when configuring the Lambda function. Policies: Verify that the correct policies are attached. If the role does not appear, refresh the page or check the steps again.\nImportant Notes Factor Details Role Name Must be LambdaInsertStudentRole (case-sensitive) to match the Lambda function. Incorrect names will cause execution errors. DynamoDB Permissions AmazonDynamoDBReadOnlyAccess does not support PutItem. Use AmazonDynamoDBFullAccess to allow PutItem on the studentData table. S3 and CloudFront AmazonS3FullAccess and CloudFrontFullAccess are not currently used, but are retained for potential future functionalities (e.g., saving files to S3 or managing CloudFront). Delete if unnecessary to comply with least privilege. Check Early Record the ARN and verify the role in IAM before configuring the Lambda function to ensure proper setup. Error Handling If you encounter an \u0026ldquo;Access Denied\u0026rdquo; error, check AWS account permissions (iam:CreateRole, iam:AttachRolePolicy) or contact your administrator. If the function reports AccessDenied, check the DynamoDB policy. Use CloudTrail or IAM Access Advisor to pinpoint the issue. AWS Region Ensure the AWS region (e.g., us-east-1) is consistent with other services (DynamoDB, Lambda, SES). Check in the top right corner of the AWS Console. Practical Tip: Always verify the role and ARN immediately after creation to confirm correct configuration before integrating with the Lambda function.\nConclusion The IAM role LambdaInsertStudentRole ensures that the Lambda function insertStudentData has the necessary permissions to write data to DynamoDB, send emails via SES, and log data to CloudWatch, while supporting future extensions with S3 and CloudFront. With AmazonDynamoDBFullAccess, the function operates efficiently and securely in a serverless application.\nNext Step: Proceed to Create IAM Role for DynamoDB Backup to set up the role for data backup!\n"
},
{
	"uri": "/2-preparation-steps/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": " Objective: Set up the necessary environment to deploy a serverless application for managing student information, including an AWS account, IAM roles, a DynamoDB table, and the SES service.\nTo begin the Deploying a Serverless Website for Managing Student Information with AWS workshop, you need to prepare the basic components to ensure smooth integration with AWS services such as Lambda, DynamoDB, API Gateway, S3, CloudFront, and SES.\nInitial Requirements You need an AWS account to perform the steps in this workshop. If you don\u0026rsquo;t have one, please create an account before proceeding.\nTo learn how to create an AWS account, refer to the detailed guide here:\nHow to Create an AWS Account Preparation Steps Below are the specific steps to prepare the environment for the serverless application:\nStep Content Description 2.1 Create IAM Role for Lambda Get Create an IAM role for the Lambda function to handle retrieving student data from DynamoDB, ensuring secure and minimal access. 2.2 Create IAM Role for Lambda Post Create an IAM role for the Lambda function to handle storing student data in DynamoDB, adhering to the principle of least privilege. 2.3 Create IAM Role for DynamoDB Backup Create an IAM role for the Lambda function to back up data from DynamoDB to S3, including permissions to write to S3 and send emails via SES. 2.4 Create Table in DynamoDB Set up the studentData table with studentid (String) as the primary key to store student information (Student ID, Full Name, Class, Date of Birth, Email). 2.5 Configure SES Configure AWS SES to send confirmation emails when saving data and backup notifications with a pre-signed URL. Note: Follow the steps in order to ensure the environment is set up correctly. Each step will be detailed in the corresponding documents.\nConclusion After completing these preparation steps, you will have:\nA ready AWS account to deploy the application. The IAM Roles configured to ensure security and minimal access. The studentData table in DynamoDB to store student data. The SES service set up to send email notifications. Ready to continue?\nProceed to Create IAM Role for Lambda Get to start setting up the IAM role for the first Lambda function!\n"
},
{
	"uri": "/6-configuring-s3-buckets/6.2-uploading-static-assets-to-s3/",
	"title": "Upload the Web Interface Resources to S3 (HTML/CSS/JS)",
	"tags": [],
	"description": "",
	"content": " Objective: Upload the static web interface files (index.html, styles.css, scripts.js from section 5) to the S3 Bucket student-management-website-2025 (created in section 6.1) in preparation for enabling Static Website Hosting (section 6.3) and serving the content via CloudFront (section 7). These files form the interface of the Student Data Management application, allowing users to input, view, and back up student data via the GET /students, POST /students, and POST /backup API endpoints (section 4.8) with API Key security (StudentApiKey, section 4.2) and CORS (section 4.7).\nOverview of the Web Interface Resources Files to upload: index.html: The structure of the interface with an input form, student display table, and functional buttons (Save, View, Backup). styles.css: Customizes the interface with Tailwind CSS, Poppins font, color gradients, and animations. scripts.js: The logic for calling the API using jQuery, making requests to the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) with the x-api-key: \u0026lt;StudentApiKey\u0026gt; header. Role of the student-management-website-2025 bucket: Store the static files to serve the web interface through Static Website Hosting. Configure public access (s3:GetObject) in the Bucket Policy (section 6.4) to allow CloudFront to retrieve the content. Integrate with CloudFront to provide HTTPS, improve loading speeds, and enhance security. Integration with the system: The web interface calls the student API (stage prod, section 4.8) to perform the following functions: POST /students: Save records to DynamoDB studentData and send a confirmation email via SES. GET /students: Display data in the table. POST /backup: Create backup files in the S3 bucket student-backup-20250706 (section 2.4, 6.5) and send notification emails via SES. CORS is configured (section 4.7) to support requests from the CloudFront domain (e.g., https://d12345678.cloudfront.net). Initial Requirements You need to complete section 6.1 (create the student-management-website-2025 bucket), section 5 (build the web interface with index.html, styles.css, scripts.js), section 4.1 (create the student API), section 4.2 (create the StudentApiKey), section 4.3 (create the StudentUsagePlan), section 4.4 (create the GET /students method), section 4.5 (create the POST /students method), section 4.6 (create the /backup resource and POST /backup method), section 4.7 (enable CORS), section 4.8 (deploy the API to the prod stage), section 4.9 (link the StudentApiKey to StudentUsagePlan and associate with the student API in the prod stage), section 3 (create Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, DynamoDB table studentData, student-backup-20250706 bucket, SES email verification). Ensure your AWS account has permissions to access S3 (s3:PutObject) and the AWS region is us-east-1.\nDetailed Actions Access the AWS Management Console\nOpen your browser and log into the AWS Management Console using your AWS account. In the search bar at the top of the page, type S3 and select the Amazon S3 service to enter the bucket management interface. Check the AWS region: Ensure you are working in the us-east-1 (US East (N. Virginia)) region to sync with the student-management-website-2025 bucket, student API, Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), DynamoDB studentData, student-backup-20250706 bucket, and SES. The region is displayed in the top right corner of the AWS Console.\nFigure 1: AWS Console Interface with the S3 search bar. Select the student-management-website-2025 Bucket\nIn the main Amazon S3 \u0026gt; Buckets interface, find and select the student-management-website-2025 bucket (created in section 6.1). If you cannot find the bucket: Check the AWS region (us-east-1) and refresh the page. Verify that the bucket has been created with the correct name (the bucket name is globally unique, so you may have used a different name such as student-management-website-20250706-abc123). Click on the bucket name to enter the Objects management interface for student-management-website-2025.\nFigure 2: Select the student-management-website-2025 bucket. Open the Upload Interface\nIn the Objects interface for the student-management-website-2025 bucket, click the Upload button (usually located at the top right). The Upload interface will open, allowing you to select or drag and drop files to upload.\nFigure 3: Upload Button in the Bucket Interface. Prepare and Drag and Drop Files to Upload\nPrepare the files: Ensure you have the following files from section 5: index.html: The interface with forms, tables, and functional buttons, using Tailwind CSS and jQuery. styles.css: Custom styles with Poppins font, gradients, and responsive effects. scripts.js: The logic for calling the API with the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey (e.g., xxxxxxxxxxxxxxxxxxxx). Store the files in a local directory (e.g., student-web-files/) for easier management. Check the content: Open scripts.js and verify that API_ENDPOINT and API_KEY have been replaced with the Invoke URL (section 4.8) and StudentApiKey (section 4.2). If not replaced, update it as follows: const API_ENDPOINT = \u0026#39;https://abc123.execute-api.us-east-1.amazonaws.com/prod\u0026#39;; const API_KEY = \u0026#39;xxxxxxxxxxxxxxxxxxxx\u0026#39;; Security note: Do not embed API_KEY directly; see the Note for using AWS Secrets Manager or CloudFront Functions. Open index.html locally in your browser to ensure the interface displays correctly before uploading. Drag and drop the files: In the Upload interface, drag and drop the index.html, styles.css, scripts.js files from your local folder to the upload area. Or click Add files and select each file from your computer. File structure: Upload the files directly to the root folder of the bucket (do not create subfolders like css/, js/) to ensure a simple path (e.g., https://student-management-website-2025.s3-website-us-east-1.amazonaws.com/index.html). If you need subfolders, create them first in the bucket (e.g., Create folder \u0026gt; css, js) and upload the respective files, but update the paths in index.html: \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/styles.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;/js/scripts.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Upload the Files to the Bucket\nAfter selecting the files, verify that the Upload interface shows index.html, styles.css, scripts.js in the file list.\nFigure 4: File List in the Upload Interface. In the Permissions section (in the Upload interface): Predefined ACLs: Select Grant public-read access to ensure CloudFront can retrieve the files. Note: This permission will be replaced by the Bucket Policy (section 6.4) for centralized management, but select it here for initial testing. In the Properties section (optional): Storage class: Choose Standard (default) for optimal performance for the web interface. Server-side encryption: Ensure Enable with SSE-S3 (configured in section 6.1). Click Upload to start uploading the files.\nFigure 5: Click Upload to Upload Files. Check the Upload Status\nAfter clicking Upload, AWS S3 will process the files and display the message: \u0026ldquo;Upload succeeded\u0026rdquo; when all files are uploaded successfully.\nFigure 6: Upload Succeeded Message. To verify: In S3 \u0026gt; Buckets \u0026gt; student-management-website-2025 \u0026gt; Objects, check the list displaying index.html, styles.css, scripts.js. Click each file to view details (e.g., URL, size, upload date). Error Handling: If you encounter an \u0026ldquo;AccessDenied\u0026rdquo; error: Ensure Block all public access is unchecked in section 6.1. Check if your AWS account has s3:PutObject permissions. If files are not showing: Refresh the page or check the AWS region (us-east-1). Verify that you selected the correct student-management-website-2025 bucket. If you see \u0026ldquo;Upload failed\u0026rdquo;: Check the network connection or file size (S3 supports up to 5TB per file). Try uploading each file individually to identify the problematic file. Important Notes Factor Details File Structure - Upload the files directly to the root folder for a simple path (e.g., /index.html, /styles.css, /scripts.js). - If using subfolders (css/, js/), update the paths in index.html and verify when enabling Static Website Hosting (section 6.3). Security - Avoid embedding StudentApiKey directly in scripts.js. Use AWS Secrets Manager or CloudFront Functions to add the x-api-key header: ```javascript // Example with CloudFront Functions function handler(event) { var request = event.request; request.headers[\u0026lsquo;x-api-key\u0026rsquo;] = { value: \u0026lsquo;xxxxxxxxxxxxxxxxxxxx\u0026rsquo; }; return request; } - After uploading, configure the Bucket Policy (section 6.4) to manage the s3:GetObject permission instead of relying on public-read ACL. - Use CloudFront Origin Access Identity (OAI) (section 7) for better security, restricting direct access to S3. Optimization - File Compression: Minimize styles.css and scripts.js (use UglifyJS or CSSNano) to reduce loading time. - Content Check: Open index.html locally in the browser to ensure the interface displays correctly before uploading. - Use AWS CLI: Upload files faster with the command: bash \u0026lt;br\u0026gt; aws s3 cp student-web-files/ s3://student-management-website-2025/ --recursive \u0026lt;br\u0026gt; - S3 Versioning: Enabled in section 6.1, ensuring you can recover from errors when uploading the wrong file. System Integration - After uploading the files, enable Static Website Hosting (section 6.3) to get the endpoint (e.g., http://student-management-website-2025.s3-website-us-east-1.amazonaws.com). - Configure Bucket Policy (section 6.4) to allow CloudFront to retrieve the content. - Integrate with CloudFront (section 7) to serve the interface via HTTPS and improve loading speeds. - Ensure CORS in API Gateway (section 4.7) supports requests from the CloudFront domain (e.g., https://d12345678.cloudfront.net). Integration Testing - Verify the files in S3 \u0026gt; Buckets \u0026gt; student-management-website-2025 \u0026gt; Objects. - After enabling Static Website Hosting (section 6.3), access the S3 endpoint (e.g., http://student-management-website-2025.s3-website-us-east-1.amazonaws.com) to test the interface. - Expected result: The interface should display with forms, tables, and functional buttons. - Note: API requests may encounter CORS errors if CloudFront has not been configured yet; this will be fixed in section 7. - After integrating with CloudFront, test the following functions: - POST /students: Save records to DynamoDB studentData and send an email via SES. - GET /students: Display data in the table. - POST /backup: Create files in student-backup-20250706 and send notification emails. Error Handling - 403 Forbidden: Check the s3:PutObject permission and Bucket Policy (section 6.4). - Files not displaying: Verify the files were uploaded to the correct bucket and root folder. - Interface errors: Check paths in index.html (e.g., \u0026lt;link href=\u0026quot;styles.css\u0026quot;\u0026gt;, \u0026lt;script src=\u0026quot;scripts.js\u0026quot;\u0026gt;) and the browser\u0026rsquo;s log (Developer Tools \u0026gt; Console). Best Practice Tip: Before uploading, test the interface locally with npx serve or a static server to ensure the files work correctly. Use AWS CLI to upload faster if you have multiple files. After uploading, verify the file list in the bucket and proceed with section 6.3 (enable Static Website Hosting).\nConclusion The index.html, styles.css, and scripts.js files have been uploaded to the student-management-website-2025 bucket, ready for enabling Static Website Hosting (section 6.3) and integrating with CloudFront (section 7) to serve the web interface.\nNext step: Proceed to Enable Static Website Hosting to continue configuring!\n"
},
{
	"uri": "/3-creating-lambda-functions/3.3-create-the-backupdynamodbandsendemail-function/",
	"title": "Configure Lambda Function BackupDynamoDBAndSendEmail",
	"tags": [],
	"description": "",
	"content": " Objective: Create and configure the BackupDynamoDBAndSendEmail Lambda function to back up all data from the DynamoDB studentData table into an S3 bucket as a JSON file, create a pre-signed URL, and send a notification email containing the download link via SES. The function uses Python 3.13, architecture x86_64, and is assigned the IAM role DynamoDBBackupRole (created in step 2.3). The function will return a JSON response to integrate with other systems (if needed) and log to CloudWatch for monitoring.\nOverview of the BackupDynamoDBAndSendEmail Function The BackupDynamoDBAndSendEmail function performs the following tasks:\nReads all data from the studentData table (fields studentid, name, class, birthdate, email) using the Scan operation. Temporarily stores the data as a JSON file in the /tmp directory of the Lambda environment. Uploads the JSON file to an S3 bucket with a timestamped filename (e.g., backups/backup-20250707-0409.json). Creates a pre-signed URL (expires in 1 hour) to access the backup file. Sends a notification email via SES with a beautiful HTML content, containing the download link and expiration time. Returns a JSON response confirming the backup status and email sending. Prerequisites You need to complete the preparation steps in section 2 (IAM Role DynamoDBBackupRole, DynamoDB studentData table, SES email verification, S3 bucket student-backup-20250706). Ensure your AWS account is set up and the AWS region is us-east-1.\nDetailed Steps Access AWS Management Console\nOpen your browser and log in to the AWS Management Console with your AWS account.\nIn the top search bar, type Lambda and select AWS Lambda to access the management interface.\nEnsure you are working in the correct AWS region (e.g., us-east-1), check the region in the top-right corner of the AWS Console. This region must match the DynamoDB studentData table, the S3 student-backup-20250706 bucket, and SES.\nFigure 1: AWS Console Interface with Lambda search bar.\nNavigate to the Functions Section\nIn the AWS Lambda main interface, look at the left navigation menu.\nSelect Functions to see the list of existing Lambda functions. If no functions are created, the list will be empty.\nFigure 2: Navigation menu with Functions option.\nStart Creating the Function\nIn the Functions interface, click the Create function button in the top-right corner to start creating a new function.\nFigure 3: Create function button in the Functions interface.\nConfigure Basic Function Information\nIn the Function type section, select Author from scratch to write your own code.\nIn the Function name section, enter BackupDynamoDBAndSendEmail. This name will be used when integrating with other services (e.g., CloudWatch Events/EventBridge for automatic backups).\nIn the Runtime section, select Python 3.13 (the required latest Python version). If Python 3.13 is unavailable, select the latest supported version (e.g., Python 3.12 or 3.11).\nIn the Architecture section, select x86_64 to ensure compatibility with the standard architecture.\nFigure 4: Basic function configuration interface.\nIn the Permissions section, select Use an existing role.\nFrom the list of roles, choose DynamoDBBackupRole (created in section 2.3). This role includes the policies AWSLambdaBasicExecutionRole, AmazonDynamoDBReadOnlyAccess, AmazonS3FullAccess, AmazonSESFullAccess, and CloudFrontFullAccess. Note: CloudFrontFullAccess is not used in the current code but is retained as per previous instructions. Keep the other settings as default and click Create function to create the function.\nFigure 5: Select DynamoDBBackupRole and click Create function.\nCheck Function Creation Status\nAfter clicking Create function, you will be directed to the detail page for the BackupDynamoDBAndSendEmail function. The interface will show a message like: \u0026ldquo;Successfully created the function BackupDynamoDBAndSendEmail. You can now change its code and configuration. To invoke your function with a test event, choose Test.\u0026rdquo; If you don’t see the message or encounter an error, verify that the DynamoDBBackupRole exists and that your AWS account has the lambda:CreateFunction permission. Configure the Code\nIn the function details page for BackupDynamoDBAndSendEmail, go to the Code tab and scroll down to the Code source section. Delete the default code in lambda_function.py and paste the following code: import boto3 import datetime import json from botocore.exceptions import ClientError dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) ses = boto3.client(\u0026#39;ses\u0026#39;) s3_client = boto3.client(\u0026#39;s3\u0026#39;) def lambda_handler(event, context): # Access DynamoDB table table = dynamodb.Table(\u0026#39;studentData\u0026#39;) response = table.scan() items = response[\u0026#39;Items\u0026#39;] # Store data in a temporary file in Lambda backup_file = \u0026#39;/tmp/backup.json\u0026#39; with open(backup_file, \u0026#39;w\u0026#39;) as f: json.dump(items, f) # Upload the file to S3 s3_bucket = \u0026#39;student-backup-20250706\u0026#39; # Replace with your actual bucket name s3_key = f\u0026#39;backups/backup-{datetime.datetime.now().strftime(\u0026#34;%Y%m%d-%H%M%S\u0026#34;)}.json\u0026#39; s3_client.upload_file(backup_file, s3_bucket, s3_key) # Create pre-signed URL (expires in 1 hour) presigned_url = s3_client.generate_presigned_url( \u0026#39;get_object\u0026#39;, Params={\u0026#39;Bucket\u0026#39;: s3_bucket, \u0026#39;Key\u0026#39;: s3_key}, ExpiresIn=3600 ) # Create an HTML email sender = \u0026#39;baothangvip@gmail.com\u0026#39; recipient = \u0026#39;nguyentribaothang@gmail.com\u0026#39; subject = \u0026#39;Student Data Backup Notification\u0026#39; expiry_time = (datetime.datetime.now() + datetime.timedelta(hours=1)).strftime(\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;) html_body = f\u0026#34;\u0026#34;\u0026#34; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;vi\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;style\u0026gt; body {{ font-family: Arial, sans-serif; color: #333; line-height: 1.6; }} .container {{ max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9; border-radius: 8px; }} .header {{ background-color: #4CAF50; color: white; padding: 10px; text-align: center; border-radius: 8px 8px 0 0; }} .content {{ padding: 20px; background-color: white; border-radius: 0 0 8px 8px; }} .button {{ display: inline-block; padding: 10px 20px; background-color: #4CAF50; color: white !important; text-decoration: none; border-radius: 5px; margin-top: 20px; }} .footer {{ font-size: 12px; color: #777; text-align: center; margin-top: 20px; }} \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Student Data Backup\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Dear Customer,\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;The student data has been successfully backed up and stored on AWS S3.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Download the backup file here:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;{presigned_url}\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;Download Backup File\u0026lt;/a\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Note:\u0026lt;/strong\u0026gt; This link will expire on {expiry_time}.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;p\u0026gt;This is an automated email. Please do not reply to this email directly.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026#34;\u0026#34;\u0026#34; try: response = ses.send_email( Source=sender, Destination={\u0026#39;ToAddresses\u0026#39;: [recipient]}, Message={ \u0026#39;Subject\u0026#39;: {\u0026#39;Data\u0026#39;: subject}, \u0026#39;Body\u0026#39;: { \u0026#39;Html\u0026#39;: {\u0026#39;Data\u0026#39;: html_body}, \u0026#39;Text\u0026#39;: {\u0026#39;Data\u0026#39;: f\u0026#39;Backup file: {presigned_url}\\nExpires at: {expiry_time}\u0026#39;} } } ) print(f\u0026#34;Email sent! Message ID: {response[\u0026#39;MessageId\u0026#39;]}\u0026#34;) except ClientError as e: print(f\u0026#34;Error sending email: {e}\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;message\u0026#39;: f\u0026#39;Backup successful but email failed: {str(e)}\u0026#39;}) } return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;message\u0026#39;: \u0026#39;Backup and email sent successfully!\u0026#39;}) } Explanation of the Improved Code:\nLogging: Added logging to record detailed logs to CloudWatch (INFO and ERROR levels), replacing print for easier monitoring. Pagination Handling: Added a while loop to handle pagination for the Scan operation, ensuring that all data from large tables is fetched. CORS: Added Access-Control-Allow-Origin: '*' header in all responses to integrate with API Gateway. Error Handling: Added try-except blocks for the Scan, file saving, S3 upload, and pre-signed URL creation steps, returning detailed error messages with a 500 status code. AWS Region: Specified region_name='us-east-1' for DynamoDB, S3, and SES to ensure consistency. HTML Email: Kept the beautiful HTML content with inline CSS, but added logging for email sending status. Check and Modify:\nAWS Region: Replace region_name='us-east-1' in the dynamodb, ses, and s3_client initialization lines if you are using another region (e.g., us-west-2). Email: Replace baothangvip@gmail.com (sender) and nguyentribaothang@gmail.com (recipient) with verified SES emails (step 2.5). If SES is in sandbox mode, both emails need to be verified. S3 Bucket: Replace student-backup-20250706 with your actual bucket name (to be created in the next step). Click Deploy to save and deploy the code.\nFigure 6: BackupDynamoDBAndSendEmail code editing interface.\nAfter deployment, the interface will display the message: \u0026ldquo;Successfully updated the function BackupDynamoDBAndSendEmail.\u0026rdquo;\nConfigure Timeout and Memory\nIn the Configuration tab \u0026gt; General configuration, click Edit. Set Timeout: 60 seconds (enough for Scan, file saving, S3 upload, and email sending). Set Memory: 256 MB (to handle large tables and store temporarily in /tmp). Click Save to save the changes. Reason: The Scan operation on large tables and storing files in /tmp may require more resources than getStudentData or insertStudentData. Test the Function\nIn the Test tab, click Create new test event. Name the event (e.g., testBackupDynamoDB). Use the sample JSON (it can be left empty as the function does not require specific input): {} Click Create to save the test event, then click Test to run the function. Check the result: If successful, the function returns: { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;message\\\u0026#34;: \\\u0026#34;Backup and email sent successfully!\\\u0026#34;}\u0026#34;, \u0026#34;headers\u0026#34;: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34; } } Check the student-backup-20250706 bucket in the S3 Console (go to S3 \u0026gt; Buckets \u0026gt; student-backup-20250706 \u0026gt; Objects) to verify the backup file (e.g., backups/backup-20250707-0409.json). Check the recipient\u0026rsquo;s email inbox (nguyentribaothang@gmail.com, including Spam/Junk) to view the notification email with HTML content like: \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;vi\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;style\u0026gt; body { font-family: Arial, sans-serif; color: #333; line-height: 1.6; } .container { max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9; border-radius: 8px; } .header { background-color: #4CAF50; color: white; padding: 10px; text-align: center; border-radius: 8px 8px 0 0; } .content { padding: 20px; background-color: white; border-radius: 0 0 8px 8px; } .button { display: inline-block; padding: 10px 20px; background-color: #4CAF50; color: white !important; text-decoration: none; border-radius: 5px; margin-top: 20px; } .footer { font-size: 12px; color: #777; text-align: center; margin-top: 20px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Student Data Backup\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Dear Customer,\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;The student data has been successfully backed up and stored on AWS S3.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Download the backup file here:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;[pre-signed-url]\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;Download Backup File\u0026lt;/a\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Note:\u0026lt;/strong\u0026gt; This link will expire on [expiry_time].\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;p\u0026gt;This is an automated email. Please do not reply to this email directly.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Click the link in the email to verify that the backup file can be downloaded. Check the log in CloudWatch (go to Monitor \u0026gt; Logs \u0026gt; select log group /aws/lambda/BackupDynamoDBAndSendEmail) to view detailed information (number of records, Message ID of the email). If there are errors, check the common issues: \u0026ldquo;AccessDenied\u0026rdquo; (DynamoDB): Check that the DynamoDBBackupRole has the Scan permission. \u0026ldquo;AccessDenied\u0026rdquo; (S3): Check the PutObject permission in AmazonS3FullAccess and ensure the student-backup-20250706 bucket exists. \u0026ldquo;Email address is not verified\u0026rdquo; (SES): Ensure baothangvip@gmail.com and nguyentribaothang@gmail.com are verified in SES. \u0026ldquo;NoSuchBucket\u0026rdquo;: Ensure the student-backup-20250706 bucket has been created (to be set up in the next step). \u0026ldquo;ResourceNotFoundException\u0026rdquo;: Ensure the studentData table exists (step 2.4). Important Notes Factor Details IAM Role The DynamoDBBackupRole (created in step 2.3) is suitable for the function. However, CloudFrontFullAccess is not used. For least privilege, consider removing or replacing it with a custom policy if needed. - Go to IAM \u0026gt; Policies \u0026gt; Create Policy. - Choose JSON, paste the policy above (replace student-backup-20250706 with the actual bucket name). - Name it (e.g., S3BackupStudentData) and attach it to DynamoDBBackupRole. SES Sandbox Ensure both sender (baothangvip@gmail.com) and recipient (nguyentribaothang@gmail.com) emails are verified in SES (step 2.5). If SES is in sandbox mode, both emails must be verified. Exit the sandbox to send emails to any address: - Go to SES \u0026gt; Account dashboard \u0026gt; Request production access. - Fill in the form as instructed in step 2.5. If not out of sandbox, try using the same verified email for both sender and recipient. S3 Bucket Ensure the student-backup-20250706 bucket is created (to be configured in the next step). If not, the function will throw a NoSuchBucket error. Ensure the bucket has a backups/ folder, or the code will create it (if PutObject permission is granted). CORS The Access-Control-Allow-Origin: '*' header is added to support integration with API Gateway (if the function is called from a web interface). Ensure CORS is configured in API Gateway (to be discussed in later steps). AWS Region Ensure the region in the code (us-east-1) matches the region of the studentData table, the S3 bucket, and SES. If using another region (e.g., us-west-2), update region_name in the dynamodb, ses, and s3_client initialization lines. Error Handling If the function reports errors, check the logs in CloudWatch (go to Monitor \u0026gt; Logs \u0026gt; select the log group /aws/lambda/BackupDynamoDBAndSendEmail). Common errors: - \u0026ldquo;AccessDenied\u0026rdquo; (DynamoDB): Missing Scan permission. - \u0026ldquo;AccessDenied\u0026rdquo; (S3): Missing PutObject permission or the bucket does not exist. - \u0026ldquo;Email address is not verified\u0026rdquo; (SES): Email not verified. - \u0026ldquo;ResourceNotFoundException\u0026rdquo;: studentData table not created. Use CloudTrail or IAM Access Advisor to pinpoint permission issues. Optimization - Added pagination handling for Scan (as improved in the code). - Used logging instead of print (as added). - Increased memory (256 MB) and timeout (60 seconds) for handling large tables. - For enhanced security, verify the SES domain (see AWS SES Documentation - DKIM) and update the sender email (e.g., no-reply@system.edu.vn). - If the studentData table is large, consider using DynamoDB Streams for incremental backups rather than using the Scan operation on the whole table. Early Testing After creating and deploying the function, run tests to verify the backup file in S3, the notification email, and the logs in CloudWatch before integrating with CloudWatch Events/EventBridge (for scheduled backups). Practical Tip: Add sample data to the studentData table, check the S3 bucket and recipient\u0026rsquo;s email (including Spam/Junk) to verify results.\nConclusion The Lambda function BackupDynamoDBAndSendEmail has been created to back up student data from the studentData table to S3 and send a notification email with a file download link. The function is ready for integration with CloudWatch Events/EventBridge for scheduled backups.\nNext Step: Proceed to Configuring CloudWatch Events/EventBridge to continue!\n"
},
{
	"uri": "/2-preparation-steps/2.3-create-iam-role-for-dynamodb-backup/",
	"title": "Create IAM Role for DynamoDB Backup",
	"tags": [],
	"description": "",
	"content": " Objective: Create the IAM role DynamoDBBackupRole for the Lambda function BackupDynamoDBAndSendEmail, granting permissions to read and write data to the DynamoDB table studentData, store backup files in S3, send emails via SES, log data to CloudWatch, and support potential interactions with CloudFront.\nThe function BackupDynamoDBAndSendEmail performs:\nReads student data (Student ID, Full Name, Class, Date of Birth, Email) from the DynamoDB table studentData via the Scan operation. Stores a JSON file in an S3 bucket (e.g., student-backup-20250706). Creates a pre-signed URL for the backup file and sends a notification email via SES (e.g., to nguyentribaothang@gmail.com). Logs data to CloudWatch for monitoring. This role needs:\nPermissions to read and write data to DynamoDB (AmazonDynamoDBFullAccess). Permissions to store and create URLs on S3 (AmazonS3FullAccess). Permissions to send emails via SES (AmazonSESFullAccess). Permissions to log data to CloudWatch (AWSLambdaBasicExecutionRole). Permissions for CloudFront (CloudFrontFullAccess) for potential future features. Note: CloudFrontFullAccess is not currently used but is retained for future functionalities (e.g., managing CloudFront distributions).\nDetailed Steps Below are the detailed steps to create the IAM role DynamoDBBackupRole:\n1. Access the AWS Management Console Open your browser and log in to the AWS Management Console with your AWS account.\nIn the search bar, type IAM and select Identity and Access Management (IAM).\nEnsure you are in the correct AWS region (e.g., us-east-1), check in the top right corner.\nFigure 1: AWS Console interface with the IAM search bar.\n2. Navigate to the Roles Section In the IAM interface, find the left-hand navigation menu.\nSelect Roles to view the list of IAM roles. If no roles exist, the list will be empty.\nFigure 2: Navigation menu with the Roles option.\n3. Start the Role Creation Process In the Roles interface, click the Create Role button in the top-right corner.\nFigure 3: Create Role button in the Roles interface.\n4. Choose Trusted Entity Type In the Select trusted entity section, choose AWS Service to specify that the role is for an AWS service.\nIn the Use case section, select Lambda from the list of services.\nClick Next to move to the permission configuration step.\nFigure 4: Choosing AWS Service and Lambda in Use case.\n5. Grant Permissions to the Role In the Permissions section, add the following five policies:\nAmazonDynamoDBFullAccess:\nType AmazonDynamoDBFullAccess in the search bar. Select the AmazonDynamoDBFullAccess policy. Description: Grants read and write access to DynamoDB, supporting operations like Scan and other operations if needed.\nFigure 5: Selecting the AmazonDynamoDBFullAccess policy.\nAmazonS3FullAccess:\nType AmazonS3FullAccess in the search bar. Select the AmazonS3FullAccess policy. Description: Grants permissions to store backup files in S3 (PutObject) and create pre-signed URLs (GeneratePresignedUrl).\nFigure 6: Selecting the AmazonS3FullAccess policy.\nAmazonSESFullAccess:\nType AmazonSESFullAccess in the search bar. Select the AmazonSESFullAccess policy. Description: Grants permission to send emails via SES to notify users with a backup download link (e.g., to nguyentribaothang@gmail.com).\nFigure 7: Selecting the AmazonSESFullAccess policy.\nAWSLambdaBasicExecutionRole:\nType AWSLambdaBasicExecutionRole in the search bar. Select the AWSLambdaBasicExecutionRole policy. Description: Allows the Lambda function to log to CloudWatch for monitoring and debugging.\nFigure 8: Selecting the AWSLambdaBasicExecutionRole policy.\nCloudFrontFullAccess:\nType CloudFrontFullAccess in the search bar. Select the CloudFrontFullAccess policy. Description: Grants permission to manage CloudFront distributions for potential future features.\nFigure 9: Selecting the CloudFrontFullAccess policy.\nVerify the list of Permissions policies to ensure it includes:\nAmazonDynamoDBFullAccess AmazonS3FullAccess AmazonSESFullAccess AWSLambdaBasicExecutionRole CloudFrontFullAccess Click Next.\n6. Name and Review the Role In the Role details section:\nRole Name: Enter DynamoDBBackupRole. Note: The name must match exactly with the Lambda function configuration for BackupDynamoDBAndSendEmail.\nDescription (optional): Enter a description, e.g., \u0026ldquo;IAM role for Lambda function BackupDynamoDBAndSendEmail, granting read and write access to DynamoDB, store backups to S3, send emails via SES, log to CloudWatch, and support CloudFront.\u0026rdquo; Figure 10: Enter role name and description.\nDouble-check:\nTrusted entity: AWS Service (Lambda). Permissions: AmazonDynamoDBFullAccess, AmazonS3FullAccess, AmazonSESFullAccess, AWSLambdaBasicExecutionRole, CloudFrontFullAccess. Click Create Role.\nFigure 11: Create Role button to finalize the creation.\n"
},
{
	"uri": "/7-deploying-cloudfront/7.3-creating-cloudfront-invalidation/",
	"title": "Create Invalidation to Refresh Cache Content",
	"tags": [],
	"description": "",
	"content": " Objective: Create an Invalidation for the CloudFront Distribution StudentWebsiteDistribution (section 7.1) to refresh the cache content, ensuring the static files (index.html, styles.css, scripts.js, section 6.2) from the S3 Bucket student-management-website-2025 are updated on the CloudFront domain (e.g., https://d12345678.cloudfront.net). This ensures that users see the latest version of the web interface when files are modified, while maintaining integration with the student API (stage prod, section 4.8) to perform functions such as saving, viewing, and backing up data. After creating the invalidation, check the Deploying status and the interface via the Distribution domain name.\nOverview of Invalidation Role of Invalidation: CloudFront caches content at edge locations to speed up loading times, but when files in S3 (index.html, styles.css, scripts.js) are updated, old cache can cause users to see outdated versions. Invalidation instructs CloudFront to delete the cache and fetch the latest version from S3, ensuring the web interface reflects changes. Use the /* path to invalidate all cache content in the distribution, suitable when updating multiple files or when the specific file changed is not known (e.g., after uploading a new version of styles.css or scripts.js from section 6.2). Integration with the system: CloudFront serves static files (index.html, styles.css, scripts.js, section 6.2) from the S3 Bucket student-management-website-2025 (sections 6.1–6.4) through Origin Access Identity (OAI) (section 7.1) to restrict access. The web interface calls the student API (section 4.8) with the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey (section 4.2). The functions include: POST /students: Save records to DynamoDB studentData and send a confirmation email via SES. GET /students: Display data in the table. POST /backup: Create a file in the S3 Bucket student-backup-20250706 (section 6.5) and send notification emails via SES. CORS is configured (section 4.7) to support requests from the CloudFront domain (e.g., https://d12345678.cloudfront.net). Initial Requirements You need to complete section 7.1 (create the CloudFront Distribution StudentWebsiteDistribution), section 7.2 (configure the Default Root Object), section 6.1 (create the student-management-website-2025 bucket), section 6.2 (upload index.html, styles.css, scripts.js), section 6.3 (enable Static Website Hosting), section 6.4 (configure Bucket Policy), section 6.5 (configure the student-backup-20250706 bucket), section 5 (build the web interface), section 4.1 (create the student API), section 4.2 (create the StudentApiKey), section 4.3 (create the StudentUsagePlan), section 4.4 (create the GET /students method), section 4.5 (create the POST /students method), section 4.6 (create the /backup resource and POST /backup method), section 4.7 (enable CORS), section 4.8 (deploy the API to the prod stage), section 4.9 (link the StudentApiKey to StudentUsagePlan). Ensure your AWS account has cloudfront:CreateInvalidation, s3:GetObject, and the AWS region is us-east-1 for related services.\nDetailed Actions Access the AWS Management Console\nLog in to the AWS Management Console with your AWS account. In the search bar, type CloudFront and select the Amazon CloudFront service. Check the AWS region: CloudFront is a global service, but ensure the S3 Bucket student-management-website-2025, student API, Lambda, DynamoDB, and SES are in us-east-1.\nFigure 1: AWS Console Interface with the CloudFront search bar. Select the CloudFront Distribution\nIn CloudFront \u0026gt; Distributions, find and select the distribution named StudentWebsiteDistribution (created in section 7.1). Identification: The distribution has an ID starting with E... and the Domain name is of the form d12345678.cloudfront.net. Click the ID or distribution name to enter the distribution details interface. Check the status: Ensure the distribution is Enabled. If it is still In Progress, wait 5–15 minutes for the deployment to complete (section 7.1).\nFigure 2: Select CloudFront Distribution. Access the Invalidations Tab\nIn the details interface of StudentWebsiteDistribution, select the Invalidations tab (usually at the top of the page, next to General, Behaviors, etc.). The Invalidations tab shows a list of invalidations created (if any), with columns such as ID, Status (In Progress or Completed), and Last modified. Create Invalidation\nIn the Invalidations tab, click the Create invalidation button.\nFigure 3: Create Invalidation Button in the Invalidations Tab. In the Create invalidation interface, in the Add object paths field, enter /*. Reason: The /* path instructs CloudFront to invalidate all cache content in the distribution, ensuring all files (index.html, styles.css, scripts.js) are fetched as the latest version from S3. This is suitable when updating multiple files or when the specific changed file is not known (e.g., after uploading a new version of styles.css or scripts.js from section 6.2). Optional: If only updating one file, enter the specific path (e.g., /index.html, /styles.css) to reduce invalidation costs. Click Create invalidation.\nFigure 4: Configure /* Path for Invalidation. Expected result: CloudFront creates a new invalidation, showing in the Invalidations tab with the status In Progress and the message \u0026ldquo;Successfully created invalidation\u0026rdquo;.\nFigure 5: Successful Invalidation Creation Message. Check Invalidation Status\nIn the Invalidations tab, check the Last modified column for the recently created invalidation. Initial status: In Progress (CloudFront is clearing cache at edge locations, takes 1–5 minutes).\nFigure 6: In Progress Invalidation Status. Final status: Completed (the cache has been cleared, and the new content is ready).\nFigure 7: Completed Invalidation Status. Error Handling: Invalidation not created: Check if the IAM role has cloudfront:CreateInvalidation permissions: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;cloudfront:CreateInvalidation\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:cloudfront::\u0026lt;AWS_ACCOUNT_ID\u0026gt;:distribution/\u0026lt;DISTRIBUTION_ID\u0026gt;\u0026#34; } ] } Replace \u0026lt;AWS_ACCOUNT_ID\u0026gt; and \u0026lt;DISTRIBUTION_ID\u0026gt; with actual values (find in CloudFront \u0026gt; Distributions). Status not switching to Completed: Wait 5–10 minutes more, as processing time depends on the number of edge locations. Recreate the invalidation if necessary. Access Distribution Domain Name to Verify\nIn CloudFront \u0026gt; Distributions, copy the Distribution domain name of StudentWebsiteDistribution (e.g., https://d12345678.cloudfront.net). Open your browser and access this URL. Expected result: The web interface should display the latest version of index.html, styles.css, and scripts.js (if updated in S3, section 6.2). The input form, student table, and functional buttons (Save, View, Backup) should display correctly, using Tailwind CSS and Poppins font. Example Check: Upload a new version of styles.css (e.g., change the gradient color) or index.html (e.g., add a new field) to the S3 Bucket student-management-website-2025 (section 6.2). Create an invalidation with /*. Access the CloudFront URL and verify the interface reflects the changes (e.g., new gradient or the new field).\nFigure 8: Web Interface via CloudFront After Invalidation. Verify Interface and API Functionality\nCheck the web interface via the CloudFront URL (e.g., https://d12345678.cloudfront.net): Interface displays: The input form (supports fields studentid, name, class, birthdate, email) works correctly. The student table displays data from the GET /students API. The functional buttons (Save, View, Backup) work, using Tailwind CSS and Poppins font. API Functionality: Save student data: Enter data into the form, click Save, verify the record is saved to DynamoDB studentData and the confirmation email is sent via SES. curl -X POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/students \\ -H \u0026#34;x-api-key: xxxxxxxxxxxxxxxxxxxx\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;studentid\u0026#34;:\u0026#34;SV005\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Pham Thi E\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;CNTT05\u0026#34;,\u0026#34;birthdate\u0026#34;:\u0026#34;2001-05-05\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;student5@example.com\u0026#34;}\u0026#39; View student list: Click View, check that the table displays data from the GET /students API. curl -X GET https://abc123.execute-api.us-east-1.amazonaws.com/prod/students \\ -H \u0026#34;x-api-key: xxxxxxxxxxxxxxxxxxxx\u0026#34; Backup data: Click Backup, verify the file is created in the S3 Bucket student-backup-20250706 and the notification email is sent via SES. curl -X POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/backup \\ -H \u0026#34;x-api-key: xxxxxxxxxxxxxxxxxxxx\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; Error Handling: Content not updated: Check if the invalidation status is Completed in the Invalidations tab. Recreate the invalidation with /* if needed. Verify that the new files (index.html, styles.css, scripts.js) are uploaded to S3 correctly (section 6.2). Check the Bucket Policy (section 7.1) for OAI access: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowCloudFrontOAI\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity \u0026lt;OAI_ID\u0026gt;\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-management-website-2025/*\u0026#34; } ] } 403 Forbidden: Check the OAI configuration (section 7.1) in CloudFront and the Bucket Policy of S3. Ensure index.html, styles.css, and scripts.js are uploaded to S3 (section 6.2). Verify Block public access is enabled (except Block public access for bucket policies) in S3 (section 7.1). 404 Not Found: Check that Default Root Object is set to index.html in CloudFront \u0026gt; Distributions \u0026gt; General. Verify Static Website Hosting (section 6.3) is enabled with index.html as the Index document in S3. Incorrect Interface: Open Developer Tools \u0026gt; Console to check errors loading styles.css or scripts.js. Check the paths in index.html (e.g., \u0026lt;link href=\u0026quot;styles.css\u0026quot;\u0026gt;, \u0026lt;script src=\u0026quot;scripts.js\u0026quot;\u0026gt;) match the directory structure in S3. CORS Errors when Calling API: Check the CORS configuration in API Gateway (section 4.7) with Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Ensure scripts.js sends the API request with the correct Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and header x-api-key: \u0026lt;StudentApiKey\u0026gt;. API Errors: Check StudentApiKey, StudentUsagePlan (section 4.9), and CloudWatch logs for Lambda. Important Notes Factor Details Security Ensure the Bucket Policy only allows OAI access to S3 (section 7.1). Avoid embedding StudentApiKey in scripts.js. Use CloudFront Functions to add the x-api-key header: javascript \u0026lt;br\u0026gt; function handler(event) { \u0026lt;br\u0026gt; var request = event.request; \u0026lt;br\u0026gt; request.headers['x-api-key'] = { value: 'xxxxxxxxxxxxxxxxxxxx' }; \u0026lt;br\u0026gt; return request; \u0026lt;br\u0026gt; } \u0026lt;br\u0026gt; Optimization Enable CloudFront Standard Logs to track access: In CloudFront \u0026gt; Distribution \u0026gt; General \u0026gt; Logging, select On, and specify a log bucket (e.g., student-web-logs-20250706). Use AWS CLI to automate invalidation: bash \u0026lt;br\u0026gt; aws cloudfront create-invalidation --distribution-id \u0026lt;DISTRIBUTION_ID\u0026gt; --paths \u0026quot;/*\u0026quot; \u0026lt;br\u0026gt; System Integration Update CORS in API Gateway (section 4.7) with Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Ensure POST /students, GET /students, POST /backup work with Invoke URL and StudentApiKey. Integration Testing Access the CloudFront URL (https://d12345678.cloudfront.net) and check: - POST /students: Save records, send SES email. - GET /students: Display table. - POST /backup: Create file in student-backup-20250706, send email. Use Developer Tools \u0026gt; Network to check API requests. Error Handling Content not updated: Check invalidation status, S3 files, and Bucket Policy. 403 Forbidden: Check OAI, Bucket Policy, s3:GetObject permission. 404 Not Found: Verify index.html is Default Root Object, file exists in S3. CORS: Check Access-Control-Allow-Origin header in Lambda (section 3) and API Gateway (section 4.7). 429: Check rate/burst/quota limits in StudentUsagePlan (section 4.3). Best Practice Tip: Create an invalidation whenever updating files in S3. Test the CloudFront URL immediately after the Completed status. Use AWS CLI to automate invalidations: aws cloudfront create-invalidation --distribution-id \u0026lt;DISTRIBUTION_ID\u0026gt; --paths \u0026quot;/*\u0026quot;.\nConclusion The Invalidation has been created for CloudFront Distribution StudentWebsiteDistribution, ensuring cache content is refreshed, and the web interface displays the latest version from S3. The system is integrated with the student API and is ready for operation.\nNext step: Proceed to Set Up System Backup to begin system backup deployment!\n"
},
{
	"uri": "/3-creating-lambda-functions/",
	"title": "Creating Lambda Functions",
	"tags": [],
	"description": "",
	"content": " Objective: Create and configure three Lambda functions in AWS to support the main features of the student information management system:\ngetStudentData: Retrieve all student data from the DynamoDB studentData table. insertStudentData: Store student information in the DynamoDB table and send a confirmation email via SES. BackupDynamoDBAndSendEmail: Backup data from the DynamoDB table to S3 and send a notification email with a backup file download link. Each function will be created through the AWS Management Console, using the programming language Python 3.12 (or the latest supported version), assigned the corresponding IAM Role (created in sections 2.1, 2.2, 2.3), and configured to integrate with other AWS services (DynamoDB, SES, S3). The steps below ensure that learners can deploy the functions easily while optimizing performance and security.\nInitial Requirements You need to complete the preparation steps in section 2 (IAM Roles, DynamoDB table, SES) before creating the Lambda functions. Ensure your AWS account is ready.\nConfiguration Steps Below are the specific steps to configure the Lambda functions:\nStep Content Description 3.1 Create the getStudentData Function Create the Lambda function to retrieve all student data from the DynamoDB studentData table using the Scan operation. 3.2 Create the insertStudentData Function Create the Lambda function to store student information in the DynamoDB studentData table and send a confirmation email via SES. 3.3 Create the BackupDynamoDBAndSendEmail Function Create the Lambda function to back up data from the DynamoDB studentData table to S3 and send a notification email with a pre-signed URL. Note: Follow the steps in order to ensure that the functions are configured correctly. Each step will be detailed in the corresponding documents.\nConclusion After completing these configuration steps, you will have:\nThe getStudentData function to retrieve student data. The insertStudentData function to store data and send a confirmation email. The BackupDynamoDBAndSendEmail function to back up data and send notifications. Ready to continue?\nGo to Create the getStudentData Function to start configuring the first Lambda function!\n"
},
{
	"uri": "/6-configuring-s3-buckets/6.3-enabling-static-website-hosting/",
	"title": "Enable Static Website Hosting",
	"tags": [],
	"description": "",
	"content": " Objective: Enable Static Website Hosting on the S3 Bucket student-management-website-2025 to serve the static files (index.html, styles.css, scripts.js from section 6.2) as a static website. This provides an HTTP endpoint (e.g., http://student-management-website-2025.s3-website-us-east-1.amazonaws.com) to access the interface, preparing it for distribution via CloudFront (section 7) with HTTPS and high performance. The interface calls the GET /students, POST /students, and POST /backup API endpoints (section 4.8) using the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey (section 4.2) with CORS (section 4.7).\nOverview of Static Website Hosting Role of Static Website Hosting: Turns the student-management-website-2025 bucket into a static web server, providing an HTTP endpoint (e.g., http://student-management-website-2025.s3-website-us-east-1.amazonaws.com). Handles HTTP GET requests for static files (index.html, styles.css, scripts.js). Sets index.html as the Index document to display the main page when accessing the root endpoint. Integration with the system: The web interface calls the student API (stage prod, section 4.8) to: POST /students: Save records to DynamoDB studentData and send a confirmation email via SES. GET /students: Display data in the table. POST /backup: Create a backup file in the S3 Bucket student-backup-20250706 (section 2.4, 6.5) and send notification emails via SES. Bucket Policy (section 6.4) allows public access (s3:GetObject) for CloudFront to retrieve the content. CloudFront (section 7) uses the S3 endpoint as the Origin to provide HTTPS and improve load times. CORS is configured (section 4.7) to support requests from the CloudFront domain (e.g., https://d12345678.cloudfront.net). Reason for choosing index.html as the Index document: index.html is the main file containing the interface (form, table, functional buttons) uploaded in section 6.2. When accessing the root endpoint, S3 automatically serves index.html as the default page. Initial Requirements You need to complete section 6.1 (create the student-management-website-2025 bucket), section 6.2 (upload index.html, styles.css, scripts.js), section 5 (build the web interface), section 4.1 (create the student API), section 4.2 (create the StudentApiKey), section 4.3 (create the StudentUsagePlan), section 4.4 (create the GET /students method), section 4.5 (create the POST /students method), section 4.6 (create the /backup resource and POST /backup method), section 4.7 (enable CORS), section 4.8 (deploy the API to the prod stage), section 4.9 (link the StudentApiKey to StudentUsagePlan), section 3 (create Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, DynamoDB table studentData, student-backup-20250706 bucket, SES email verification). Ensure your AWS account has s3:PutBucketWebsite permissions and the AWS region is us-east-1.\nDetailed Actions Access the AWS Management Console\nOpen your browser and log into the AWS Management Console using your AWS account. In the search bar at the top of the page, type S3 and select the Amazon S3 service to enter the bucket management interface. Check the AWS region: Ensure you are working in the us-east-1 (US East (N. Virginia)) region to sync with the student-management-website-2025 bucket, student API, Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), DynamoDB studentData, student-backup-20250706 bucket, and SES. The region is displayed in the top right corner of the AWS Console.\nFigure 1: AWS Console Interface with the S3 search bar. Select the student-management-website-2025 Bucket\nIn the main Amazon S3 \u0026gt; Buckets interface, find and select the student-management-website-2025 bucket (created in section 6.1). If you cannot find the bucket: Check the AWS region (us-east-1) and refresh the page. Verify that the bucket has been created with the correct name (the bucket name is globally unique, so you may have used a different name such as student-management-website-20250706-abc123). Click on the bucket name to enter the Bucket Management interface.\nFigure 2: Select the student-management-website-2025 bucket. Access the Properties Tab\nIn the student-management-website-2025 bucket interface, select the Properties tab (usually located at the top of the page, next to Objects, Permissions, etc.). Scroll down to the Static website hosting section to see the current status (default is Disabled).\nFigure 3: Properties Tab and Static Website Hosting Section. Edit Static Website Hosting\nIn the Static website hosting section, click the Edit button to open the configuration interface. Before editing, verify that the files index.html, styles.css, scripts.js have been uploaded to the bucket (section 6.2), as Static Website Hosting requires the index.html file to function correctly.\nFigure 4: Click Edit in Static Website Hosting. Configure Static Website Hosting\nIn the Edit static website hosting interface, enter the following information: Static website hosting: Select Enable to enable the feature. Hosting type: Select Host a static website (suitable for the static interface of the application). Note: Do not select Redirect requests for an object (used for redirects, not applicable here). Index document: Enter index.html (the main file of the web interface, containing the form and student table). Reason: When accessing the root endpoint of the bucket, S3 will serve index.html as the default page. Error document (Optional): Enter index.html to redirect any errors (e.g., 404 Not Found) back to the main page. Reason: Ensures the user always sees the main interface, even when accessing non-existent paths. If you want a custom error page, upload the error.html file (section 6.2) and enter the file name here. Review the configuration: Ensure Enable is selected, Hosting type is Host a static website, and Index document is index.html.\nFigure 5: Configure Static Website Hosting. Save Changes\nClick Save changes to apply the configuration. Expected result: AWS S3 will display the message \u0026ldquo;Successfully edited static website hosting\u0026rdquo;.\nFigure 6: Click Save Changes. In the Properties \u0026gt; Static website hosting tab, you will see: Status: Enabled. Bucket website endpoint: A URL like http://student-management-website-2025.s3-website-us-east-1.amazonaws.com. Copy the Bucket website endpoint to test.\nFigure 7: Status Message and Bucket Website Endpoint. Test Static Website Hosting\nOpen your browser and go to the Bucket website endpoint (e.g., http://student-management-website-2025.s3-website-us-east-1.amazonaws.com).\nExpected result:\nThe web interface should display with the input form, student table, and functional buttons (Save, View, Backup). The styles.css and scripts.js files should load correctly, and the interface should use Tailwind CSS and Poppins font as expected.\nFigure 8: Web Interface Displayed via S3 Endpoint. Note:\nAPI requests (GET /students, POST /students, POST /backup) may encounter CORS errors because the S3 endpoint uses HTTP and has not yet integrated with CloudFront. This will be addressed when configuring CloudFront (section 7) and CORS in API Gateway (section 4.7). The S3 endpoint only supports HTTP, not HTTPS. CloudFront will provide HTTPS and improve loading times. Error Handling:\n403 Forbidden: Check the Bucket Policy (section 6.4) to ensure s3:GetObject is allowed publicly. Ensure Block all public access is unchecked (section 6.1). 404 Not Found: Verify that index.html is uploaded to the bucket (section 6.2) and is located in the root directory. Check the paths in index.html for styles.css and scripts.js (e.g., , ). Incorrect Interface Display: Open Developer Tools \u0026gt; Console in the browser to check for errors (e.g., CSS/JS files not loading). Verify that the files were uploaded correctly (section 6.2) and are not corrupted. \u0026ldquo;AccessDenied\u0026rdquo; error: Check if the IAM role of your account has s3:PutBucketWebsite permissions. Important Notes Factor Details Security Currently, the bucket uses public access (s3:GetObject). Use CloudFront Origin Access Identity (OAI) (section 6.4) to restrict direct access to S3. Avoid embedding StudentApiKey in scripts.js; use AWS Secrets Manager or CloudFront Functions: function handler(event) { var request = event.request; request.headers[\u0026lsquo;x-api-key\u0026rsquo;] = { value: \u0026lsquo;xxxxxxxxxxxxxxxxxxxx\u0026rsquo; }; return request; } Optimization Ensure styles.css, scripts.js are compressed (section 6.2). Enable S3 Access Logs: In S3 \u0026gt; student-management-website-2025 \u0026gt; Properties \u0026gt; Server access logging, select Enable, and specify a log bucket (e.g., student-web-logs-20250706). Use AWS CLI: aws s3api put-bucket-website \u0026ndash;bucket student-management-website-2025 \u0026ndash;website-configuration \u0026lsquo;{\u0026ldquo;IndexDocument\u0026rdquo;:{\u0026ldquo;Suffix\u0026rdquo;:\u0026ldquo;index.html\u0026rdquo;},\u0026ldquo;ErrorDocument\u0026rdquo;:{\u0026ldquo;Key\u0026rdquo;:\u0026ldquo;index.html\u0026rdquo;}}\u0026rsquo; System Integration Configure Bucket Policy (section 6.4) to allow CloudFront to retrieve the content. Create a CloudFront distribution (section 7) with the Origin as the Bucket website endpoint, Default root object: index.html, Viewer protocol policy: Redirect HTTP to HTTPS. Update CORS in API Gateway (section 4.7) with Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Integration Testing Access the Bucket website endpoint to test the interface. After configuring CloudFront, access the CloudFront URL (https://d12345678.cloudfront.net) and check: POST /students (save records, send SES email), GET /students (display table), POST /backup (create file in student-backup-20250706, send email). Use Developer Tools \u0026gt; Network to test API requests. Error Handling 403 Forbidden: Check the Bucket Policy (section 6.4) and Block all public access (section 6.1). 404 Not Found: Verify index.html is in the root folder, paths in index.html are correct (, ). Incorrect Interface: Check Developer Tools \u0026gt; Console. AccessDenied: Check IAM role (s3:PutBucketWebsite). Best Practice Tip: Test the S3 endpoint before integrating CloudFront. If you encounter CORS errors, verify the CORS configuration in API Gateway (section 4.7). Use AWS CLI to automate configuration.\nConclusion The Static Website Hosting feature has been enabled on the student-management-website-2025 bucket, providing an endpoint to serve the web interface. The bucket is ready to integrate with CloudFront (section 7) to support HTTPS.\nNext step: Proceed to Configure Bucket Policy for Public Access to continue configuring!\n"
},
{
	"uri": "/4-creating-a-restful-api/4.3-creating-a-usage-plan/",
	"title": "Set Up Usage Plan",
	"tags": [],
	"description": "",
	"content": " Objective: Create a Usage Plan named StudentUsagePlan in AWS API Gateway to control and limit access to the student API (created in section 4.1) via the StudentApiKey (created in section 4.2). The Usage Plan will apply rate limits (Rate: 5 requests/second, Burst: 10 requests) and a quota (1000 requests/day), ensuring cost control, preventing abuse, and securing the endpoints (GET /students, POST /students, POST /backup) when accessed from the web interface (running on CloudFront).\nOverview of Usage Plan in API Gateway A Usage Plan is a mechanism in API Gateway for managing how clients use the API via API Key, including: Rate Limiting: Limits the number of requests per second (Rate) and the maximum number of simultaneous requests (Burst). Quota: Limits the total number of requests in a given time period (e.g., day, week, month). In this system, StudentUsagePlan will: Link with the StudentApiKey to authenticate requests. Apply to the student API and stage (e.g., prod, to be created in section 4.8). Ensure the web interface only sends valid requests with the API Key within the predefined limits. Usage Plan helps protect the API from abuse attacks (like DDoS) and controls the cost of using API Gateway. Prerequisites You need to complete section 4.1 (create the student API), section 4.2 (create the StudentApiKey API Key), and section 3 (create the Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, the DynamoDB table studentData, the S3 bucket student-backup-20250706, and SES email verification). Ensure your AWS account is set up, and the AWS region is us-east-1.\nDetailed Steps Access AWS Management Console\nOpen your browser and log in to AWS Management Console with your AWS account.\nIn the search bar at the top, type API Gateway and select the Amazon API Gateway service to access the management interface.\nCheck the AWS region: Make sure you are working in the primary AWS region (e.g., us-east-1), and check the region at the top right corner of the AWS Console. This region must match the student API (created in section 4.1) and the Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail).\nFigure 1: AWS Console Interface with API Gateway Search Bar.\nNavigate to the Usage Plans Section\nIn the main Amazon API Gateway interface, look at the left navigation menu.\nSelect Usage Plans to view the list of existing Usage Plans. If you haven\u0026rsquo;t created any plans, the list will be empty.\nThe interface will show options to create or manage Usage Plans.\nFigure 2: Navigation Menu with Usage Plans Option.\nStart the Usage Plan Creation Process\nIn the Usage Plans interface, click the Create (or Create usage plans depending on the Console version) button at the top right to begin creating a new Usage Plan.\nFigure 3: Create Button in the Usage Plans Interface.\nConfigure the Usage Plan\nIn the Create Usage Plan section:\nName: Enter StudentUsagePlan exactly. This name helps you easily identify the plan when linking it with the API Key and stage. Description: Enter Usage Plan to control access to StudentManagementAPI (or a similar description for clarity). Enable throttling: Select to enable rate limiting. Rate: Enter 5 (5 requests/second). Burst: Enter 10 (10 simultaneous requests maximum). Explanation: Rate limits the number of requests per second that the client (with the API Key) can send. Burst limits the maximum number of requests that can be processed simultaneously, allowing for a burst of requests. These values are suitable for a small-scale application like a student management system. Figure 4: Usage Plan Configuration Interface.\nEnable quota: Select to enable quota limits. Quota: Enter 1000 and choose requests per Day (1000 requests/day). Explanation: Quota limits the total number of requests per day, helping control costs and prevent abuse. Keep the other settings at their default values (e.g., don\u0026rsquo;t enable Enable usage plan metrics unless you need detailed monitoring). Click Next to continue.\nFigure 5: Click Create Button.\nCheck the Status of the Usage Plan Creation\nAfter clicking Create, you will see the message: \u0026ldquo;Successfully created usage plan ‘StudentUsagePlan’.\u0026rdquo;\nIn the Usage Plans list, select StudentUsagePlan to view the details.\nVerify:\nThrottling: Rate = 5 requests/second, Burst = 10 requests. Quota: 1000 requests/day. API Keys: StudentApiKey is linked. If you don\u0026rsquo;t see the message or encounter an error:\nCheck the IAM permissions for your AWS account to include apigateway:POST to create Usage Plans. Make sure you are in the correct AWS region (us-east-1). Refresh the page or check the Usage Plans list again. Figure 6: Usage Plan Details Page After Creation.\nImportant Notes Element Details Linking with Stage The Usage Plan will be linked with the prod stage of the student API in section 4.9. After deploying the API (section 4.8), you need to go back to StudentUsagePlan to add the student API and the prod stage. - In Associated APIs and Stages, select Add API Stage, and choose the student API and prod stage. API Key Security Make sure the StudentApiKey is copied and stored safely (section 4.2). Do not embed the API Key directly in the JavaScript code of the web interface. Use environment variables or AWS Secrets Manager: - Go to AWS Secrets Manager \u0026gt; Store a new secret \u0026gt; Choose Other type of secret \u0026gt; Enter the API Key. - Name the secret (e.g., student-api-key) and retrieve it in the web interface through the AWS SDK. Rate and Quota Limits Rate: 5 requests/second and Burst: 10 requests are suitable for a small-scale application. If more users are required, increase the values (e.g., Rate = 100, Burst = 200). Quota: 1000 requests/day is sufficient for testing. If needed, increase the quota (e.g., 10,000 requests/day) in production. Error Handling If you encounter an error \u0026ldquo;AccessDenied\u0026rdquo;: - Check if your AWS account IAM permissions include apigateway:POST, apigateway:PUT to create and link Usage Plans. - Make sure the StudentApiKey exists (section 4.2). If the client receives a 429 \u0026quot;Too Many Requests\u0026quot; error when calling the API, check: - Requests exceed Rate or Burst. - Quota of 1000 requests/day has been exceeded (check in Usage Plans \u0026gt; Usage). If the Usage Plan does not appear, refresh the page or check the AWS region again. Optimization - Enable CloudWatch Metrics for the Usage Plan to track the number of requests: - In StudentUsagePlan, select Enable usage plan metrics. - Check in CloudWatch \u0026gt; Metrics \u0026gt; API Gateway \u0026gt; UsagePlanId. - Consider using AWS WAF with API Gateway to protect against DDoS attacks or API Key abuse. - If you need many clients (e.g., multiple web applications), create additional API Keys and link them with the same StudentUsagePlan. Early Testing - After creating StudentUsagePlan, verify the plan appears in the Usage Plans list, and StudentApiKey is linked. - After deploying the API (section 4.8), test the Usage Plan by calling the endpoint with the API Key using Postman or curl. - If you receive a 403 \u0026quot;Forbidden\u0026quot; error, check if the API Key is linked with the Usage Plan and if the method requires API Key Required: true (section 4.4, 4.5, 4.6). Web Interface Integration Testing After linking the Usage Plan to the prod stage (section 4.9), use the API Key in the web interface to call the endpoints (GET /students, POST /students, POST /backup). Practical Tip: Verify that the StudentUsagePlan is correctly configured with Rate, Burst, and Quota before linking it to the prod stage. Monitor the number of requests via CloudWatch after testing the API.\nConclusion The StudentUsagePlan has been successfully created in AWS API Gateway, with Rate (5 requests/second), Burst (10 requests), and Quota (1000 requests/day) limits, ready to be linked to the student API and the prod stage.\nNext step: Go to Create GET Method to Retrieve Data to continue!\n"
},
{
	"uri": "/6-configuring-s3-buckets/6.4-setting-bucket-policy-for-public-access/",
	"title": "Configure Bucket Policy for Public Access",
	"tags": [],
	"description": "",
	"content": " Objective: Configure the Bucket Policy for the S3 Bucket student-management-website-2025 to allow public access (s3:GetObject) to the static files (index.html, styles.css, scripts.js from section 6.2). This ensures the static web interface (enabled with Static Website Hosting in section 6.3) can be accessed via the S3 endpoint or CloudFront (section 7). The Bucket Policy allows everyone (Principal: *) to read the files, supporting integration with the student API (stage prod, section 4.8) to call the GET /students, POST /students, and POST /backup endpoints with API Key security (StudentApiKey, section 4.2) and CORS (section 4.7).\nOverview of Bucket Policy Role of Bucket Policy: Grants public access (s3:GetObject) for browsers or CloudFront to read the static files (index.html, styles.css, scripts.js). Ensures the Static Website Hosting endpoint (e.g., http://student-management-website-2025.s3-website-us-east-1.amazonaws.com) serves the web interface correctly. Prepares for integration with CloudFront to provide HTTPS and high performance. Integration with the system: The web interface calls the student API (section 4.8) using the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey in the x-api-key header. The functions include: POST /students: Save records to DynamoDB studentData and send a confirmation email via SES. GET /students: Display data in the table. POST /backup: Create a backup file in the S3 Bucket student-backup-20250706 (section 2.4, 6.5) and send notification emails via SES. Bucket Policy (section 6.4) allows public access (s3:GetObject) for CloudFront to retrieve the content. CloudFront (section 7) uses the S3 endpoint as the Origin to provide HTTPS and improve load times. CORS is configured (section 4.7) to support requests from the CloudFront domain (e.g., https://d12345678.cloudfront.net). Reason for granting public access: Static Website Hosting requires the files in the bucket to be publicly accessible for browsers or CloudFront to load the content. The s3:GetObject permission is granted to Principal: * (everyone) to simplify, but it can be restricted with CloudFront OAI (see Note) for better security. Initial Requirements You need to complete section 6.1 (create the student-management-website-2025 bucket), section 6.2 (upload index.html, styles.css, scripts.js), section 6.3 (enable Static Website Hosting), section 5 (build the web interface), section 4.1 (create the student API), section 4.2 (create the StudentApiKey), section 4.3 (create the StudentUsagePlan), section 4.4 (create the GET /students method), section 4.5 (create the POST /students method), section 4.6 (create the /backup resource and POST /backup method), section 4.7 (enable CORS), section 4.8 (deploy the API to the prod stage), section 4.9 (link the StudentApiKey to StudentUsagePlan), section 3 (create Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, DynamoDB table studentData, student-backup-20250706 bucket, SES email verification). Ensure your AWS account has s3:PutBucketPolicy permissions and the AWS region is us-east-1.\nDetailed Actions Access the AWS Management Console\nOpen your browser and log into the AWS Management Console using your AWS account. In the search bar at the top of the page, type S3 and select the Amazon S3 service to enter the bucket management interface. Check the AWS region: Ensure you are working in the us-east-1 (US East (N. Virginia)) region to sync with the student-management-website-2025 bucket, student API, Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), DynamoDB studentData, student-backup-20250706 bucket, and SES. The region is displayed in the top right corner of the AWS Console.\nFigure 1: AWS Console Interface with the S3 search bar. Select the student-management-website-2025 Bucket\nIn the main Amazon S3 \u0026gt; Buckets interface, find and select the student-management-website-2025 bucket (created in section 6.1). If you cannot find the bucket: Check the AWS region (us-east-1) and refresh the page. Verify that the bucket has been created with the correct name (the bucket name is globally unique, so you may have used a different name such as student-management-website-20250706-abc123). Click on the bucket name to enter the Bucket Management interface.\nFigure 2: Select the student-management-website-2025 bucket. Access the Permissions Tab\nIn the student-management-website-2025 bucket interface, select the Permissions tab (usually located at the top of the page, next to Objects, Properties, etc.). Scroll down to the Bucket policy section to see the current status (it will be empty by default if not yet configured).\nFigure 3: Permissions Tab and Bucket Policy Section. Edit the Bucket Policy\nIn the Bucket policy section, click the Edit button to open the configuration interface. Before editing: Ensure Block all public access is unchecked (section 6.1) to allow public access configuration. Verify that the files index.html, styles.css, scripts.js have been uploaded (section 6.2) and that Static Website Hosting is enabled with index.html as the Index document (section 6.3).\nFigure 4: Click Edit in Bucket Policy. Edit the Bucket Policy JSON\nIn the Edit bucket policy interface, remove any existing content (if any) and paste the following JSON policy: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-management-website-2025/*\u0026#34; } ] } Explanation of the JSON policy: Version: \u0026ldquo;2012-10-17\u0026rdquo; is the latest IAM policy version. Statement: A list of permission policies. Sid: \u0026ldquo;PublicReadGetObject\u0026rdquo; is an optional identifier for the policy. Effect: \u0026ldquo;Allow\u0026rdquo; grants the specified action. Principal: \u0026ldquo;*\u0026rdquo; allows everyone (including browsers and CloudFront) to access. Action: \u0026ldquo;s3:GetObject\u0026rdquo; allows reading files in the bucket. Resource: \u0026ldquo;arn:aws:s3:::student-management-website-2025/*\u0026rdquo; specifies all files in the student-management-website-2025 bucket. Verify the bucket name in the Resource matches student-management-website-2025.\nFigure 5: Configuring the Bucket Policy. Save Changes\nClick Save changes to apply the Bucket Policy. Expected result: AWS S3 will display the message \u0026ldquo;Successfully edited bucket policy\u0026rdquo;.\nFigure 6: Click Save Changes. Error Handling: \u0026ldquo;Policy has invalid resource\u0026rdquo;: Check the ARN in the Resource is correctly formatted (arn:aws:s3:::student-management-website-2025/*). \u0026ldquo;AccessDenied\u0026rdquo;: Check the IAM role for your account has s3:PutBucketPolicy permissions: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutBucketPolicy\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::student-management-website-2025\u0026#34; } ] } Ensure Block all public access is unchecked (section 6.1). Test Website Access\nGo back to the Properties \u0026gt; Static website hosting tab in the student-management-website-2025 bucket. Copy the Bucket website endpoint (e.g., http://student-management-website-2025.s3-website-us-east-1.amazonaws.com).\nFigure 7: Bucket Website Endpoint. Open your browser and go to this endpoint. Expected result: The web interface should display with the input form, student table, and functional buttons (Save, View, Backup) using Tailwind CSS and Poppins font. The styles.css and scripts.js files should load correctly, and the interface should display as expected.\nFigure 8: Web Interface Displayed via S3 Endpoint. Note: API requests (GET /students, POST /students, POST /backup) may encounter CORS errors because the S3 endpoint uses HTTP and has not yet integrated with CloudFront. This will be addressed when configuring CloudFront (section 7) and CORS in API Gateway (section 4.7). The S3 endpoint only supports HTTP. CloudFront will provide HTTPS and improve loading times. Error Handling: 403 Forbidden: Check the Bucket Policy for the correct ARN (arn:aws:s3:::student-management-website-2025/*). Verify Block all public access is unchecked (section 6.1). Ensure the files index.html, styles.css, and scripts.js are uploaded with public-read permission (section 6.2) or covered by Bucket Policy. 404 Not Found: Verify index.html is uploaded in the root directory (section 6.2). Check that Static Website Hosting is enabled with index.html as the Index document (section 6.3). Incorrect Interface Display: Check Developer Tools \u0026gt; Console in the browser to check for errors (e.g., CSS/JS files not loading). Verify paths in index.html (e.g., \u0026lt;link href=\u0026quot;styles.css\u0026quot;\u0026gt;, \u0026lt;script src=\u0026quot;scripts.js\u0026quot;\u0026gt;). Important Notes Factor Details Security Public access (Principal: \u0026quot;*\u0026quot;) is suitable for initial testing, but not secure for production. Use CloudFront Origin Access Identity (OAI): - Create an OAI in CloudFront \u0026gt; Origin access identities, and attach it to the CloudFront distribution (section 7). - Re-enable Block public access (except for Block public access for bucket policies) after configuring OAI. - Avoid embedding StudentApiKey in scripts.js. Use AWS Secrets Manager or CloudFront Functions: function handler(event) { var request = event.request; request.headers[\u0026lsquo;x-api-key\u0026rsquo;] = { value: \u0026lsquo;xxxxxxxxxxxxxxxxxxxx\u0026rsquo; }; return request; } Optimization Enable S3 Access Logs: In S3 \u0026gt; student-management-website-2025 \u0026gt; Properties \u0026gt; Server access logging, select Enable, and specify a log bucket (e.g., student-web-logs-20250706). Use AWS CLI: aws s3api put-bucket-policy \u0026ndash;bucket student-management-website-2025 \u0026ndash;policy file://policy.json System Integration Integrate with CloudFront (section 7): - Use the Bucket website endpoint as the Origin. - Set Default root object: index.html. - Configure Viewer protocol policy: Redirect HTTP to HTTPS. Update CORS in API Gateway (section 4.7) with Access-Control-Allow-Origin: https://d12345678.cloudfront.net. Integration Testing Access the Bucket website endpoint to test the interface. After configuring CloudFront, access the CloudFront URL (https://d12345678.cloudfront.net) and check: - POST /students: Save records to DynamoDB studentData, send email via SES. - GET /students: Display table. - POST /backup: Create file in student-backup-20250706, send email. Use Developer Tools \u0026gt; Network to check API requests. Error Handling 403 Forbidden: Check Bucket Policy ARN, Block all public access (section 6.1), and public-read permission for files (section 6.2). 404 Not Found: Verify index.html is in the root folder, Static Website Hosting is enabled with index.html as the Index document (section 6.3). Incorrect Interface: Check Developer Tools \u0026gt; Console, paths in index.html. CORS: Check Access-Control-Allow-Origin header in Lambda (sections 3.1, 3.2, 3.3) and API Gateway (section 4.7). 429: Check rate/burst/quota limits in StudentUsagePlan (section 4.3). Best Practice Tip: Test the Bucket website endpoint immediately after saving the Bucket Policy. Use AWS CLI to automate if applying policies to multiple buckets. Prepare for section 7 (CloudFront configuration) to improve security and support HTTPS.\nConclusion The Bucket Policy has been configured for the student-management-website-2025 bucket, allowing public access (s3:GetObject) to serve the web interface. The bucket is now ready to integrate with CloudFront (section 7) for HTTPS and high performance.\nNext step: Proceed to Configure CloudFront for Content Distribution to continue configuring!\n"
},
{
	"uri": "/4-creating-a-restful-api/",
	"title": "Configuring RESTful API with API Key Security",
	"tags": [],
	"description": "",
	"content": " Objective: Create a RESTful API using AWS API Gateway to integrate with Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), allowing the web interface (running on CloudFront) to access, store, and back up student data. The API will be secured with an API Key, use a Usage Plan to limit access, and enable CORS to support communication with the web interface. The API will be deployed on a specific stage (e.g., prod) and linked with the API Key to ensure that only valid requests are processed.\nPrerequisites You need to complete the steps in section 3 (create Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, DynamoDB table studentData, S3 bucket student-backup-20250706, SES email verification). Ensure your AWS account is set up, and the AWS region is us-east-1.\nConfiguration Steps Below are the specific steps to configure the RESTful API:\nStep Content Description 4.1 Create a new REST API on API Gateway Create a new REST API in AWS API Gateway to integrate with Lambda functions. 4.2 Create API Key to secure access Create an API Key to secure API requests from the web interface. 4.3 Set up Usage Plan Set up a Usage Plan to limit the number of API requests and manage access. 4.4 Create GET method to fetch data Create a GET method for the /students endpoint to call the getStudentData function and retrieve student data. 4.5 Create POST method to store data Create a POST method for the /students endpoint to call the insertStudentData function and store student information. 4.6 Create Resource \u0026amp; Method for data backup Create a resource and POST method for the /backup endpoint to call the BackupDynamoDBAndSendEmail function. 4.7 Enable CORS to support frontend access Enable CORS to support cross-origin requests from the web interface on CloudFront. 4.8 Deploy the API to a specific stage Deploy the API to a stage (e.g., prod) for use in the production environment. 4.9 Link API Key to Usage Plan \u0026amp; link with REST API and Stage Link the API Key to the Usage Plan and stage to ensure only valid requests are processed. Note: Follow the steps in order to ensure the API is configured correctly. Each step will be detailed in the corresponding documentation.\nConclusion By completing these configuration steps, you will have:\nA RESTful API integrated with Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail). The API secured with an API Key and Usage Plan. CORS support for the web interface on CloudFront. Ready to proceed?\nGo to Create a new REST API on API Gateway to start configuring the first API!\n"
},
{
	"uri": "/4-creating-a-restful-api/4.4-creating-a-get-method/",
	"title": "Create GET Method to Retrieve Data",
	"tags": [],
	"description": "",
	"content": " Objective: Create a GET method on the /students resource in the student API (created in section 4.1) to integrate with the getStudentData Lambda function (created in section 3.1), allowing the retrieval of the student list from the studentData DynamoDB table. The method will require an API Key (StudentApiKey, created in section 4.2) in the x-api-key header for security, and prepare for enabling CORS (section 4.7) so the web interface (running on CloudFront) can make requests.\nOverview of the GET Method The GET /students method will call the getStudentData Lambda function to fetch all records from the studentData DynamoDB table (fields: studentid, name, class, birthdate, email). The getStudentData function will return a JSON response with the header Access-Control-Allow-Origin: '*' to support CORS, suitable for the web interface. API Key Required ensures that only requests with a valid StudentApiKey will be processed. After creation, the API needs to be deployed (section 4.8) for the GET method to take effect. Prerequisites You need to complete section 4.1 (create the student API), section 4.2 (create the StudentApiKey API Key), section 4.3 (create the StudentUsagePlan Usage Plan), and section 3 (create the Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, the studentData DynamoDB table, the student-backup-20250706 S3 bucket, SES email verification). Ensure your AWS account is set up and the AWS region is us-east-1.\nDetailed Steps Access AWS Management Console\nOpen your browser and log in to AWS Management Console with your AWS account.\nIn the search bar at the top, type API Gateway and select the Amazon API Gateway service to access the management interface.\nCheck the AWS region: Ensure you\u0026rsquo;re working in the primary AWS region (assumed to be us-east-1 for synchronization with previous sections), and check the region at the top right corner of the AWS Console. This region must match the student API, the getStudentData Lambda function, the studentData DynamoDB table, the student-backup-20250706 S3 bucket, and SES.\nFigure 1: AWS Console Interface with API Gateway Search Bar.\nNavigate to the APIs Section\nIn the main Amazon API Gateway interface, look at the left navigation menu.\nSelect APIs to view the list of existing APIs.\nThe list will show the student API (created in section 4.1). If not visible, check the AWS region again or refresh the page.\nFigure 2: Navigation Menu with APIs Option.\nSelect the student API\nIn the APIs list, find and select the student API.\nYou\u0026rsquo;ll be taken to the student API management page, displaying options like Resources, Stages, API Keys, etc.\nSelect Resources from the left menu to start configuring the resource and method.\nFigure 3: API Management Page for student with Resources Option.\nCreate the /students Resource\nIn the Resources interface, you\u0026rsquo;ll see the root /.\nClick Actions \u0026gt; Create Resource to create a new resource.\nConfigure the resource:\nResource Name: Enter students. Resource Path: Enter /students (or leave it as the default, which will automatically be /students). Enable API Gateway CORS: Select to prepare for enabling CORS (section 4.7). Click Create Resource to create the resource.\nCheck: The /students resource will appear under the root / in the resource tree.\nFigure 4: Create /students Resource Interface.\nCreate the GET Method\nIn the resource tree, select the /students resource.\nClick Actions \u0026gt; Create Method.\nFrom the dropdown under /students, select GET and click the checkmark (✔) to confirm.\nNote: If the dropdown doesn\u0026rsquo;t show GET, ensure you\u0026rsquo;ve selected the correct /students resource.\nIntegration Type: Select Lambda Function to integrate with the Lambda function.\nFigure 5: Create GET Method Interface.\nConfigure Lambda Integration\nIn the GET method configuration interface:\nUse Lambda Proxy integration: Select (to send the entire HTTP request to the Lambda function and receive a JSON response with headers). Lambda Region: Select us-east-1 (or your AWS region, which must match the region of the getStudentData function). Lambda Function: Enter getStudentData. Note: If the getStudentData function doesn\u0026rsquo;t appear in the suggestion list, enter it manually and ensure the function exists in Lambda (section 3.1). Click Save to save the configuration. If AWS prompts for permissions, click OK to allow API Gateway to invoke the getStudentData Lambda function. AWS will automatically add the IAM policy to the Lambda function\u0026rsquo;s role (usually LambdaGetStudentRole from section 3.1) with the lambda:InvokeFunction permission.\nFigure 6: Lambda Integration Configuration Interface.\nEnable API Key Requirement\nIn the Method Request interface for GET /students:\nClick Edit next to Authorization. Select NONE (API Key will handle authentication, no need for Cognito or IAM Authorizer). In API Key Required, select true to require the API Key in the x-api-key header. Explanation: This ensures that any requests sent to GET /students must include the StudentApiKey (created in section 4.2) in the x-api-key header. Click Save or the checkmark (✔) to save the configuration. Figure 7: Enable API Key Required Interface.\nCheck the Status of Method Creation\nAfter configuring and clicking Save, you\u0026rsquo;ll see the message: \u0026ldquo;Successfully created method ‘GET’. Redeploy your API for the update to take effect.\u0026rdquo;\nImportant Note: The GET method will not work until you deploy the API to a stage (section 4.8).\nTo check the configuration:\nIn Resources, select GET under /students. Verify: Integration Request: Displays Lambda Function: getStudentData. Method Request: API Key Required: true. If errors occur: \u0026ldquo;Lambda function not found\u0026rdquo;: Check that the getStudentData function exists in Lambda \u0026gt; Functions. \u0026ldquo;AccessDenied\u0026rdquo;: Check if your AWS IAM role has the apigateway:PUT permission to create methods. \u0026ldquo;Permission denied\u0026rdquo;: Ensure API Gateway has permission to invoke getStudentData (AWS automatically adds permission when you click OK). Figure 8: Success Message After Creating GET Method.\nImportant Notes Element Details Lambda Proxy Integration Lambda Proxy integration allows sending the entire HTTP request (headers, query parameters, body) to the getStudentData function and receiving a JSON response with headers (like Access-Control-Allow-Origin: '*'). Ensure the getStudentData function (section 3.1) returns the response in the correct format. API Key Security With API Key Required: true, requests to GET /students must include the header x-api-key: \u0026lt;StudentApiKey\u0026gt;. For enhanced security, store the API Key in AWS Secrets Manager (see section 4.2). CORS The GET method must support CORS for the web interface to make cross-origin requests. This will be configured in detail in section 4.7 (enabling CORS with the OPTIONS method). Ensure the getStudentData function returns the Access-Control-Allow-Origin: '*' header (or a specific CloudFront domain, e.g., https://d12345678.cloudfront.net). AWS Region Ensure the us-east-1 region matches the region of the getStudentData function, the studentData table, and the student API. If using a different region (e.g., us-west-2), select the correct region in the Lambda Region. Error Handling - If you encounter the error \u0026ldquo;Lambda function not found\u0026rdquo;: - Check that the getStudentData function exists in Lambda \u0026gt; Functions. - Ensure the AWS region matches (us-east-1). - If you encounter a 403 \u0026quot;Forbidden\u0026quot; error when calling the API (after deployment): - Check API Key Required: true and ensure the StudentApiKey is valid. - Ensure the API Key is linked to the Usage Plan (sections 4.3, 4.9). - If you receive a 500 error from Lambda, check the logs in CloudWatch (log group /aws/lambda/getStudentData) for debugging. Optimization - Add the Access-Control-Allow-Origin header in the Method Response to ensure CORS works correctly: - In Method Response for GET /students, add Status Code 200 with the header Access-Control-Allow-Origin: '*'. - In Integration Response, map the response from Lambda to return a properly formatted JSON response. - Consider using AWS WAF with API Gateway to protect against DDoS attacks or API Key abuse. - If the studentData table is large, ensure the getStudentData function handles pagination (as in the improved code from section 3.1) to avoid exceeding the Scan limit. Early Testing - After creating the GET method, verify the configuration in Resources \u0026gt; GET /students (Integration Request, Method Request). - After deploying the API (section 4.8), test the GET method using Postman or curl. - If you receive a 403 \u0026quot;Forbidden\u0026quot; error, check the API Key or API Key Required configuration. - If you receive a 500 error, check the CloudWatch logs for the getStudentData function. Web Interface Integration Testing After deploying the API (section 4.8) and linking the Usage Plan (section 4.9), use the API Key in the web interface (using Tailwind CSS, running on CloudFront) to call the GET /students endpoint. Practical Tip: Verify the Integration Request and API Key Required configurations before deploying the API. Test the JSON response from the getStudentData function using Postman to ensure the student data is returned in the correct format.\nConclusion The GET /students method has been successfully created in the student API, integrated with the getStudentData Lambda function and requiring the StudentApiKey API Key, ready for deployment and use in the web interface.\nNext step: Go to Create POST Method to Store Data to continue!\n"
},
{
	"uri": "/2-preparation-steps/2.4-createtable-in-dynamodb/",
	"title": "Create Table in DynamoDB",
	"tags": [],
	"description": "",
	"content": " Objective: Set up the studentData table in DynamoDB to store student information, including Student ID (studentid), Full Name, Class, Date of Birth, and Email, using studentid (String type) as the primary key to ensure fast and efficient queries in a serverless architecture.\nDynamoDB, AWS\u0026rsquo; NoSQL database, provides automatic scaling and low latency, ideal for student information management applications. The studentData table will serve as the foundation for integrating with AWS services such as Lambda, API Gateway, and SES.\nDetailed Steps Below are the detailed steps to create and configure the studentData table:\n1. Access the AWS Management Console Open your browser and log in to the AWS Management Console.\nIn the search bar, type DynamoDB and select DynamoDB to enter the management interface.\nFigure 1: AWS Console interface with the DynamoDB search bar.\n2. Navigate to the Tables Section In the DynamoDB interface, find the left-hand navigation menu.\nSelect Tables to view the list of existing tables. If no tables exist, the list will be empty.\nFigure 2: Navigation menu with the Tables option.\n3. Start the Table Creation Process In the Tables interface, click the Create Table button in the top-right corner.\nFigure 3: Create Table button in the Tables interface.\n4. Configure the Table Details In the Table Details section:\nTable Name: Enter studentData. Note: The table name must match exactly with the name used in the Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail).\nPartition Key: Enter studentid, select String as the type. Primary Key: Ensure each student has a unique identifier (e.g., SV001, SV002).\nSort Key: Leave blank (not needed, as queries will be based on studentid). Settings: Use default options:\nChoose On-Demand for Capacity mode to automatically adjust resources, saving costs and simplifying management. No need to add Secondary Indexes or custom Encryption (default is sufficient for this application). Verify the information:\nTable Name: studentData Partition Key: studentid (String) Figure 4: Table configuration interface with Table Name and Partition Key.\n5. Create the Table Click Create Table at the bottom of the page.\nFigure 5: Create Table button to confirm.\nDynamoDB will create the table in about 20-30 seconds, depending on the AWS region (e.g., us-east-1).\nFigure 6: Interface showing table creation status.\n6. Check the Table Status After clicking Create Table, you will return to the Tables list.\nFind the studentData table. The initial status will be Creating.\nWait for about 30 seconds, then refresh the page (click Refresh or press F5).\nOnce the status changes to Active, the table has been created successfully.\nNotification: The interface will show \u0026ldquo;The studentData table was created successfully\u0026rdquo;.\nFigure 7: The studentData table with Active status.\n7. Verify the Table Configuration Click on the studentData table to view details. Check: Table ARN: For example, arn:aws:dynamodb:us-east-1:your-account-id:table/studentData. Partition Key: studentid (String). Capacity Mode: On-Demand. Sort Key: None. Other attributes (Full Name, Class, Date of Birth, Email) are dynamic attributes, no need for pre-declaration. Important Notes Factor Details Table Name Must be studentData (case-sensitive) to match the Lambda code. Incorrect names will cause query errors. AWS Region Create the table in the same AWS region as other services (e.g., us-east-1). Check the region in the top-right corner of the AWS Console. Creation Time If the Creating status lasts longer than 30 seconds, check your network connection or refresh the page. If an error occurs, delete the table and try again. Optimization For large data (\u0026gt;500 MB), consider enabling Point-in-time Recovery (PITR) in the Backups tab for recovery support. Backup via Lambda and S3 is sufficient for this application. Check Early Once the table is in Active status, go to the Items tab and select Create Item to enter a sample record: - studentid: SV001 - name: Nguyễn Văn A - class: CNTT1 - birthdate: 2000-01-01 - email: example@gmail.com Verify the data displays correctly. Practical Tip: Check the table configuration immediately after creation to ensure accuracy before integrating with Lambda.\nConclusion The studentData table is the foundation for storing and managing student information in the serverless application. With the primary key studentid and On-Demand capacity mode, the table ensures high performance, flexible scaling, and low latency. The table is now ready to integrate with Lambda, API Gateway, and SES.\nNext Step: Proceed to Configure SES to set up the email service!\n"
},
{
	"uri": "/2-preparation-steps/2.5-configureses/",
	"title": "Configure Amazon SES",
	"tags": [],
	"description": "",
	"content": " Objective: Configure Amazon SES to send confirmation emails for the Lambda function insertStudentData (confirmation when saving student data) and BackupDynamoDBAndSendEmail (notification with a backup file download link). Verify the email address (e.g., nguyentribaothang@gmail.com) and exit sandbox mode to send emails to unverified addresses.\nAmazon SES is AWS\u0026rsquo;s email service with high reliability and low cost, used for:\nSending confirmation emails when adding students to the DynamoDB studentData table. Sending notification emails containing the pre-signed URL of the backup file from S3. Note: The default SES account is in sandbox mode, which only allows sending emails to verified addresses. Exiting sandbox mode is necessary to send emails to unverified student addresses.\nDetailed Steps Below are the detailed steps to configure SES:\n1. Access the AWS Management Console Open your browser and log in to the AWS Management Console.\nIn the search bar, type SES and select Amazon Simple Email Service (SES).\nEnsure you are in an AWS region that supports SES (e.g., us-east-1), check in the top right corner.\nFigure 1: AWS Console interface with the SES search bar.\n2. Navigate to Verified Identities In the SES interface, find the left-hand navigation menu.\nSelect Verified identities to view the list of verified email addresses or domains. If none exist, the list will be empty.\nFigure 2: Navigation menu with the Verified identities option.\n3. Start the Identity Creation Process In the Verified identities interface, click Create identity in the top-right corner.\nFigure 3: Create Identity button in the Verified identities interface.\n4. Configure the Email Address In the Identity type section, select Email address.\nIn the Email address field, enter the source email address (e.g., nguyentribaothang@gmail.com).\nNote: Use an email you have access to for verification. Avoid using sample emails like example@gmail.com.\nLeave the default settings (no need for Feedback notifications or DKIM settings).\nClick Create identity to send the verification request.\nFigure 4: Email configuration interface.\n5. Check and Verify the Email AWS SES will send a verification email to the entered address (e.g., nguyentribaothang@gmail.com).\nLog in to your email account, check your Inbox or Spam/Junk folder for an email from AWS (subject may be \u0026ldquo;Amazon Web Services - Email Address Verification Request\u0026rdquo;).\nClick the verification link in the email to complete the process.\nReturn to SES and refresh the Verified identities page. Confirm the status is Verified.\nFigure 5: Checking the Verified status of the email.\n6. Check Sandbox Mode and Request Exit from Sandbox Check sandbox: In SES, go to Account dashboard or Sending statistics. Check the Account status. If it shows \u0026ldquo;Your account is in the sandbox\u0026rdquo;, the account is limited to sending emails to verified addresses only. Request to exit sandbox: In the Account dashboard, click Edit your account details or Request production access. Fill out the form: Use case description: \u0026ldquo;Send confirmation emails when saving student information and backup notifications from DynamoDB.\u0026rdquo; Mail type: Choose Transactional. Website URL: Enter the application URL (if available) or write \u0026ldquo;Website under development.\u0026rdquo; Sender email address: Enter the verified email (e.g., nguyentribaothang@gmail.com). Additional information: \u0026ldquo;Need to send emails to unverified student addresses for the student information management system.\u0026rdquo; Submit the request. AWS will approve it within 24-48 hours, notifying via email. Temporary workaround: In sandbox mode, verify additional receiving emails (follow steps 4–5) or modify the Lambda code to only send emails to verified addresses. 7. Verify and Test SES Go back to Verified identities, check the email status (e.g., nguyentribaothang@gmail.com) is Verified.\nIn SES, select Send a test email (if available), send a test email to the verified email to test functionality.\nIf the status is still Pending, check your email (Inbox/Spam) or recreate the identity.\nFigure 6: Confirming Verified status and testing email sending.\nImportant Notes Factor Details Valid Email Use an email you have access to (e.g., nguyentribaothang@gmail.com). If you don’t receive the verification email within 5-10 minutes, check Spam/Junk or contact AWS Support. Sandbox Mode In sandbox mode, only send emails to verified addresses. Exit sandbox mode to send emails to student addresses (unverified), or the insertStudentData function will report an AccessDenied error. AWS Region Configure SES in a region that supports it (e.g., us-east-1), matching with Lambda. Check the list of supported SES regions in AWS SES Documentation. Error Handling If you don’t receive the verification email, check DNS settings or contact your email provider. If Lambda reports \u0026ldquo;Email address is not verified\u0026rdquo;, check the verification status in SES or CloudWatch logs. Optimization Consider verifying the domain or setting up DKIM for security. See AWS SES Documentation - DKIM. Test Early Test sending an email from SES before integrating with Lambda to ensure proper functionality. Practical Tip: After verifying the email, send a test email from SES to check before running the Lambda functions.\nConclusion Configuring SES with a verified email (e.g., nguyentribaothang@gmail.com) and exiting sandbox mode (if necessary) ensures that the Lambda functions insertStudentData and BackupDynamoDBAndSendEmail can send confirmation emails and notifications successfully. SES is now ready for integration into the serverless application.\nNext Step: Proceed to Configure Lambda Functions to set up the Lambda functions!\n"
},
{
	"uri": "/4-creating-a-restful-api/4.5-creating-a-post-method/",
	"title": "Create POST Method to Store Data",
	"tags": [],
	"description": "",
	"content": " Objective: Create a POST method on the /students resource in the student API (created in section 4.1) to integrate with the insertStudentData Lambda function (created in section 3.2), allowing student information to be stored in the studentData DynamoDB table and a confirmation email to be sent via SES. The method will require an API Key (StudentApiKey, created in section 4.2) in the x-api-key header for security and prepare for enabling CORS (section 4.7) so the web interface (running on CloudFront) can make requests.\nOverview of the POST Method The POST /students method will call the insertStudentData Lambda function to store a student record (fields: studentid, name, class, birthdate, email) into the studentData DynamoDB table and send a confirmation email via SES. The insertStudentData function will return a JSON response with the header Access-Control-Allow-Origin: '*' to support CORS, suitable for the web interface. API Key Required ensures that only requests with a valid StudentApiKey will be processed. After creation, the API needs to be deployed (section 4.8) for the POST method to take effect. Prerequisites You need to complete section 4.1 (create the student API), section 4.2 (create the StudentApiKey API Key), section 4.3 (create the StudentUsagePlan Usage Plan), section 4.4 (create the GET /students method), and section 3 (create the Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, the studentData DynamoDB table, the student-backup-20250706 S3 bucket, SES email verification). Ensure your AWS account is set up and the AWS region is us-east-1.\nDetailed Steps Access AWS Management Console\nOpen your browser and log in to AWS Management Console with your AWS account.\nIn the search bar at the top, type API Gateway and select the Amazon API Gateway service to access the management interface.\nCheck the AWS region: Ensure you\u0026rsquo;re working in the primary AWS region (assumed to be us-east-1 for synchronization with previous sections), and check the region at the top right corner of the AWS Console. This region must match the student API, the insertStudentData Lambda function, the studentData DynamoDB table, the student-backup-20250706 S3 bucket, and SES.\nFigure 1: AWS Console Interface with API Gateway Search Bar.\nNavigate to the APIs Section\nIn the main Amazon API Gateway interface, look at the left navigation menu.\nSelect APIs to view the list of existing APIs.\nThe list will show the student API (created in section 4.1). If not visible, check the AWS region again or refresh the page.\nFigure 2: Navigation Menu with APIs Option.\nSelect the student API\nIn the APIs list, find and select the student API.\nYou\u0026rsquo;ll be taken to the student API management page, displaying options like Resources, Stages, API Keys, etc.\nSelect Resources from the left menu to continue configuring the resource and method.\nFigure 3: API Management Page for student with Resources Option.\nUse the /students Resource\nIn the Resources interface, you will see the root / and the /students resource (created in section 4.4 for the GET method).\nIf the /students resource doesn\u0026rsquo;t exist:\nClick Actions \u0026gt; Create Resource. Configure the resource: Resource Name: Enter students. Resource Path: Enter /students (or leave the default, which will automatically be /students). Enable API Gateway CORS: Select to prepare for enabling CORS (section 4.7). Click Create Resource to create it. Select the /students resource in the resource tree to create the POST method.\nFigure 4: Use /students Resource Interface.\nCreate the POST Method\nIn the resource tree, select the /students resource.\nClick Actions \u0026gt; Create Method.\nFrom the dropdown under /students, select POST and click the checkmark (✔) to confirm.\nNote: If the dropdown doesn\u0026rsquo;t show POST, ensure you\u0026rsquo;ve selected the correct /students resource.\nIn the POST method configuration interface:\nIntegration Type: Select Lambda Function to integrate with the Lambda function. Use Lambda Proxy integration: Select (to send the entire HTTP request, including headers and body, to the Lambda function and receive a JSON response with headers). Lambda Region: Select us-east-1 (or your AWS region, which must match the region of the insertStudentData function). Lambda Function: Enter insertStudentData. Note: If the insertStudentData function doesn\u0026rsquo;t appear in the suggestion list, enter it manually and ensure the function exists in Lambda (section 3.2). Click Save to save the configuration. If AWS prompts for permissions, click OK to allow API Gateway to invoke the insertStudentData Lambda function. AWS will automatically add the IAM policy to the Lambda function\u0026rsquo;s role (usually LambdaInsertStudentRole from section 3.2) with the lambda:InvokeFunction permission.\nFigure 5: Create POST Method Interface.\nEnable API Key Required\nIn the Method Request interface for POST /students:\nClick Edit next to Authorization. Select NONE (API Key will handle authentication, no need for Cognito or IAM Authorizer). In API Key Required, select true to require the API Key in the x-api-key header. Explanation: This ensures that any request sent to POST /students must include the StudentApiKey (created in section 4.2) in the x-api-key header. Click Save or the checkmark (✔) to save the configuration. Figure 6: Enable API Key Required Interface.\nCheck the Status of Method Creation\nAfter configuring and clicking Save, you\u0026rsquo;ll see the message: \u0026ldquo;Successfully created method ‘POST’. Redeploy your API for the update to take effect.\u0026rdquo;\nImportant Note: The POST method will not work until you deploy the API to a stage (section 4.8).\nTo check the configuration:\nIn Resources, select POST under /students. Verify: Integration Request: Displays Lambda Function: insertStudentData. Method Request: API Key Required: true. If errors occur: \u0026ldquo;Lambda function not found\u0026rdquo;: Check that the insertStudentData function exists in Lambda \u0026gt; Functions and the AWS region matches (us-east-1). \u0026ldquo;AccessDenied\u0026rdquo;: Check if your AWS IAM role has the apigateway:PUT permission to create methods. \u0026ldquo;Permission denied\u0026rdquo;: Ensure API Gateway has permission to invoke insertStudentData (AWS automatically adds permission when you click OK). Figure 7: Success Message After Creating POST Method. Important Notes Element Details Lambda Proxy Integration Lambda Proxy integration allows sending the entire HTTP request (headers, body) to the insertStudentData function and receiving a JSON response with headers (like Access-Control-Allow-Origin: '*'). Ensure the insertStudentData function (section 3.2) correctly handles the input JSON format and returns a valid response. API Key Security With API Key Required: true, requests to POST /students must include the header x-api-key: \u0026lt;StudentApiKey\u0026gt;. For enhanced security, store the API Key in AWS Secrets Manager (see section 4.2). CORS The POST method must support CORS for the web interface to make cross-origin requests. This will be configured in detail in section 4.7 (enabling CORS with the OPTIONS method). Ensure the insertStudentData function returns the Access-Control-Allow-Origin: '*' header (or a specific CloudFront domain, e.g., https://d12345678.cloudfront.net). AWS Region Ensure the us-east-1 region matches the insertStudentData function, the studentData table, SES, and the student API. If using a different region (e.g., us-west-2), select the correct region in the Lambda Region. Error Handling - If you encounter the error \u0026ldquo;Lambda function not found\u0026rdquo;: - Check that the insertStudentData function exists in Lambda \u0026gt; Functions. - Ensure the AWS region matches (us-east-1). - If you encounter a 403 \u0026quot;Forbidden\u0026quot; error when calling the API (after deployment): - Check API Key Required: true and ensure the StudentApiKey is valid. - Ensure the API Key is linked to the Usage Plan (sections 4.3, 4.9). - If you encounter 400, 409, or 500 errors from Lambda, check the logs in CloudWatch (log group /aws/lambda/insertStudentData) for debugging: - 400: Invalid JSON body (missing studentid, name, etc.). - 409: studentid already exists (due to ConditionExpression). - 500: DynamoDB or SES error (e.g., email not verified in SES). Optimization - Add the Access-Control-Allow-Origin header in Method Response to ensure CORS works correctly: - In Method Response for POST /students, add Status Code 200, 400, 409, 500 with the header Access-Control-Allow-Origin: '*'. - In Integration Response, map the response from Lambda to handle status codes. - Consider using AWS WAF with API Gateway to protect against DDoS attacks or API Key abuse. - If input validation is needed, add a Request Validator in Method Request to check the JSON body for required fields (studentid, name, class, birthdate, email). Early Testing - After creating the POST method, verify the configuration in Resources \u0026gt; POST /students (Integration Request, Method Request). - After deploying the API (section 4.8), test the POST method using Postman or curl. - Check the studentData DynamoDB table (go to DynamoDB \u0026gt; Tables \u0026gt; studentData \u0026gt; Explore items) to verify the new record. - Check the recipient\u0026rsquo;s mailbox (including Spam/Junk) for the confirmation email from SES (e.g., student4@example.com). - If you encounter a 403 \u0026quot;Forbidden\u0026quot; error, check the API Key and API Key Required configuration. - If you encounter 400, 409, or 500 errors, check the CloudWatch logs for the insertStudentData function. Web Interface Integration Testing After deploying the API (section 4.8) and linking the Usage Plan (section 4.9), use the API Key in the web interface (using Tailwind CSS, running on CloudFront) to call the POST /students endpoint. Practical Tip: Verify the Integration Request and API Key Required configurations before deploying the API. Test the data in the studentData table and the confirmation email from SES using Postman to ensure the insertStudentData function works correctly.\nConclusion The POST /students method has been successfully created in the student API, integrated with the insertStudentData Lambda function and requiring the StudentApiKey API Key, ready for deployment and use in the web interface.\nNext step: Go to Create Resource \u0026amp; Method for Backup Feature to continue!\n"
},
{
	"uri": "/6-configuring-s3-buckets/6.5-updating-bucket-policy-to-support-backup/",
	"title": "Website Serverless",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "/5-designing-the-website-interface/",
	"title": "Write the Website Interface",
	"tags": [],
	"description": "",
	"content": " Objective: Build the web interface for the Student Data Management application using HTML, Tailwind CSS, and JavaScript (with jQuery) to:\nAllow users to input and save student information (student ID, full name, class, birthdate, email) via the POST /students endpoint. Display the list of students from the GET /students endpoint. Trigger data backup via the POST /backup endpoint.\nThe interface will be deployed on Amazon S3 (static bucket, section 2.4) and distributed through CloudFront (section 6), integrated with the student API (stage prod, section 4.8) using the Invoke URL and StudentApiKey (section 4.2) with CORS security (section 4.7). Overview of the Web Interface index.html: Provides the interface structure with an input form, function buttons (Save Student Data, View All Students, Backup Data), and a table displaying the list of students. styles.css: Uses Tailwind CSS and customizes with the Poppins font, gradient colors, animations, and responsive design. scripts.js: Handles the logic for calling the API (GET /students, POST /students, POST /backup) with jQuery, including input validation, HTML encoding to prevent XSS, and handling API responses/errors. AWS Integration: Replace API_ENDPOINT with the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) from section 4.8. Replace API_KEY with the value of StudentApiKey from section 4.2, securely stored in AWS Secrets Manager or as an environment variable. Improvements: Enhance security by storing the API_KEY in AWS Secrets Manager. Improve user experience with interface notifications (instead of alerts). Add stricter input validation. Optimize responsiveness and animations. Prerequisites You need to complete the steps in section 2.4 (create the static S3 bucket), section 4.1 (create the student API), section 4.2 (create the StudentApiKey API Key), section 4.3 (create the StudentUsagePlan Usage Plan), section 4.4 (create the GET /students method), section 4.5 (create the POST /students method), section 4.6 (create the /backup resource and POST /backup method), section 4.7 (enable CORS), section 4.8 (deploy the API to the prod stage), section 4.9 (link StudentApiKey to StudentUsagePlan and associate with the student API on stage prod), and section 3 (create the Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, studentData DynamoDB table, student-backup-20250706 S3 bucket, SES email verification). Ensure your AWS account is ready and the AWS region is us-east-1. You also need access to S3, CloudFront, and API Gateway.\nDetailed Actions Configure the index.html File The index.html file defines the interface with an input form, function buttons, and a table displaying students. \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Student Data Management\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.tailwindcss.com\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;min-h-screen flex items-center justify-center p-6\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-container card\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;text-4xl font-bold text-center mb-8\u0026#34;\u0026gt;Student Management\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;space-y-6\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid grid-cols-1 md:grid-cols-2 gap-6\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;studentid\u0026#34; class=\u0026#34;block text-sm mb-1\u0026#34;\u0026gt;Student ID\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;studentid\u0026#34; id=\u0026#34;studentid\u0026#34; class=\u0026#34;w-full\u0026#34; placeholder=\u0026#34;Enter student ID\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34; class=\u0026#34;block text-sm mb-1\u0026#34;\u0026gt;Full Name\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; class=\u0026#34;w-full\u0026#34; placeholder=\u0026#34;Enter full name\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;class\u0026#34; class=\u0026#34;block text-sm mb-1\u0026#34;\u0026gt;Class\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;class\u0026#34; id=\u0026#34;class\u0026#34; class=\u0026#34;w-full\u0026#34; placeholder=\u0026#34;Enter class\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;birthdate\u0026#34; class=\u0026#34;block text-sm mb-1\u0026#34;\u0026gt;Birthdate\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;date\u0026#34; name=\u0026#34;birthdate\u0026#34; id=\u0026#34;birthdate\u0026#34; class=\u0026#34;w-full\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;md:col-span-2\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;email\u0026#34; class=\u0026#34;block text-sm mb-1\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; class=\u0026#34;w-full\u0026#34; placeholder=\u0026#34;Enter email\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button id=\u0026#34;savestudent\u0026#34; class=\u0026#34;btn-primary w-full\u0026#34;\u0026gt;Save Student Data\u0026lt;/button\u0026gt; \u0026lt;p id=\u0026#34;studentSaved\u0026#34; class=\u0026#34;text-center text-green-600 font-medium text-lg\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;button id=\u0026#34;getstudents\u0026#34; class=\u0026#34;btn-primary btn-secondary w-full\u0026#34;\u0026gt;View All Students\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;backupstudents\u0026#34; class=\u0026#34;btn-primary w-full bg-green-600 text-white p-3 rounded-xl font-semibold hover:bg-green-700\u0026#34;\u0026gt;Backup Data\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;showStudents\u0026#34; class=\u0026#34;mt-8 overflow-x-auto\u0026#34;\u0026gt; \u0026lt;table id=\u0026#34;studentTable\u0026#34; class=\u0026#34;w-full\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th class=\u0026#34;text-sm font-semibold\u0026#34;\u0026gt;Student ID\u0026lt;/th\u0026gt; \u0026lt;th class=\u0026#34;text-sm font-semibold\u0026#34;\u0026gt;Full Name\u0026lt;/th\u0026gt; \u0026lt;th class=\u0026#34;text-sm font-semibold\u0026#34;\u0026gt;Class\u0026lt;/th\u0026gt; \u0026lt;th class=\u0026#34;text-sm font-semibold\u0026#34;\u0026gt;Birthdate\u0026lt;/th\u0026gt; \u0026lt;th class=\u0026#34;text-sm font-semibold\u0026#34;\u0026gt;Email\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt;\u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://ajax.googleapis.com/ajax/libs/jquery/1.6.0/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;scripts.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Note: Ensure the file is uploaded to the static S3 bucket (section 2.4) and distributed through CloudFront (section 6). Configure the styles.css File The styles.css file customizes the interface with Tailwind CSS, the Poppins font, and animations. @import url(\u0026#39;https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700\u0026amp;display=swap\u0026#39;); body { background: linear-gradient(135deg, #4c1d95 0%, #ec4899 100%); font-family: \u0026#39;Poppins\u0026#39;, sans-serif; color: #1f2937; } .form-container { background: rgba(255, 255, 255, 0.97); backdrop-filter: blur(12px); border-radius: 2rem; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2); padding: 2.5rem; max-width: 48rem; margin: 2rem auto; } h1 { background: linear-gradient(to right, #7c3aed, #db2777); -webkit-background-clip: text; -webkit-text-fill-color: transparent; font-weight: 700; letter-spacing: -0.025em; } input { background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 0.75rem; padding: 0.75rem 1rem; transition: all 0.3s ease; } input:focus { outline: none; border-color: #7c3aed; box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.2); } .btn-primary { background: linear-gradient(90deg, #7c3aed, #db2777); border-radius: 0.75rem; padding: 0.75rem; font-weight: 600; color: white; transition: all 0.3s ease; } .btn-primary:hover { transform: translateY(-2px); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); background: linear-gradient(90deg, #6d28d9, #be185d); } .btn-secondary { background: linear-gradient(90deg, #6b7280, #4b5563); } .btn-secondary:hover { background: linear-gradient(90deg, #4b5563, #374151); } table { border-radius: 1rem; overflow: hidden; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); } thead { background: linear-gradient(to right, #ede9fe, #fce7f3); } th, td { padding: 1rem; text-align: left; border-bottom: 1px solid #e5e7eb; } tbody tr { transition: background-color 0.3s ease; } tbody tr:hover { background-color: #f5f3ff; } .card { animation: slideUp 0.5s ease-out; } @keyframes slideUp { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } } label { font-weight: 500; color: #374151; } Note: Ensure the file is uploaded to the static S3 bucket (section 2.4) and distributed through CloudFront (section 6). Configure the scripts.js File The scripts.js file handles the logic for making API calls with jQuery, including data validation, HTML escaping, and handling responses/errors. var API_ENDPOINT = \u0026#34;https://710o05k9b6.execute-api.us-east-1.amazonaws.com/prod\u0026#34;; var API_KEY = \u0026#34;hWKpVcoY6246mLB7DdrYb3nWRsYqnLBp35zIxZcd\u0026#34;; // Function to escape HTML to prevent XSS function escapeHTML(str) { return String(str) .replace(/\u0026amp;/g, \u0026#39;\u0026amp;amp;\u0026#39;) .replace(/\u0026lt;/g, \u0026#39;\u0026amp;lt;\u0026#39;) .replace(/\u0026gt;/g, \u0026#39;\u0026amp;gt;\u0026#39;) .replace(/\u0026#34;/g, \u0026#39;\u0026amp;quot;\u0026#39;) .replace(/\u0026#39;/g, \u0026#39;\u0026amp;apos;\u0026#39;); } // Handle saving student data (POST) document.getElementById(\u0026#34;savestudent\u0026#34;).onclick = function () { var inputData = { studentid: $(\u0026#39;#studentid\u0026#39;).val(), name: $(\u0026#39;#name\u0026#39;).val(), class: $(\u0026#39;#class\u0026#39;).val(), birthdate: $(\u0026#39;#birthdate\u0026#39;).val(), email: $(\u0026#39;#email\u0026#39;).val() }; // Validate fields and email format const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; if (!inputData.studentid || !inputData.name || !inputData.class || !inputData.birthdate || !inputData.email) { alert(\u0026#34;Please fill in all the fields.\u0026#34;); return; } if (!emailPattern.test(inputData.email)) { alert(\u0026#34;Invalid email format.\u0026#34;); return; } console.log(\u0026#34;POST data:\u0026#34;, { body: JSON.stringify(inputData) }); $.ajax({ url: API_ENDPOINT, type: \u0026#39;POST\u0026#39;, data: JSON.stringify({ body: JSON.stringify(inputData) }), contentType: \u0026#39;application/json\u0026#39;, headers: { \u0026#39;x-api-key\u0026#39;: API_KEY }, success: function (response) { console.log(\u0026#34;POST response:\u0026#34;, response); let message = \u0026#34;Student data has been saved!\u0026#34;; if (response \u0026amp;\u0026amp; response.statusCode === 400) { try { const error = JSON.parse(response.body || \u0026#34;{}\u0026#34;); message = `Error: ${escapeHTML(error.message || \u0026#34;Unknown error\u0026#34;)}`; } catch (e) { console.error(\u0026#34;Body parsing error:\u0026#34;, e); message = \u0026#34;Error: Unknown\u0026#34;; } } else if (response \u0026amp;\u0026amp; typeof response.body === \u0026#39;string\u0026#39;) { try { const data = JSON.parse(response.body); if (data \u0026amp;\u0026amp; data.name \u0026amp;\u0026amp; data.studentid) { message = `Saved student: ${escapeHTML(data.name)} (${escapeHTML(data.studentid)})`; } else { console.warn(\u0026#34;Response body doesn\u0026#39;t contain name or studentid:\u0026#34;, data); } } catch (e) { console.error(\u0026#34;Body parsing error:\u0026#34;, e); } } else { console.warn(\u0026#34;No body or non-string body response:\u0026#34;, response); } document.getElementById(\u0026#34;studentSaved\u0026#34;).textContent = message; }, error: function (xhr) { let errorMessage = \u0026#34;Unknown\u0026#34;; try { const error = JSON.parse(xhr.responseText || \u0026#34;{}\u0026#34;); errorMessage = error.message || errorMessage; } catch (e) { errorMessage = xhr.responseText || errorMessage; } alert(\u0026#34;Error while saving: \u0026#34; + errorMessage); } }); }; // Handle fetching all students (GET) document.getElementById(\u0026#34;getstudents\u0026#34;).onclick = function () { $.ajax({ url: API_ENDPOINT, type: \u0026#39;GET\u0026#39;, contentType: \u0026#39;application/json\u0026#39;, headers: { \u0026#39;x-api-key\u0026#39;: API_KEY }, success: function (response) { console.log(\u0026#34;GET response:\u0026#34;, response); // Log for debugging $(\u0026#39;#studentTable tbody\u0026#39;).empty(); let students = response; // Check if the response is an object containing body if (response \u0026amp;\u0026amp; typeof response.body === \u0026#39;string\u0026#39;) { try { students = JSON.parse(response.body); } catch (e) { console.error(\u0026#34;Body parsing error:\u0026#34;, e); alert(\u0026#34;Returned data is not in JSON format.\u0026#34;); return; } } // Check if students is an array if (Array.isArray(students)) { if (students.length === 0) { alert(\u0026#34;No student data.\u0026#34;); } else { jQuery.each(students, function (i, data) { $(\u0026#34;#studentTable tbody\u0026#34;).append( `\u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#39;p-4\u0026#39;\u0026gt;${escapeHTML(data.studentid)}\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#39;p-4\u0026#39;\u0026gt;${escapeHTML(data.name)}\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#39;p-4\u0026#39;\u0026gt;${escapeHTML(data.class)}\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#39;p-4\u0026#39;\u0026gt;${escapeHTML(data.birthdate)}\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#39;p-4\u0026#39;\u0026gt;${escapeHTML(data.email)}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt;` ); }); } } else { console.warn(\u0026#34;Returned data is not an array:\u0026#34;, students); alert(\u0026#34;Returned data is not in the correct format.\u0026#34;); } }, error: function (xhr) { let errorMessage = \u0026#34;Unknown\u0026#34;; try { const error = JSON.parse(xhr.responseText || \u0026#34;{}\u0026#34;); errorMessage = error.message || errorMessage; } catch (e) { errorMessage = xhr.responseText || errorMessage; } alert(\u0026#34;Error fetching student data: \u0026#34; + errorMessage); } }); }; document.getElementById(\u0026#34;backupstudents\u0026#34;).onclick = function(){ $.ajax({ url: API_ENDPOINT + \u0026#34;/backup\u0026#34;, type: \u0026#39;POST\u0026#39;, data: JSON.stringify({}), contentType: \u0026#39;application/json; charset=utf-8\u0026#39;, headers: { \u0026#39;x-api-key\u0026#39;: API_KEY }, success: function (response) { alert(\u0026#34;Backup successful! Check your email for the backup file.\u0026#34;); }, error: function () { alert(\u0026#34;Error performing data backup.\u0026#34;); } }); }; Note: Ensure to replace API_ENDPOINT and API_KEY with actual values from section 4.8 and 4.2. Replace API_ENDPOINT and API_KEY API_ENDPOINT: Replace https://abc123.execute-api.us-east-1.amazonaws.com/prod with the Invoke URL from section 4.8 (retrieve from API Gateway \u0026gt; Stages \u0026gt; prod \u0026gt; Invoke URL). API_KEY: Replace xxxxxxxxxxxxxxxxxxxx with the StudentApiKey value from section 4.2. For better security, store StudentApiKey in AWS Secrets Manager and retrieve it in a serverless environment (e.g., Lambda or CloudFront Functions). Example to retrieve API Key from AWS Secrets Manager: const AWS = require(\u0026#39;aws-sdk\u0026#39;); const secretsManager = new AWS.SecretsManager({ region: \u0026#39;us-east-1\u0026#39; }); async function getApiKey() { const data = await secretsManager.getSecretValue({ SecretId: \u0026#39;student-api-key\u0026#39; }).promise(); return JSON.parse(data.SecretString).apiKey; } In the client-side environment, store API_KEY in environment variables (e.g., .env with Vite/React) or configure CloudFront to automatically add the x-api-key header. Important Notes Factor Details API Key Security Do not hardcode API_KEY directly in scripts.js. Use AWS Secrets Manager or CloudFront Functions to add the x-api-key header automatically. CORS Ensure CORS is correctly enabled (section 4.7) with Access-Control-Allow-Origin: https://d12345678.cloudfront.net. If encountering CORS errors, check headers in Method Response and Lambda (sections 3.1, 3.2, 3.3). AWS Region Ensure the region us-east-1 matches with student API, stage prod, Lambda functions, DynamoDB studentData, S3 student-backup-20250706, SES, and CloudFront. Optimization - Minimize the styles.css and scripts.js files before uploading them to S3 to speed up loading. - Use CloudFront cache to store static content, set a reasonable TTL (e.g., 86400 seconds). - Add Request Validator in API Gateway (section 4.5) to check the JSON body of POST /students. - Enable CloudWatch Logs for API Gateway (section 4.8): In API Gateway \u0026gt; Stages \u0026gt; prod \u0026gt; Logs/Tracing, select Enable CloudWatch Logs. Error Checking - If the interface doesn’t load: Check S3 public access and CloudFront origin. - If the API returns 403: Check StudentApiKey and StudentUsagePlan (section 4.9). - If the API returns 429: Check the limits in StudentUsagePlan (section 4.3). - If the API returns 500: Check the CloudWatch logs for Lambda. - If the table is empty or data isn’t displaying: Check the response from GET /students in Developer Tools \u0026gt; Network. API Integration Testing - Use Developer Tools to check API requests. - Check DynamoDB studentData to verify new records. - Check S3 student-backup-20250706 to verify the backup file. - Check email (including Spam/Junk) to verify notifications from SES. Best Practice Tip: Before deploying to S3, test the interface locally using npx serve or a static server to ensure that API requests work correctly. Use Developer Tools \u0026gt; Network to verify the x-api-key header and the response from the API. Check the data in DynamoDB, S3, and SES after each action.\nConclusion The web interface has been built with index.html, styles.css, and scripts.js, successfully integrated with the student API (stage prod) using Invoke URL and StudentApiKey. The application supports data entry, displays a list of students, and performs data backup, ready to be deployed on S3 and distributed through CloudFront.\nNext step: Proceed to Configuring CloudFront and Deploying the Web Interface to complete the integration!\n"
},
{
	"uri": "/6-configuring-s3-buckets/",
	"title": "Configuring S3 Bucket for Storing and Serving the Website",
	"tags": [],
	"description": "",
	"content": " Objective: Configure two Amazon S3 Buckets for:\nStoring and serving the web interface: Create the student-web-20250706 bucket to store static files (index.html, styles.css, scripts.js from section 5), enable Static Website Hosting, and configure public access permissions to serve the interface via CloudFront (section 7). Data backup: Configure the student-backup-20250706 bucket (created in section 2.4) to store backup files from the POST /backup endpoint (section 4.6), ensuring the BackupDynamoDBAndSendEmail Lambda function has write permissions to the bucket.\nThis configuration integrates with the student API (stage prod, section 4.8) and ensures the web interface (using Tailwind CSS) works smoothly with the GET /students, POST /students, and POST /backup endpoints. Initial Requirements You need to complete section 2.4 (create the student-backup-20250706 bucket), section 3.3 (create the BackupDynamoDBAndSendEmail Lambda function with the DynamoDBBackupRole role), section 4.1 (create the student API), section 4.2 (create the StudentApiKey), section 4.3 (create the StudentUsagePlan), section 4.4 (create the GET /students method), section 4.5 (create the POST /students method), section 4.6 (create the /backup resource and POST /backup method), section 4.7 (enable CORS), section 4.8 (deploy the API to the prod stage), section 4.9 (link the StudentApiKey to StudentUsagePlan and associate with the student API in the prod stage), and section 5 (build the web interface with index.html, styles.css, scripts.js). Ensure that your AWS account has permissions to access S3, Lambda, API Gateway, and the AWS region is us-east-1.\nConfiguration Steps Below are the specific steps to configure the S3 Bucket:\nStep Content Description 6.1 Create a new S3 Bucket Create the student-web-20250706 bucket to store static files (index.html, styles.css, scripts.js). 6.2 Upload the web interface assets to S3 (HTML/CSS/JS) Upload the static files from section 5 to the student-web-20250706 bucket. 6.3 Enable Static Website Hosting Enable Static Website Hosting in the student-web-20250706 bucket to serve the web interface. 6.4 Configure Bucket Policy for public access Update the Bucket Policy for student-web-20250706 to allow CloudFront to access the content (s3:GetObject). 6.5 Update Bucket Policy to support data backup (Backup) Update the Bucket Policy for student-backup-20250706 to allow the BackupDynamoDBAndSendEmail Lambda function to write files (s3:PutObject). Note: Follow the steps in order to ensure the S3 Bucket configuration is correct. Each step will be explained in detail in the corresponding documentation.\nConclusion By completing these configuration steps, you will have:\nThe student-web-20250706 bucket storing and serving the static web interface, ready to integrate with CloudFront. The student-backup-20250706 bucket supporting the storage of backup files from the POST /backup endpoint, integrated with the BackupDynamoDBAndSendEmail Lambda function. A fully integrated system with the student API (stage prod) and a web interface using Tailwind CSS. Ready to continue?\nGo to Create a new S3 Bucket to start configuring the student-web-20250706 bucket!\n"
},
{
	"uri": "/4-creating-a-restful-api/4.6-creating-a-backup-resource-and-method/",
	"title": "Create Resource and Method for Data Backup",
	"tags": [],
	"description": "",
	"content": " Objective: Create the resource /backup and the POST method in the student API (created in section 4.1) to integrate with the Lambda function BackupDynamoDBAndSendEmail (created in section 3.3). This will allow backing up all data from the DynamoDB studentData table to the S3 bucket student-backup-20250706 and sending an email notification via SES. The method will require an API Key (StudentApiKey, created in section 4.2) in the x-api-key header for security, and prepare for enabling CORS (section 4.7) so that the web interface (running on CloudFront) can send requests.\nOverview of the Resource and POST Method The /backup resource and POST /backup method will invoke the Lambda function BackupDynamoDBAndSendEmail to: Back up all records from the DynamoDB studentData table (fields: studentid, name, class, birthdate, email) into a JSON file in the S3 bucket student-backup-20250706. Send an email notification via SES to a designated address (e.g., admin or a user). The BackupDynamoDBAndSendEmail function returns a JSON response with the header Access-Control-Allow-Origin: '*' to support CORS, suitable for the web interface. API Key Required ensures that only requests with a valid StudentApiKey will be processed. After creation, the API needs to be deployed (section 4.8) for the POST method to take effect. Prerequisites You need to complete section 4.1 (create student API), section 4.2 (create StudentApiKey), section 4.3 (create StudentUsagePlan), section 4.4 (create GET /students method), section 4.5 (create POST /students method), and section 3 (create Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, DynamoDB studentData table, S3 bucket student-backup-20250706, SES email verification). Ensure that your AWS account is set up and the AWS region is us-east-1.\nDetailed Actions Access AWS Management Console\nOpen your browser and log into the AWS Management Console with your AWS account.\nIn the search bar at the top, type API Gateway and select the Amazon API Gateway service to access the management interface.\nCheck the AWS region: Make sure you are working in the primary AWS region (assumed us-east-1 for synchronization with previous sections), check the region in the top-right corner of the AWS Console. This region must match the student API, the BackupDynamoDBAndSendEmail Lambda function, studentData DynamoDB table, student-backup-20250706 S3 bucket, and SES.\nFigure 1: AWS Console interface with the API Gateway search bar.\nNavigate to APIs\nIn the main interface of Amazon API Gateway, look at the left navigation menu.\nSelect APIs to view the list of existing APIs.\nThe list should display the student API (created in section 4.1). If not, check the AWS region again or refresh the page.\nFigure 2: Navigation menu with the APIs option.\nSelect the student API\nIn the APIs list, find and select the student API.\nYou will be redirected to the API management page for student, showing options like Resources, Stages, API Keys, etc.\nSelect Resources from the left menu to start configuring the resource and method.\nFigure 3: Student API management page with the Resources option.\nCreate the /backup Resource\nIn the Resources interface, you will see a resource tree with the root / and the /students resource (created in section 4.4).\nClick Actions \u0026gt; Create Resource to create a new resource.\nConfigure the resource:\nResource Name: Enter backup. Resource Path: Enter /backup (or leave it as default, it will automatically be /backup). Enable API Gateway CORS: Select to prepare for enabling CORS (section 4.7). Click Create Resource to create it.\nCheck: The /backup resource will appear under the root / in the resource tree.\nFigure 4: Click the Create button.\nFigure 5: Resource configuration interface for /backup.\nCreate the POST Method\nIn the resource tree, select the /backup resource.\nClick Actions \u0026gt; Create Method.\nIn the dropdown below /backup, select POST and click the check mark (✔) to confirm.\nNote: If the dropdown doesn\u0026rsquo;t show POST, ensure you have selected the correct resource /backup.\nFigure 6: Create POST method interface.\nConfigure Lambda Integration\nIn the POST method configuration interface:\nIntegration Type: Choose Lambda Function to integrate with the Lambda function. Use Lambda Proxy integration: Select (to send the entire HTTP request, including headers and body, to the Lambda function and receive a JSON response with headers). Lambda Region: Select us-east-1 (or your AWS region, it must match the region of the BackupDynamoDBAndSendEmail Lambda). Lambda Function: Enter BackupDynamoDBAndSendEmail. Note: If the BackupDynamoDBAndSendEmail function does not appear in the suggestions list, enter it manually and ensure the function exists in Lambda (section 3.3). Click Save to save the configuration. If AWS asks for permissions, click OK to allow API Gateway to invoke the BackupDynamoDBAndSendEmail Lambda function. AWS will automatically add the appropriate IAM policy to the Lambda function\u0026rsquo;s role (typically DynamoDBBackupRole from section 3.3) with the lambda:InvokeFunction permission.\nFigure 7: Lambda integration configuration interface.\nFigure 8: Click the Save button after configuration.\nEnable API Key Required\nIn the Method Request interface of POST /backup:\nClick Edit next to Authorization. Select NONE (API Key will handle authentication, no need for Cognito or IAM Authorizer). In API Key Required, select true to require the API Key in the x-api-key header. Explanation: This ensures that all requests to POST /backup must include the StudentApiKey (created in section 4.2) in the x-api-key header. Click Save or the check mark (✔) to save the configuration. Figure 9: Enable API Key Required interface.\nCheck the Method Creation Status\nAfter configuring and clicking Save, you will see the message: \u0026ldquo;Successfully created method ‘POST’. Redeploy your API for the update to take effect.\u0026rdquo;\nImportant Note: The POST method will not work until you deploy the API to a stage (section 4.8).\nTo verify the configuration:\nIn Resources, select POST under /backup. Verify: Integration Request: Shows Lambda Function: BackupDynamoDBAndSendEmail. Method Request: API Key Required: true. If you encounter errors: \u0026ldquo;Lambda function not found\u0026rdquo;: Check that the BackupDynamoDBAndSendEmail function exists in Lambda \u0026gt; Functions and that the AWS region matches (us-east-1). \u0026ldquo;AccessDenied\u0026rdquo;: Check that the IAM role of the AWS account has the apigateway:PUT permission to create the method. \u0026ldquo;Permission denied\u0026rdquo;: Ensure that API Gateway has permission to call BackupDynamoDBAndSendEmail (AWS will automatically add permissions when you click OK). Figure 10: Success message after creating the POST method.\nImportant Notes Factor Details Lambda Proxy Integration Lambda Proxy integration allows sending the entire HTTP request (headers, body) to the BackupDynamoDBAndSendEmail function and receiving a JSON response with headers (such as Access-Control-Allow-Origin: '*'). Ensure that the BackupDynamoDBAndSendEmail function (section 3.3) properly handles the backup and email sending. API Key Security With API Key Required: true, requests sent to POST /backup must include the x-api-key: \u0026lt;StudentApiKey\u0026gt; header. To enhance security, store the API Key in AWS Secrets Manager (see section 4.2). CORS The POST method needs to support CORS for the web interface to send cross-origin requests. This will be detailed in section 4.7 (enable CORS with the OPTIONS method). Ensure the BackupDynamoDBAndSendEmail function returns the header Access-Control-Allow-Origin: '*' (or a specific CloudFront domain, e.g., https://d12345678.cloudfront.net). AWS Region Ensure the region us-east-1 matches the BackupDynamoDBAndSendEmail function, studentData DynamoDB table, student-backup-20250706 S3 bucket, SES, and the student API. If using a different region (e.g., us-west-2), select the correct region in Lambda Region. Error Handling - If you get the error \u0026ldquo;Lambda function not found\u0026rdquo;: - Check that the BackupDynamoDBAndSendEmail function exists in Lambda \u0026gt; Functions. - Ensure the AWS region matches (us-east-1). - If you get a 403 \u0026quot;Forbidden\u0026quot; error when calling the API (after deploying): - Check that API Key Required: true and the StudentApiKey API Key are valid. - Ensure the API Key is linked to the Usage Plan (section 4.3, 4.9). - If you get a 500 error from Lambda, check the logs in CloudWatch (log group /aws/lambda/BackupDynamoDBAndSendEmail) to debug: - NoSuchBucket: Check that the S3 bucket student-backup-20250706 exists. - AccessDenied: Check that the DynamoDBBackupRole role has the s3:PutObject, dynamodb:Scan, and ses:SendEmail permissions. - Email address not verified: Check that the source email (no-reply@system.edu.vn) and the recipient email (admin@system.edu.vn) are verified in SES (section 2.5). Optimization - Add the header Access-Control-Allow-Origin in Method Response to ensure CORS works correctly: - In the Method Response for POST /backup, add Status Code 200, 500 with the header Access-Control-Allow-Origin: '*'. - In the Integration Response, map the response from Lambda to handle status codes. - Consider using AWS WAF with API Gateway to protect against DDoS attacks or API Key abuse. - If the studentData table is large, ensure that the BackupDynamoDBAndSendEmail function handles pagination for the Scan (e.g., using LastEvaluatedKey) to avoid exceeding limits. Early Testing - After creating the POST method, verify the configuration in Resources \u0026gt; POST /backup (Integration Request, Method Request). - After deploying the API (section 4.8), test the POST method with Postman or curl. - Check the S3 bucket student-backup-20250706 (go to S3 \u0026gt; Buckets \u0026gt; student-backup-20250706 \u0026gt; Objects) to verify the backup file (e.g., backup-20250707-124500.json). - Check the inbox (including Spam/Junk) of the recipient email (e.g., admin@system.edu.vn) to verify the email notification from SES. - If you receive a 403 \u0026quot;Forbidden\u0026quot; error, check the API Key and API Key Required configuration. - If you receive a 500 error, check the CloudWatch logs of the BackupDynamoDBAndSendEmail function. Web Interface Integration Testing After deploying the API (section 4.8) and linking the Usage Plan (section 4.9), use the API Key in the web interface (using Tailwind CSS, running on CloudFront) to call the POST /backup endpoint. Practical Tip: Verify the Integration Request and API Key Required configurations before deploying the API. Test the backup file in the student-backup-20250706 S3 bucket and the email notification from SES using Postman to ensure the BackupDynamoDBAndSendEmail function works properly.\nConclusion The /backup resource and POST /backup method have been successfully created in the student API, integrated with the BackupDynamoDBAndSendEmail Lambda function, and require the StudentApiKey API Key, ready to be deployed and used in the web interface.\nNext step: Move to Enable CORS to support the web interface to continue!\n"
},
{
	"uri": "/7-deploying-cloudfront/",
	"title": "Deploying CloudFront to Accelerate the Website",
	"tags": [],
	"description": "",
	"content": " Objective: Deploy Amazon CloudFront, a Content Delivery Network (CDN) service, to accelerate and secure the static web interface hosted on the S3 Bucket student-management-website-2025 (see section 6). CloudFront will:\nDistribute content from S3 over HTTPS, improving performance with global edge locations. Serve the index.html file (see section 6.2) as the default page via the Default Root Object. Refresh cache content when the interface is updated.\nCloudFront integrates with the student API (stage prod, see section 4.8) to support the endpoints GET /students, POST /students, and POST /backup, using the StudentApiKey (see section 4.2) with CORS configured (see section 4.7) for calls from the CloudFront domain. Overview of CloudFront in the Application Role of CloudFront: Provides HTTPS for the web interface (S3 only supports HTTP via Static Website Hosting, see section 6.3). Accelerates loading speed by caching content at edge locations close to users. Integrates with the S3 Bucket student-management-website-2025 (sections 6.1–6.4) to serve files like index.html, styles.css, scripts.js. Enhances API Key security using CloudFront Functions (recommended) to add the x-api-key header without embedding it in scripts.js. System Integration: The web interface (distributed via CloudFront) calls the student API (see section 4.8) using the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey. Functions: POST /students: Save records to DynamoDB studentData and send emails via SES. GET /students: Display data in a table. POST /backup: Create a backup file in the S3 Bucket student-backup-20250706 (see section 6.5) and send notification emails via SES. CORS is configured (see section 4.7) to support requests from the CloudFront domain (e.g., https://d12345678.cloudfront.net). Prerequisites You need to complete section 6.1 (create the student-management-website-2025 bucket), section 6.2 (upload index.html, styles.css, scripts.js), section 6.3 (enable Static Website Hosting), section 6.4 (configure Bucket Policy), section 6.5 (configure the student-backup-20250706 bucket), section 5 (build the web interface), section 4.1 (create the student API), section 4.2 (create the StudentApiKey), section 4.3 (create the StudentUsagePlan), section 4.4 (create the GET /students method), section 4.5 (create the POST /students method), section 4.6 (create the /backup resource and POST /backup method), section 4.7 (enable CORS), section 4.8 (deploy the API to the prod stage), section 4.9 (attach StudentApiKey to StudentUsagePlan), section 3 (create Lambda functions, DynamoDB table studentData, student-backup-20250706 bucket, SES). Ensure your AWS account has cloudfront:CreateDistribution, cloudfront:CreateInvalidation permissions, and the AWS region is us-east-1 for related services.\nConfiguration Steps Below are the specific steps to deploy CloudFront:\nStep Content Description 7.1 Create CloudFront Distribution Create a CloudFront distribution to deliver content from the student-management-website-2025 bucket over HTTPS. 7.2 Configure Default Root Object Set index.html as the Default Root Object to serve as the main page when accessing the CloudFront domain. 7.3 Create Invalidation to Refresh Cache Create an invalidation to refresh CloudFront cache, ensuring the latest content from S3 is served. Note: Follow the steps in order to ensure CloudFront is configured correctly. Each step is detailed in the corresponding documentation.\nConclusion By completing these configuration steps, you will have:\nA CloudFront distribution delivering content from the student-management-website-2025 bucket over HTTPS, improving speed and security. A web interface integrated with the student API (stage prod), supporting GET /students, POST /students, and POST /backup functions. A system ready for testing and production deployment. Ready to continue?\nProceed to Create CloudFront Distribution to start deploying\n"
},
{
	"uri": "/4-creating-a-restful-api/4.7-enabling-cors/",
	"title": "Enable CORS to Support Frontend Access",
	"tags": [],
	"description": "",
	"content": " Objective: Enable CORS (Cross-Origin Resource Sharing) on the student API (created in section 4.1) to allow the web interface (running on CloudFront, using Tailwind CSS) to send requests to the GET /students, POST /students, and POST /backup endpoints. CORS will be configured on the /students and /backup resources by adding the OPTIONS method and setting the necessary headers (Access-Control-Allow-Methods, Access-Control-Allow-Headers, Access-Control-Allow-Origin), ensuring smooth and secure integration with the frontend.\nOverview of CORS in API Gateway CORS is a security mechanism of the browser that requires the server (API Gateway) to allow cross-origin requests from a different domain (e.g., https://d12345678.cloudfront.net) compared to the API domain (e.g., https://api-id.execute-api.us-east-1.amazonaws.com). In this system, CORS needs to be enabled for the /students (GET, POST) and /backup (POST) resources so that the web interface can: Send a GET /students request to retrieve the student list (function getStudentData, section 4.4). Send a POST /students request to save student information (function insertStudentData, section 4.5). Send a POST /backup request to back up the data (function BackupDynamoDBAndSendEmail, section 4.6). Enabling CORS requires: Adding the OPTIONS method for each resource to handle preflight requests from the browser. Setting the CORS headers (Access-Control-Allow-Origin, Access-Control-Allow-Methods, Access-Control-Allow-Headers) in the OPTIONS, GET, and POST responses. Ensuring that the Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail) return the header Access-Control-Allow-Origin: '*'. After enabling CORS, the API needs to be deployed (section 4.8) for the changes to take effect. Prerequisites You need to complete section 4.1 (create student API), section 4.2 (create StudentApiKey), section 4.3 (create StudentUsagePlan), section 4.4 (create GET /students method), section 4.5 (create POST /students method), section 4.6 (create /backup resource and POST /backup method), and section 3 (create Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, DynamoDB studentData table, S3 bucket student-backup-20250706, SES email verification). Ensure that your AWS account is set up and the AWS region is us-east-1.\nDetailed Actions Access AWS Management Console\nOpen your browser and log into the AWS Management Console with your AWS account.\nIn the search bar at the top, type API Gateway and select the Amazon API Gateway service to access the management interface.\nCheck the AWS region: Make sure you are working in the primary AWS region (assumed us-east-1 for synchronization with previous sections), check the region in the top-right corner of the AWS Console. This region must match the student API, the Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), studentData DynamoDB table, student-backup-20250706 S3 bucket, and SES.\nFigure 1: AWS Console interface with the API Gateway search bar.\nNavigate to APIs\nIn the main interface of Amazon API Gateway, look at the left navigation menu.\nSelect APIs to view the list of existing APIs.\nThe list should display the student API (created in section 4.1). If not, check the AWS region again or refresh the page.\nFigure 2: Navigation menu with the APIs option.\nSelect the student API\nIn the APIs list, find and select the student API.\nYou will be redirected to the API management page for student, showing options like Resources, Stages, API Keys, etc.\nSelect Resources from the left menu to start configuring CORS.\nFigure 3: Student API management page with the Resources option.\nEnable CORS for the /students Resource\nIn the Resources interface, you will see a resource tree with the root / and the /students resource (created in section 4.4).\nSelect the /students resource.\nClick Actions \u0026gt; Enable CORS.\nIn the Enable CORS interface:\nAccess-Control-Allow-Methods: Select GET, POST, and OPTIONS. Explanation: GET and POST correspond to the methods created (sections 4.4, 4.5). OPTIONS is the preflight method that the browser sends to check CORS before sending the actual request (GET or POST). Access-Control-Allow-Headers: Keep the default or ensure it includes Content-Type, x-api-key (as the methods require the API Key in the x-api-key header, sections 4.4, 4.5). Example: Content-Type,x-api-key,Authorization. Access-Control-Allow-Origin: Enter '*' (to allow all domains) or a specific CloudFront domain (e.g., https://d12345678.cloudfront.net) for enhanced security. Access-Control-Max-Age: Keep the default (600 seconds) for the browser to cache the preflight response. Click Enable CORS and replace existing CORS headers to apply.\nAWS will automatically:\nCreate an OPTIONS method for the /students resource. Configure Mock Integration for OPTIONS with the response containing the necessary CORS headers. Update the Method Response for GET and POST to include the Access-Control-Allow-Origin header. Click Save to save the configuration.\nFigure 4: Enable CORS for the /students resource.\nEnable CORS for the /backup Resource\nIn the Resources interface, select the /backup resource (created in section 4.6).\nClick Actions \u0026gt; Enable CORS.\nIn the Enable CORS interface:\nAccess-Control-Allow-Methods: Select POST, OPTIONS. Explanation: POST corresponds to the method created (section 4.6). OPTIONS handles the preflight request for /backup. Access-Control-Allow-Headers: Ensure it includes Content-Type, x-api-key. Access-Control-Allow-Origin: Enter '*' or the specific CloudFront domain (e.g., https://d12345678.cloudfront.net). Access-Control-Max-Age: Keep the default (600 seconds). Click Enable CORS and replace existing CORS headers to apply.\nAWS will automatically create the OPTIONS method for /backup and update the Method Response for POST.\nClick Save to save the configuration.\nFigure 5: Enable CORS for the /backup resource.\nVerify the Status of CORS Activation\nAfter enabling CORS, you will see the message: \u0026ldquo;Successfully enabled CORS\u0026rdquo; for each resource (/students, /backup).\nTo verify the configuration:\nIn Resources, select the /students resource: Verify the OPTIONS method appears with Mock Integration. In the Method Response for GET, POST, and OPTIONS, check the Access-Control-Allow-Origin: '*' header. In the Integration Response for OPTIONS, check that the response includes: { \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,POST,OPTIONS\u0026#34;, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Content-Type,x-api-key,Authorization\u0026#34; } Repeat the checks for the /backup resource (only POST and OPTIONS). If you encounter errors:\n\u0026ldquo;CORS headers already exist\u0026rdquo;: Select Replace existing CORS headers to overwrite. \u0026ldquo;AccessDenied\u0026rdquo;: Check that the IAM role for the AWS account has the apigateway:PUT permission to edit the method. \u0026ldquo;OPTIONS method not found\u0026rdquo;: Ensure that you clicked Enable CORS correctly. Important Note: CORS will not work until you deploy the API to a stage (section 4.8).\nFigure 6: Success message after enabling CORS.\nImportant Notes Factor Details Correct CORS Configuration - Access-Control-Allow-Origin: Use '*' to allow all domains (suitable for testing). In production, specify a specific CloudFront domain (e.g., https://d12345678.cloudfront.net) for enhanced security. - Access-Control-Allow-Headers: Ensure it includes x-api-key since the methods require an API Key (StudentApiKey, section 4.2). - Access-Control-Allow-Methods: Include OPTIONS to handle preflight requests. Integration with Lambda The Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail) must return the header Access-Control-Allow-Origin: '*' in the response to avoid CORS errors. This is configured in the Lambda code in sections 3.1, 3.2, 3.3. API Key Security Requests to the endpoints (GET /students, POST /students, POST /backup) must include the x-api-key: \u0026lt;StudentApiKey\u0026gt; header. Store the API Key in AWS Secrets Manager for enhanced security (see section 4.2). AWS Region Ensure the region us-east-1 matches the student API, the Lambda functions, studentData DynamoDB table, student-backup-20250706 S3 bucket, and SES. Error Handling - If the web interface reports a CORS error (e.g., \u0026ldquo;No \u0026lsquo;Access-Control-Allow-Origin\u0026rsquo; header\u0026rdquo;): - Check that Method Response for GET, POST, and OPTIONS includes the Access-Control-Allow-Origin header. - Check that the Integration Response for OPTIONS returns the correct CORS headers. - Ensure the Lambda functions return Access-Control-Allow-Origin: '*'. - If you encounter a 403 \u0026quot;Forbidden\u0026quot; error when calling the API: - Check that the StudentApiKey is valid and linked to the Usage Plan (sections 4.3, 4.9). - Ensure API Key Required: true is set in the Method Request (sections 4.4, 4.5, 4.6). - If you encounter a 500 error from Lambda, check the logs in CloudWatch (log groups /aws/lambda/getStudentData, /aws/lambda/insertStudentData, /aws/lambda/BackupDynamoDBAndSendEmail). Optimization - Specify the CloudFront domain in Access-Control-Allow-Origin instead of '*' for enhanced security. - Consider using AWS WAF with API Gateway to protect against DDoS attacks or API Key abuse. - If you need detailed preflight request checking, enable CloudWatch Logs for API Gateway: - In API Gateway \u0026gt; Settings \u0026gt; CloudWatch Logs, select Enable CloudWatch Logs and set the log level (e.g., INFO). - Add Request Validator for POST /students and POST /backup to validate the JSON body (see section 4.5). Early Testing - After enabling CORS, verify that the OPTIONS method appears in Resources for /students and /backup. - After deploying the API (section 4.8), test CORS by calling the endpoint from the web interface or using Postman/curl. - Check from the web interface (open Developer Tools \u0026gt; Network in the browser) to verify that no CORS errors occur when calling GET /students, POST /students, or POST /backup. - If you receive a CORS error, check the headers in Method Response and Integration Response, or the CloudWatch logs for API Gateway. Web Interface Integration Testing After deploying the API (section 4.8) and linking the Usage Plan (section 4.9), call the endpoints (GET /students, POST /students, POST /backup) from the web interface (using Tailwind CSS, running on CloudFront). Practical Tip: Verify the Method Response and Integration Response configurations for OPTIONS before deploying the API. Test the endpoints from the web interface using Developer Tools to ensure no CORS errors and that the data is returned correctly.\nConclusion CORS has been successfully enabled on the /students and /backup resources in the student API, allowing the web interface to call the GET /students, POST /students, and POST /backup endpoints without encountering CORS errors.\nNext step: Move to Deploy API for production use to continue!\n"
},
{
	"uri": "/4-creating-a-restful-api/4.8-deploying-the-api/",
	"title": "Deploy the API to a Specific Stage",
	"tags": [],
	"description": "",
	"content": " Objective: Deploy the student API (created in section 4.1) to the prod stage in AWS API Gateway to activate the GET /students (section 4.4), POST /students (section 4.5), and POST /backup (section 4.6) methods, along with CORS configuration (section 4.7). After deployment, copy the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) to be used in the web interface (running on CloudFront, using Tailwind CSS) to call the endpoints with the API Key StudentApiKey (section 4.2).\nOverview of API Deployment in API Gateway A stage is a deployment environment (e.g., prod, dev, test) in API Gateway, representing an active version of the API at a given time. Deploying the API to the prod stage will: Activate the GET /students, POST /students, and POST /backup methods, integrated with Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail). Apply the CORS configuration (section 4.7) so the web interface can send cross-origin requests. Require the API Key StudentApiKey in the x-api-key header for the methods (due to API Key Required being enabled in sections 4.4, 4.5, and 4.6). The Invoke URL is the root URL of the stage (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod), combined with the resource paths (/students, /backup) to create the full endpoints: GET https://abc123.execute-api.us-east-1.amazonaws.com/prod/students POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/students POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/backup After deployment, the Invoke URL will be used in the web interface to call the API with the API Key. Prerequisites You need to complete section 4.1 (create student API), section 4.2 (create StudentApiKey), section 4.3 (create StudentUsagePlan), section 4.4 (create GET /students method), section 4.5 (create POST /students method), section 4.6 (create /backup resource and POST /backup method), section 4.7 (enable CORS), and section 3 (create Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, DynamoDB studentData table, S3 bucket student-backup-20250706, SES email verification). Ensure your AWS account is ready and the AWS region is us-east-1.\nDetailed Actions Access AWS Management Console\nOpen your browser and log into the AWS Management Console with your AWS account.\nIn the search bar at the top, type API Gateway and select the Amazon API Gateway service to access the management interface.\nCheck the AWS region: Ensure you are working in the primary AWS region (assumed us-east-1 to synchronize with previous sections), check the region in the top-right corner of the AWS Console. This region must match the student API, the Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), studentData DynamoDB table, student-backup-20250706 S3 bucket, and SES.\nFigure 1: AWS Console interface with the API Gateway search bar.\nNavigate to APIs\nIn the main interface of Amazon API Gateway, look at the left navigation menu.\nSelect APIs to view the list of existing APIs.\nThe list should display the student API (created in section 4.1). If not, check the AWS region again or refresh the page.\nFigure 2: Navigation menu with the APIs option.\nSelect the student API\nIn the APIs list, find and select the student API.\nYou will be redirected to the API management page for student, showing options like Resources, Stages, API Keys, etc.\nFigure 3: Student API management page.\nDeploy the API\nIn the API management page for student, select Resources from the left menu. Click Actions \u0026gt; Deploy API to open the deployment interface. Figure 4: Click the Deploy API button.\nIn the Deploy API interface:\nDeployment stage: Select New Stage. Stage name: Enter prod (in lowercase, no special characters). Stage description: (Optional) Enter Production stage for StudentManagementAPI for a clear description. Deployment description: (Optional) Enter Initial deployment for prod stage to note the deployment version. Click Deploy to deploy the API to the prod stage.\nNote:\nIf the prod stage already exists (from a previous deployment), select prod in the Deployment stage dropdown instead of creating a new one, then click Deploy to update it. Every time you change the API configuration (method, CORS, etc.), you need to redeploy to apply the changes. Figure 5: Deploy API to the prod stage interface.\nCheck the Deployment Status\nAfter clicking Deploy, you will see the message: \u0026ldquo;Successfully created deployment for student. This deployment is active for prod.\u0026rdquo;\nIn the left menu, select Stages to view the list of stages.\nSelect the prod stage to check the details:\nVerify that the Invoke URL appears at the top of the page (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod). Check the resources (/students, /backup) and methods (GET, POST, OPTIONS) that have been deployed. If you do not see the message or encounter an error:\n\u0026ldquo;AccessDenied\u0026rdquo;: Check that the AWS account\u0026rsquo;s IAM role has the apigateway:POST permission to deploy the API. \u0026ldquo;Stage already exists\u0026rdquo;: If the prod stage already exists, select the existing stage and redeploy. \u0026ldquo;No methods deployed\u0026rdquo;: Ensure that the GET /students, POST /students, POST /backup, and OPTIONS methods have been created (sections 4.4, 4.5, 4.6, 4.7). Figure 6: Deployment status message and prod stage details.\nCopy the Invoke URL\nIn Stages \u0026gt; prod, copy the Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod). Store the Invoke URL in a safe place (e.g., configuration file, environment variable, or AWS Secrets Manager) to use in the web interface. Use the Invoke URL: Combine the Invoke URL with the resource path to create the full endpoint: GET https://abc123.execute-api.us-east-1.amazonaws.com/prod/students POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/students POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/backup These endpoints will be called from the web interface with the header x-api-key: \u0026lt;StudentApiKey\u0026gt;. Important Notes Factor Details API Key Security Each request to the endpoints must include the x-api-key header with the value StudentApiKey (created in section 4.2). Store the API Key in AWS Secrets Manager for enhanced security, avoiding direct embedding in JavaScript code. CORS Ensure CORS has been properly enabled (section 4.7) with the OPTIONS method and the Access-Control-Allow-Origin: '*' header (or specific CloudFront domain). The Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail) must return the Access-Control-Allow-Origin: '*' header in the response (configured in sections 3.1, 3.2, 3.3). AWS Region Ensure the us-east-1 region matches the student API, Lambda functions, studentData DynamoDB table, student-backup-20250706 S3 bucket, and SES. Error Handling - If you encounter a 403 \u0026quot;Forbidden\u0026quot; error when calling the endpoint: - Check that the StudentApiKey is valid and linked to the Usage Plan (sections 4.3, 4.9). - Ensure API Key Required: true is set in Method Request (sections 4.4, 4.5, 4.6). - If you encounter a 404 \u0026quot;Not Found\u0026quot; error: - Check that the Invoke URL is correct and the resource paths (/students, /backup) are configured. - Ensure the API has been deployed to the prod stage. - If you encounter a CORS error: - Check the CORS configuration (section 4.7) and the Access-Control-Allow-Origin header in Method Response and Lambda. - If you encounter a 500 error from Lambda, check the logs in CloudWatch (log groups /aws/lambda/getStudentData, /aws/lambda/insertStudentData, /aws/lambda/BackupDynamoDBAndSendEmail). Optimization - Enable CloudWatch Logs for the prod stage to monitor API requests: - In Stages \u0026gt; prod \u0026gt; Logs/Tracing, select Enable CloudWatch Logs and set the log level (e.g., INFO). - Check the logs in CloudWatch \u0026gt; Log groups \u0026gt; /aws/apigateway/student-prod. - Consider using AWS WAF with API Gateway to protect against DDoS attacks or API Key abuse. - If additional stages are needed (e.g., dev, test), create more stages in Stages and deploy separately for testing. Early Testing - After deployment, verify the prod stage appears in Stages with the correct Invoke URL. - Test the endpoints using Postman or curl. - Expected results: - GET /students: Returns the student list from the DynamoDB studentData table. - POST /students: Saves a new record to DynamoDB and sends a confirmation email via SES. - POST /backup: Creates a backup file in S3 student-backup-20250706 and sends a notification email. - Check from the web interface (open Developer Tools \u0026gt; Network in the browser) to verify that there are no CORS or 403 errors. - If you encounter errors, check the API Key, CORS configuration, or CloudWatch logs. Web Interface Integration Testing Use the Invoke URL in the web interface to call the endpoints, ensuring the x-api-key header is sent correctly (using Tailwind CSS, running on CloudFront). Practical Tip: After deployment, check the Invoke URL using Postman before integrating with the web interface. Verify the data in DynamoDB studentData, S3 bucket student-backup-20250706, and SES email to ensure the endpoints are working correctly.\nConclusion The student API has been successfully deployed to the prod stage with the Invoke URL ready for use in the web interface, supporting the GET /students, POST /students, and POST /backup methods.\nNext step: Move to Linking API Key to Usage Plan to continue!\n"
},
{
	"uri": "/8-setting-up-system-backup/",
	"title": "Setting Up Automated System Backup",
	"tags": [],
	"description": "",
	"content": " Objective: Set up an automated backup system for the DynamoDB table studentData by modifying the Lambda function BackupDynamoDBAndSendEmail (integrated with the POST /backup endpoint, section 4.8) and creating an Amazon EventBridge Rule to trigger scheduled backups. The backup will save data to the S3 Bucket student-backup-20250706 (section 6.5) and send notification emails via Amazon SES. The system ensures:\nAutomation of the backup process to minimize manual intervention. Integration with the web interface (distributed via CloudFront, sections 7.1–7.3) and the student API (stage prod, section 4.8). Security with StudentApiKey (section 4.2) and IAM role DynamoDBBackupRole (section 6.5). Prerequisites You need to complete sections 7.1–7.3 (create and configure CloudFront StudentWebsiteDistribution), 6.1–6.5 (configure S3 Buckets student-management-website-2025 and student-backup-20250706), 5 (build the web interface), 4.1–4.9 (create and deploy the student API, StudentApiKey, StudentUsagePlan, endpoints GET /students, POST /students, POST /backup, CORS, stage prod), 3.3 (create the Lambda function BackupDynamoDBAndSendEmail with the role DynamoDBBackupRole), and 3 (create the DynamoDB table studentData, verify SES email). Ensure your AWS account has permissions for lambda:UpdateFunctionConfiguration, events:PutRule, events:PutTargets, iam:PassRole, and the AWS region is us-east-1.\nConfiguration Steps Below are the specific steps to set up automated backup:\nStep Content Description 8.1 Modify Lambda Backup Configuration Update the Lambda function BackupDynamoDBAndSendEmail to support triggering from EventBridge, ensuring data from DynamoDB studentData is saved to S3 student-backup-20250706 and email is sent via SES. 8.2 Create EventBridge Rule for Automated Backup Create an Amazon EventBridge Rule StudentDataBackupRule to trigger the Lambda function BackupDynamoDBAndSendEmail on a schedule (e.g., daily). Note: Follow the steps in order to ensure the automated backup is configured correctly. Each step is detailed in the corresponding documentation.\nConclusion By completing these configuration steps, you will have:\nThe Lambda function BackupDynamoDBAndSendEmail updated to support both API Gateway and EventBridge triggers. The EventBridge Rule StudentDataBackupRule triggering scheduled backups, saving data from DynamoDB studentData to S3 student-backup-20250706 with SES notifications. A fully integrated system with the student API (stage prod) and the web interface via CloudFront StudentWebsiteDistribution. Ready to continue?\nGo to Modify Lambda Backup Configuration to start configuring\n"
},
{
	"uri": "/4-creating-a-restful-api/4.9-linking-api-key-to-usage-plan-and-stage/",
	"title": "Link API Key to Usage Plan &amp; Associate with REST API and Stage",
	"tags": [],
	"description": "",
	"content": " Objective: Link the StudentApiKey (created in section 4.2) to the StudentUsagePlan (created in section 4.3) and associate it with the student API (created in section 4.1) on the prod stage (created in section 4.8). This ensures that requests to the endpoints (GET /students, POST /students, POST /backup) must include the StudentApiKey in the x-api-key header and adhere to the limits of the StudentUsagePlan (Rate: 5 requests/second, Burst: 10 requests, Quota: 1000 requests/day). This configuration allows the web interface (running on CloudFront, using Tailwind CSS) to access the API securely and with control.\nOverview of API Key and Usage Plan in API Gateway API Key (StudentApiKey) is an authentication string used to control access to the API methods (GET /students, POST /students, POST /backup), requiring the x-api-key header in each request. Usage Plan (StudentUsagePlan) manages access limits (Rate, Burst, Quota) and links the API Key with a specific API/stage. Linking StudentApiKey to StudentUsagePlan and the student API on the prod stage ensures: Only requests with a valid StudentApiKey are processed. Requests adhere to the limits: 5 requests/second (Rate), 10 concurrent requests (Burst), and 1000 requests/day (Quota). The web interface can safely call the endpoints with CORS support (section 4.7) and Invoke URL (section 4.8). After completing the steps, the endpoints will be ready for use in the web interface with API Key security. Prerequisites You need to complete the steps in section 4.1 (create the student API), section 4.2 (create the StudentApiKey API Key), section 4.3 (create the StudentUsagePlan Usage Plan), section 4.4 (create the GET /students method), section 4.5 (create the POST /students method), section 4.6 (create the /backup resource and POST /backup method), section 4.7 (enable CORS), section 4.8 (deploy the API to the prod stage), and section 3 (create the Lambda functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail, studentData DynamoDB table, student-backup-20250706 S3 bucket, SES email verification). Ensure your AWS account is ready and the AWS region is us-east-1.\nDetailed Actions Access AWS Management Console\nOpen your browser and log in to AWS Management Console with your AWS account.\nIn the search bar at the top of the page, type API Gateway and select Amazon API Gateway to access the management interface.\nCheck the AWS region: Make sure you\u0026rsquo;re working in the correct AWS region (assumed us-east-1 to match previous steps), and verify the region in the top-right corner of the AWS Console. This region must match with the student API, Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail), studentData DynamoDB table, student-backup-20250706 S3 bucket, and SES.\nFigure 1: AWS Console interface with the API Gateway search bar.\nNavigate to the API Keys Section\nIn the main interface of Amazon API Gateway, look at the left navigation menu.\nSelect API Keys to view the list of existing API Keys.\nThe list should display StudentApiKey (created in section 4.2). If it\u0026rsquo;s not visible, check your AWS region or refresh the page.\nFigure 2: Navigation menu with the API Keys option.\nSelect the StudentApiKey\nIn the API Keys list, find and select StudentApiKey.\nYou will be taken to the detail page of StudentApiKey, where you can see information like Value (the API key value, which may be hidden), Usage Plans, and configuration options.\nFigure 3: Detail page of StudentApiKey.\nLink StudentApiKey to the Usage Plan\nOn the detail page of StudentApiKey, click Add to Usage Plan (or Actions \u0026gt; Add to Usage Plan, depending on your Console version).\nIn the Add key to usage plan section:\nUsage Plan: Select StudentUsagePlan from the dropdown (created in section 4.3). Note: If StudentUsagePlan does not appear, check if the Usage Plan has been created in the same AWS region (us-east-1). Click Save to link StudentApiKey to StudentUsagePlan.\nCheck: After saving, in the detail page of StudentApiKey, the Usage Plans section will show StudentUsagePlan.\nFigure 4: Linking StudentApiKey to StudentUsagePlan.\nCheck the Status of the API Key Link\nAfter clicking Save, you should see the message: \u0026ldquo;Successfully added \u0026lsquo;StudentApiKey\u0026rsquo; to \u0026lsquo;StudentUsagePlan\u0026rsquo;.\u0026rdquo;\nIf you don\u0026rsquo;t see the message or encounter an error:\n\u0026ldquo;Usage Plan not found\u0026rdquo;: Check if StudentUsagePlan exists in Usage Plans (section 4.3). \u0026ldquo;AccessDenied\u0026rdquo;: Check the IAM role of your AWS account for apigateway:PUT permission to link the API Key. \u0026ldquo;API Key already added\u0026rdquo;: If StudentApiKey was already linked, this message may appear; skip and continue to the next step. Figure 5: Status message of linking the API Key.\nNavigate to the Usage Plans Section\nIn the left menu of Amazon API Gateway, select Usage Plans to see the list of Usage Plans.\nThe list should display StudentUsagePlan (created in section 4.3). If it\u0026rsquo;s not visible, check your AWS region or refresh the page.\nFigure 6: Navigation menu with the Usage Plans option.\nSelect StudentUsagePlan\nIn the Usage Plans list, find and select StudentUsagePlan.\nYou will be taken to the detail page of StudentUsagePlan, where you can see information such as Throttling (Rate: 5, Burst: 10), Quota (1000 requests/day), API Keys, and Associated APIs and Stages.\nFigure 7: Detail page of StudentUsagePlan.\nLink API and Stage\nIn the detail page of StudentUsagePlan, click Add API Stage (or Actions \u0026gt; Add API Stage, depending on your Console version). Figure 8: Clicking the Add API Stage button.\nIn the Add API Stage interface:\nAPI: Select student from the dropdown (created in section 4.1). Stage: Select prod from the dropdown (created in section 4.8). Note: If student or prod does not appear, check that the student API and prod stage have been created in the same AWS region (us-east-1). Click Add to Usage Plan to link.\nCheck: In the detail page of StudentUsagePlan, the Associated APIs and Stages section will show student:prod.\nFigure 9: Linking API and Stage interface.\nCheck the Status of API and Stage Link\nAfter clicking Add to Usage Plan, you should see the message: \u0026ldquo;Successfully added stage \u0026lsquo;prod\u0026rsquo; to usage plan.\u0026rdquo;\nTo verify:\nIn Usage Plans \u0026gt; StudentUsagePlan: Check that API Keys displays StudentApiKey. Check that Associated APIs and Stages displays student:prod. If you don\u0026rsquo;t see the message or encounter an error: \u0026ldquo;API or Stage not found\u0026rdquo;: Check if the student API and prod stage exist (sections 4.1, 4.8). \u0026ldquo;AccessDenied\u0026rdquo;: Check if your IAM role has the apigateway:PUT permission to link API/stage. \u0026ldquo;Stage already associated\u0026rdquo;: If student:prod was already linked, this message may appear; skip. Figure 10: Status message of linking API and Stage.\nKey Considerations Factor Details Check Full Configuration - API Key: StudentApiKey is linked to StudentUsagePlan. - Usage Plan: StudentUsagePlan applies Rate limits (5 requests/second), Burst (10 requests), and Quota (1000 requests/day). - API/Stage: student:prod is linked and applies the limits of StudentUsagePlan to the endpoints (GET /students, POST /students, POST /backup). - API Key Required: The methods have API Key Required: true (sections 4.4, 4.5, 4.6). API Key Security Requests to the endpoints must include the x-api-key: \u0026lt;StudentApiKey\u0026gt; header. Store the API Key in AWS Secrets Manager for increased security. CORS Ensure CORS is enabled (section 4.7) with the OPTIONS method and Access-Control-Allow-Origin: '*' header (or specific CloudFront domain). Lambda functions (getStudentData, insertStudentData, BackupDynamoDBAndSendEmail) must return the Access-Control-Allow-Origin: '*' header (configured in sections 3.1, 3.2, 3.3). AWS Region Ensure the us-east-1 region matches with the student API, prod stage, StudentApiKey, StudentUsagePlan, Lambda functions, studentData DynamoDB table, student-backup-20250706 S3 bucket, and SES. Error Handling - If a 403 \u0026quot;Forbidden\u0026quot; error occurs when calling the endpoint: - Check if the StudentApiKey is valid and linked to StudentUsagePlan. - Ensure student:prod is linked to StudentUsagePlan. - Verify API Key Required: true in Method Request (sections 4.4, 4.5, 4.6). - If a 429 \u0026quot;Too Many Requests\u0026quot; error occurs: - Check Rate (5 requests/second), Burst (10 requests), or Quota (1000 requests/day) limits in StudentUsagePlan. - Check usage statistics in Usage Plans \u0026gt; StudentUsagePlan \u0026gt; Usage. - If a 500 error occurs from Lambda, check the logs in CloudWatch (/aws/lambda/getStudentData, /aws/lambda/insertStudentData, /aws/lambda/BackupDynamoDBAndSendEmail). - If no success message appears, check your AWS region or refresh the Console page. Optimization - Enable CloudWatch Metrics for StudentUsagePlan to track the number of requests: - In Usage Plans \u0026gt; StudentUsagePlan, select Enable usage plan metrics. - Check in CloudWatch \u0026gt; Metrics \u0026gt; API Gateway \u0026gt; UsagePlanId. - Consider using AWS WAF with API Gateway to protect against DDoS attacks or API Key abuse. - If more API Keys are needed (e.g., for multiple web applications), create additional API Keys and link them to StudentUsagePlan. Early Verification - After linking StudentApiKey and associating student:prod, check the configuration in Usage Plans \u0026gt; StudentUsagePlan. - Test the endpoints using Postman or curl with the StudentApiKey. - Expected results: - GET /students: Returns student data from DynamoDB studentData. - POST /students: Stores new records in DynamoDB and sends a confirmation email via SES. - POST /backup: Creates a backup file in S3 student-backup-20250706 and sends a notification email. - Check from the web interface (open Developer Tools \u0026gt; Network in your browser) to verify there are no CORS, 403, or 429 errors. Web Interface Integration Check Use the Invoke URL and StudentApiKey in the web interface (using Tailwind CSS, running on CloudFront) to call the endpoints (GET /students, POST /students, POST /backup). Best Practice Tip: After linking StudentApiKey and associating student:prod, test the endpoints using Postman with the x-api-key header before integrating with the web interface. Verify the data in DynamoDB studentData, the S3 bucket student-backup-20250706, and the SES email to ensure the endpoints are working correctly.\nConclusion StudentApiKey has been successfully linked to StudentUsagePlan and associated with the student API on the prod stage, ensuring that the endpoints (GET /students, POST /students, POST /backup) are secured and access-controlled, ready for use in the web interface.\nNext Step: Proceed to Continue configuring or integrating the web interface to complete the system!\n"
},
{
	"uri": "/9-testing-results/",
	"title": "System Testing Results",
	"tags": [],
	"description": "",
	"content": " Objective: Test the entire serverless system, including the web interface (served via CloudFront StudentWebsiteDistribution), student data saving functionality (POST /students), viewing the student list (GET /students), sending notification emails via Amazon SES, and automatic backup from DynamoDB studentData to the S3 Bucket student-backup-20250706. Ensure the system works correctly from frontend to backend, notification emails, and automated backup.\nOverview of Testing Results Web Interface: Distributed via CloudFront StudentWebsiteDistribution (sections 7.1–7.3) from S3 Bucket student-management-website-2025 (sections 6.1–6.4). Uses Tailwind CSS (section 5) to display the student information form (studentid, name, class, birthdate, email) and the data table. Calls the student API (stage prod, section 4.8) with Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey (section 4.2). Backend Functions: POST /students: Lambda function insertStudentData (section 3.2) saves records to DynamoDB studentData and sends emails via SES. GET /students: Lambda function getStudentData (section 3.1) retrieves data from DynamoDB. POST /backup: Lambda function DynamoDBBackup (section 8.1) saves a JSON file to S3 student-backup-20250706 and sends notification emails. Automated backup: EventBridge Rule DailyDynamoDBBackup (section 8.2) triggers DynamoDBBackup daily at 07:00 AM +07. System Integration: CORS configured (section 4.7) to support requests from CloudFront (e.g., https://d12345678.cloudfront.net). IAM role DynamoDBBackupRoleStudent (section 6.5) grants permissions for DynamoDB, S3, SES. Notification emails sent via SES to students and admin (no-reply@studentapp.com, admin@studentapp.com). Prerequisites You need to complete:\nSection 2.4: Create S3 Bucket student-backup-20250706. Sections 3.1–3.3: Create Lambda functions getStudentData, insertStudentData, DynamoDBBackup with role DynamoDBBackupRoleStudent. Sections 4.1–4.9: Create the student API, StudentApiKey, StudentUsagePlan, methods GET /students, POST /students, POST /backup, enable CORS, deploy the prod stage. Section 5: Build the web interface (index.html, styles.css, scripts.js). Sections 6.1–6.5: Create S3 Buckets student-management-website-2025, student-backup-20250706. Sections 7.1–7.3: Create CloudFront StudentWebsiteDistribution. Sections 8.1–8.2: Configure Lambda DynamoDBBackup, EventBridge Rule DailyDynamoDBBackup.\nEnsure your AWS account has permissions for dynamodb:Scan, dynamodb:PutItem, s3:GetObject, s3:PutObject, ses:SendEmail, and the AWS region is us-east-1. Detailed Actions Access the Website via CloudFront Domain Name\nOpen a browser (Chrome, Firefox) and enter the CloudFront URL (e.g., https://d12345678.cloudfront.net) from CloudFront \u0026gt; Distributions \u0026gt; StudentWebsiteDistribution (section 7.3). Expected results: The web interface loads successfully, displaying the student information form (studentid, name, class, birthdate, email) and the Save, View All Students buttons, styled with Tailwind CSS (section 5). No JavaScript errors in Developer Tools \u0026gt; Console.\nFigure 1: Access CloudFront URL.\nFigure 2: Website interface. Enter and Save Student Information\nIn the web form, enter: Student ID (studentid): SV006 Name: Nguyen Van F Class: CNTT06 Birthdate: 2001-06-06 Email: student6@example.com Click Save to send POST /students via API Gateway.\nFigure 3: Student information form. Confirm Successful Save Notification\nAfter clicking Save, the interface displays a \u0026ldquo;Save successful\u0026rdquo; notification (handled by scripts.js). Expected results: Notification is displayed (e.g., via alert() or a Tailwind CSS-styled div). The insertStudentData function returns: { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;message\\\u0026#34;: \\\u0026#34;Lưu thành công\\\u0026#34;}\u0026#34; } Figure 4: Save successful notification. View Student List\nClick View All Students to send GET /students. Expected results: The getStudentData function (section 3.1) retrieves data from studentData. The interface displays a table containing the newly entered record (SV006) and other records, with fields: studentid, name, class, birthdate, email.\nFigure 5: Student list table. Check Student Notification Email\nOpen the inbox of student6@example.com to check the email from SES. Expected results: Email from no-reply@studentapp.com with: Subject: Student information has been saved Body: Hello Nguyen Van F,\rYour information has been successfully saved:\r- Student ID: SV006\r- Class: CNTT06\r- Birthdate: 2001-06-06\r- Email: student6@example.com Troubleshooting: Email not sent: Verify no-reply@studentapp.com, student6@example.com in SES (section 3). Check ses:SendEmail permission in DynamoDBBackupRoleStudent.\nFigure 6: Student notification email. Check Data in DynamoDB\nIn AWS Management Console, go to DynamoDB \u0026gt; Tables \u0026gt; studentData. Select Explore items to view the data. Expected results: New record: { \u0026#34;studentid\u0026#34;: \u0026#34;SV006\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Nguyen Van F\u0026#34;, \u0026#34;class\u0026#34;: \u0026#34;CNTT06\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;2001-06-06\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;student6@example.com\u0026#34; } Other records are displayed correctly. Troubleshooting: Record not found: Check /aws/lambda/insertStudentData logs (section 10) or dynamodb:PutItem permission.\nFigure 7: Data in DynamoDB. Check Admin Backup Notification Email\nOpen the inbox of admin@studentapp.com to check the backup email from SES (sent by DynamoDBBackup, section 8.1). Expected results: Email from no-reply@studentapp.com with: Subject: Student Data Backup Completed Body: Backup created at backup/students-backup-20250709T0700.json in S3 bucket student-backup-20250706 Email sent after DynamoDBBackup runs (manually via POST /backup or automatically via DailyDynamoDBBackup at 07:00 AM +07, section 8.2). Troubleshooting: Email not sent: Verify SES email and ses:SendEmail permission. Check /aws/lambda/DynamoDBBackup logs (section 10).\nFigure 8: Backup notification email. Check Backup File in S3\nIn AWS Management Console, go to S3 \u0026gt; Buckets \u0026gt; student-backup-20250706. Open the backup/ folder and check the JSON file (e.g., students-backup-20250709T0700.json). Expected results: The JSON file contains data from studentData, including the SV006 record. Troubleshooting: File not found: Check /aws/lambda/DynamoDBBackup logs or s3:PutObject permission in DynamoDBBackupRoleStudent. Verify DailyDynamoDBBackup (section 8.2) runs on schedule.\nFigure 9: Backup file in S3. Important Notes Factor Details Security - Do not embed StudentApiKey in scripts.js. Use CloudFront Functions: javascript \u0026lt;br\u0026gt; function handler(event) { \u0026lt;br\u0026gt; var request = event.request; \u0026lt;br\u0026gt; request.headers['x-api-key'] = { value: 'xxxxxxxxxxxxxxxxxxxx' }; \u0026lt;br\u0026gt; return request; \u0026lt;br\u0026gt; } \u0026lt;br\u0026gt; - Verify SES emails (no-reply@studentapp.com, admin@studentapp.com, student6@example.com). Optimization - Check CloudWatch Logs (section 10) for performance analysis. - Use AWS CLI to test API: bash \u0026lt;br\u0026gt; aws apigateway test-invoke-method --rest-api-id abc123 --resource-id xxxxx --http-method POST --path-with-query-string /students --body '{\u0026quot;studentid\u0026quot;:\u0026quot;SV006\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;Nguyen Van F\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;CNTT06\u0026quot;,\u0026quot;birthdate\u0026quot;:\u0026quot;2001-06-06\u0026quot;,\u0026quot;email\u0026quot;:\u0026quot;student6@example.com\u0026quot;}' \u0026lt;br\u0026gt; Integration - Ensure CORS in API Gateway (section 4.7): Access-Control-Allow-Origin: https://d12345678.cloudfront.net. - Test all endpoints (POST /students, GET /students, POST /backup) via CloudFront URL. Integration Testing - Access https://d12345678.cloudfront.net: - POST /students: Save record, send SES email. - GET /students: Display table. - POST /backup: Create JSON file, send email. - Use Developer Tools \u0026gt; Network to inspect API requests. Error Handling - Interface error: Check index.html, scripts.js in S3 student-management-website-2025. - API error: Check /aws/lambda/insertStudentData, /aws/lambda/getStudentData logs. - Backup error: Verify DailyDynamoDBBackup and /aws/lambda/DynamoDBBackup logs. - Email error: Check SES email and ses:SendEmail permission. Best practice tip: Test each function via the web interface. Check CloudWatch Logs (section 10) for debugging. Set S3 Lifecycle Rule for student-backup-20250706 to manage old files.\nConclusion The serverless system works correctly: the web interface loads via CloudFront, POST /students saves data and sends emails, GET /students displays the list, POST /backup and DailyDynamoDBBackup create JSON files in S3, and notification emails are sent successfully. Everything is smoothly integrated with the student API and SES.\nNext step: Go to View Activity Logs with CloudWatch for detailed analysis\n"
},
{
	"uri": "/10-monitoring-logs-with-cloudwatch/",
	"title": "Monitoring Activity Logs with CloudWatch",
	"tags": [],
	"description": "",
	"content": " Objective: Use Amazon CloudWatch to view and manage activity logs of Lambda functions (DynamoDBBackup, getStudentData, insertStudentData) in the serverless system. Focus on checking logs of the insertStudentData function (integrated with the POST /students endpoint, section 4.5) to monitor student data saving to DynamoDB studentData and email sending via Amazon SES. Logs help verify functionality, detect errors, and optimize performance.\nOverview of CloudWatch Logs Role of CloudWatch Logs: Collect and store logs from Lambda functions (DynamoDBBackup, getStudentData, insertStudentData) in Log Groups for monitoring, debugging, and performance analysis. The insertStudentData function (section 3.2) handles POST /students, saves records (studentid, name, class, birthdate, email) to DynamoDB studentData, and sends confirmation emails via SES. Logs record: Successful API requests (statusCode: 200). Errors (e.g., AccessDenied, ValidationException). Performance (Duration, Memory Used). System Integration: The web interface (CloudFront StudentWebsiteDistribution, sections 7.1–7.3) from S3 student-management-website-2025 (sections 6.1–6.4) calls the student API (stage prod, section 4.8) with Invoke URL (e.g., https://abc123.execute-api.us-east-1.amazonaws.com/prod) and StudentApiKey (section 4.2). Functions: POST /students: Save record, send SES email. GET /students: Display data from getStudentData. POST /backup: Save JSON file to student-backup-20250706 (section 6.5) via DynamoDBBackup (section 8.1). CORS configured (section 4.7) supports requests from CloudFront (e.g., https://d12345678.cloudfront.net). Role DynamoDBBackupRoleStudent (section 6.5) grants DynamoDB, S3, SES permissions. EventBridge Rule DailyDynamoDBBackup (section 8.2) runs backup at 07:00 AM +07. Detailed Actions Access AWS Management Console and CloudWatch\nLog in to AWS Management Console. Search for CloudWatch, select Amazon CloudWatch. Verify AWS region: us-east-1 to synchronize with DynamoDB studentData, S3 (student-management-website-2025, student-backup-20250706), Lambda, API Gateway, SES, CloudFront.\nFigure 1: AWS Console interface with CloudWatch search bar. Select Log Groups\nIn CloudWatch, select Log groups from the left menu. Check: Verify the following Log Groups exist: /aws/lambda/DynamoDBBackup (for POST /backup, section 8.1). /aws/lambda/getStudentData (for GET /students, section 4.4). /aws/lambda/insertStudentData (for POST /students, section 4.5).\nFigure 2: Log Groups list. Select the Log Group for Lambda insertStudentData\nIn Log groups, click on /aws/lambda/insertStudentData. Identification: Contains logs of the insertStudentData function, recording POST /students activity (saving records to studentData, sending SES email). Trigger the function (if no logs): Send an API request: curl -X POST https://abc123.execute-api.us-east-1.amazonaws.com/prod/students \\ -H \u0026#34;x-api-key: xxxxxxxxxxxxxxxxxxxx\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;studentid\u0026#34;:\u0026#34;SV005\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Pham Thi E\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;CNTT05\u0026#34;,\u0026#34;birthdate\u0026#34;:\u0026#34;2001-05-05\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;student5@example.com\u0026#34;}\u0026#39; Figure 3: insertStudentData Log Group interface. View Log Streams\nIn /aws/lambda/insertStudentData, view the list of Log Streams (e.g., 2025/07/09/[$LATEST]abc123). Click the most recent Log Stream (based on Last Event Time) to view details. Check: Log Streams are created from: POST /students requests via CloudFront (https://d12345678.cloudfront.net). Manual test in Lambda Console (section 3.2).\nFigure 4: Log Streams list. Analyze Information in Log Stream\nIn the Log Stream, check: START RequestId: Start of execution. END RequestId: End of execution. REPORT RequestId: Performance (Duration, Billed Duration, Memory Used, Max Memory Used). Custom: Logs from console.log (e.g., Successfully saved to DynamoDB). Errors: AccessDenied, ValidationException, SES error. Analysis: Success: Log shows data saved to studentData, email sent via SES. Verify record (e.g., SV005) in DynamoDB and email at student5@example.com. Performance: Duration ~456 ms, Memory Used ~72 MB (within 128 MB limit, section 8.1). Potential errors: AccessDenied: Missing dynamodb:PutItem, ses:SendEmail permissions in DynamoDBBackupRoleStudent. ValidationException: Invalid input data (e.g., missing studentid). SES error: Email no-reply@studentapp.com or student5@example.com not verified in SES.\nFigure 5: Log Stream details. Use CloudWatch Logs Insights\nIn CloudWatch \u0026gt; Logs \u0026gt; Logs Insights, select /aws/lambda/insertStudentData. Successful query: fields @timestamp, @message\r| filter @message like /Successfully saved to DynamoDB/\r| sort @timestamp desc\r| limit 20 Error query: fields @timestamp, @message\r| filter @message like /ERROR/\r| sort @timestamp desc\r| limit 20 Click Run query. Results: Displays logs with time, message, error details (if any). Troubleshooting: AccessDenied: Check dynamodb:PutItem, ses:SendEmail permissions in DynamoDBBackupRoleStudent: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:PutItem\u0026#34;, \u0026#34;ses:SendEmail\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:dynamodb:us-east-1:\u0026lt;AWS_ACCOUNT_ID\u0026gt;:table/studentData\u0026#34;, \u0026#34;arn:aws:ses:us-east-1:\u0026lt;AWS_ACCOUNT_ID\u0026gt;:identity/*\u0026#34; ] } ] } Replace \u0026lt;AWS_ACCOUNT_ID\u0026gt; with your AWS account ID. ValidationException: Check API input data (e.g., studentid, name not empty). SES error: Verify email in SES (section 3). No logs: Ensure the function is triggered and CloudWatch Logs are enabled (section 8.1).\nFigure 6: CloudWatch Logs Insights. Important Notes Factor Details Security - Ensure the DynamoDBBackupRoleStudent role only grants necessary permissions (dynamodb:PutItem, ses:SendEmail). - Do not embed StudentApiKey in scripts.js. Use CloudFront Functions: javascript \u0026lt;br\u0026gt; function handler(event) { \u0026lt;br\u0026gt; var request = event.request; \u0026lt;br\u0026gt; request.headers['x-api-key'] = { value: 'xxxxxxxxxxxxxxxxxxxx' }; \u0026lt;br\u0026gt; return request; \u0026lt;br\u0026gt; } \u0026lt;br\u0026gt; Optimization - Enable CloudWatch Logs for Lambda (section 8.1). - Use AWS CLI to check logs: bash \u0026lt;br\u0026gt; aws logs describe-log-streams --log-group-name /aws/lambda/insertStudentData \u0026lt;br\u0026gt; Integration - Verify CORS in API Gateway (section 4.7): Access-Control-Allow-Origin: https://d12345678.cloudfront.net. - Test POST /students via CloudFront URL to generate new logs. Integration Testing - Access CloudFront URL (https://d12345678.cloudfront.net): - POST /students: Save record, send SES email. - GET /students: Display table. - POST /backup: Create file in student-backup-20250706, send email. - Use Developer Tools \u0026gt; Network to inspect API requests. Error Handling - No logs: Check CloudWatch Logs are enabled in Lambda, trigger the function via API. - AccessDenied: Verify logs:DescribeLogGroups, logs:GetLogEvents permissions. - ValidationException: Check input data. - SES error: Verify SES email. Best practice tip: Trigger POST /students via the web interface to generate new logs. Use Logs Insights to quickly filter errors. Set CloudWatch Alarms for Duration or Memory Used if you need performance monitoring.\nConclusion CloudWatch Logs allow you to monitor the activity of the insertStudentData Lambda, verify data is saved to studentData and emails are sent via SES. Logs help debug and optimize the serverless system, integrated with the student API and web interface via CloudFront.\nNext step: Optimize the system or set up CloudWatch Alarms for\n"
},
{
	"uri": "/11-reference-video-demo/",
	"title": "Reference Video Demo",
	"tags": [],
	"description": "",
	"content": " Objective: Provide a demo video illustrating the deployment and testing process of the serverless student management website on AWS, integrating S3, CloudFront, API Gateway, Lambda, DynamoDB, SES, and EventBridge. The video helps visualize how to build the application, from infrastructure setup to testing features like entering student information, viewing the list, sending emails, and automatic data backup.\nVideo Demo Content The video demonstrates the steps to deploy and test the serverless system. Reference Demo Link: Here Video Duration Suggested: 35 minutes, covering all main steps. Segments: AWS configuration (10 minutes). Web interface (10 minutes). Backend and backup testing (15 minutes). Timestamps for easy navigation (e.g., 00:00–10:00: AWS configuration, 10:01–20:00: Web interface). Reference Video Sources If you don\u0026rsquo;t have a specific video, refer to these sources:\nAWS Serverless Workshops: Tutorials at aws.amazon.com/serverless-workshops, including videos on building serverless apps (e.g., \u0026ldquo;to-do list\u0026rdquo; with Lambda, API Gateway, DynamoDB, Amplify). Getting Started Guide VTI Cloud: Videos on configuring Lambda, S3, API Gateway, DynamoDB at vticloud.io, demonstrating file handling and backup. Techmaster Vietnam: \u0026ldquo;Learn AWS the Hard Way\u0026rdquo; course at techmaster.vn with hands-on serverless videos (API Gateway, Lambda, DynamoDB). How to Use the Video Demo Watch the video to understand the deployment and testing process. Compare with your AWS Console configuration (S3, CloudFront, Lambda, etc.). Repeat the steps on your AWS account. If you encounter errors, refer to section 9 (Testing Results) and section 10 (CloudWatch Logs). Customize the source code (index.html, scripts.js, Lambda functions) as needed. Practical tip: Watch the video at 1.5x speed to save time. Take notes on configuration steps and compare with your system. Manually test POST /backup before relying on the scheduled backup.\nConclusion The demo video illustrates the entire process of deploying a serverless student management website, from AWS configuration (S3, CloudFront, API Gateway, Lambda, DynamoDB, SES, EventBridge) to testing features (save, view, backup, email). Use the video to reinforce your understanding and optimize your system.\nNext step: Review CloudWatch logs (section 10) for performance analysis and implement\n"
},
{
	"uri": "/12-cleaning-up-resources/",
	"title": "Cleaning Up Resources",
	"tags": [],
	"description": "",
	"content": " Objective: Clean up all AWS resources of the serverless system (S3, Lambda, API Gateway, CloudFront, DynamoDB, SES, EventBridge, IAM) to avoid unnecessary costs after completing the deployment and testing of the student management website. Ensure all related resources are deleted, including DynamoDB tables, Lambda functions, S3 Buckets, API Gateway, CloudFront Distribution, SES identities, IAM Roles, and EventBridge Rule.\nOverview of Resource Cleanup Purpose: Delete resources created in sections 2.4, 3.1–3.3, 4.1–4.9, 5, 6.1–6.5, 7.1–7.3, 8.1–8.2 to ensure your AWS account does not incur costs after finishing the lab. Resources to delete: DynamoDB: Table studentData (section 3). Lambda: Functions getStudentData, insertStudentData, BackupDynamoDBAndSendEmail (sections 3.1–3.3, 8.1). S3: Buckets student-management-website-2025, student-backup-20250706 (sections 2.4, 6.1–6.5). API Gateway: API student, stage prod, StudentApiKey, StudentUsagePlan (sections 4.1–4.9). CloudFront: Distribution StudentWebsiteDistribution (sections 7.1–7.3). SES: Verified identities (no-reply@studentapp.com, admin@studentapp.com, nguyentribaothang@gmail.com) (section 3). IAM: Roles LambdaGetStudentRole, LambdaInsertStudentRole, DynamoDBBackupRoleStudent (section 6.5). EventBridge: Rule DailyDynamoDBBackup (section 8.2). Prerequisites Make sure you have completed sections 2.4, 3.1–3.3, 4.1–4.9, 5, 6.1–6.5, 7.1–7.3, 8.1–8.2 and tested the results (section 9). Your AWS account needs permissions:\ndynamodb:DeleteTable lambda:DeleteFunction s3:DeleteBucket, s3:DeleteObject apigateway:DELETE cloudfront:UpdateDistribution, cloudfront:DeleteDistribution ses:DeleteIdentity iam:DeleteRole events:DeleteRule, events:RemoveTargets AWS Region: us-east-1. Detailed Steps Delete DynamoDB Table studentData\nIn AWS Management Console, go to DynamoDB \u0026gt; Tables \u0026gt; studentData. Click Actions \u0026gt; Delete table. Enter Confirm, click Delete. Expected result: The studentData table is no longer listed. Troubleshooting: If the table is in use (e.g., by Lambda), check CloudWatch logs (section 10) and ensure no functions are accessing it. Figure 1: Delete DynamoDB table. Delete Lambda Functions\nIn AWS Management Console, go to Lambda \u0026gt; Functions. Select each function: getStudentData, insertStudentData, BackupDynamoDBAndSendEmail. Click Actions \u0026gt; Delete function, type delete, click Delete. Expected result: The functions are no longer listed. Troubleshooting: If the function is attached to a trigger (e.g., API Gateway), remove the trigger first (step 4). Figure 5: Delete Lambda functions. Delete S3 Buckets\nIn AWS Management Console, go to S3 \u0026gt; Buckets. For each bucket (student-management-website-2025, student-backup-20250706): Select the bucket, click Empty, type permanently delete, click Empty. After deleting all objects, select the bucket, click Delete, enter the bucket name, click Delete bucket. Expected result: Buckets are no longer listed. Troubleshooting: If the bucket cannot be deleted, check s3:DeleteBucket, s3:DeleteObject permissions or remaining objects. Figure 6: Delete S3 buckets. Delete API Gateway student\nIn AWS Management Console, go to API Gateway \u0026gt; APIs \u0026gt; student. Click API Actions \u0026gt; Delete API, enter confirm, click Delete. Expected result: The student API (including stage prod, StudentApiKey, StudentUsagePlan) is no longer listed. Troubleshooting: If the API is in use, check CloudFront or CloudWatch logs (section 10). Figure 7: Delete API Gateway. Figure 8: Confirm API deletion. Figure 9: API deleted. Figure 7: Delete API Gateway. Figure 8: Confirm API deletion. Figure 9: API deleted. Delete CloudFront Distribution\nIn AWS Management Console, go to CloudFront \u0026gt; Distributions \u0026gt; StudentWebsiteDistribution. Click Disable, wait for the status to become Disabled (5–15 minutes). Select the Distribution, click Delete, confirm Yes, Delete. Expected result: The distribution is no longer listed. Troubleshooting: If you cannot disable, check cloudfront:UpdateDistribution, cloudfront:DeleteDistribution permissions. Figure 10: Delete CloudFront Distribution. Delete SES Verified Identities\nIn AWS Management Console, go to SES \u0026gt; Verified identities. Select emails: nguyentribaothang@gmail.com, no-reply@studentapp.com, admin@studentapp.com (if present), click Delete identity. Expected result: The emails are no longer listed. Troubleshooting: If the email is in use, check if Lambda insertStudentData or DynamoDBBackup has been deleted (step 2). Figure 11: Delete SES identities. Delete IAM Roles\nIn AWS Management Console, go to IAM \u0026gt; Roles. Select each role: LambdaGetStudentRole, LambdaInsertStudentRole, DynamoDBBackupRoleStudent, click Delete role, confirm. Expected result: The roles are no longer listed. Troubleshooting: If the role is in use, ensure Lambda functions and API Gateway have been deleted. Figure 12: Delete IAM roles. Delete EventBridge Rule\nIn AWS Management Console, go to EventBridge \u0026gt; Rules \u0026gt; DailyDynamoDBBackup. Click Delete, confirm in the pop-up. Expected result: The DailyDynamoDBBackup rule is no longer listed. Troubleshooting: If the rule cannot be deleted, check events:DeleteRule, events:RemoveTargets permissions or ensure Lambda BackupDynamoDBAndSendEmail has been deleted. Figure 13: Delete EventBridge Rule. Conclusion All AWS resources (studentData, Lambda functions, S3 Buckets, student API, CloudFront StudentWebsiteDistribution, SES identities, IAM Roles, EventBridge Rule) have been deleted, ensuring no further costs are incurred. The serverless system has been completely cleaned up.\nNext step: Check the AWS Billing Dashboard to verify there are no remaining charges or start deploying a new\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]